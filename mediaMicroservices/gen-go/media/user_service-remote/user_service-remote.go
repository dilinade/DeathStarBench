// Code generated by Thrift Compiler (0.19.0). DO NOT EDIT.

package main

import (
	"context"
	"flag"
	"fmt"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
	thrift "github.com/apache/thrift/lib/go/thrift"
	"media"
)

var _ = media.GoUnusedProtection__

func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "  void RegisterUser(i64 req_id, string first_name, string last_name, string username, string password,  carrier)")
  fmt.Fprintln(os.Stderr, "  void RegisterUserWithId(i64 req_id, string first_name, string last_name, string username, string password, i64 user_id,  carrier)")
  fmt.Fprintln(os.Stderr, "  string Login(i64 req_id, string username, string password,  carrier)")
  fmt.Fprintln(os.Stderr, "  void UploadUserWithUserId(i64 req_id, i64 user_id,  carrier)")
  fmt.Fprintln(os.Stderr, "  void UploadUserWithUsername(i64 req_id, string username,  carrier)")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

type httpHeaders map[string]string

func (h httpHeaders) String() string {
  var m map[string]string = h
  return fmt.Sprintf("%s", m)
}

func (h httpHeaders) Set(value string) error {
  parts := strings.Split(value, ": ")
  if len(parts) != 2 {
    return fmt.Errorf("header should be of format 'Key: Value'")
  }
  h[parts[0]] = parts[1]
  return nil
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  headers := make(httpHeaders)
  var parsedUrl *url.URL
  var trans thrift.TTransport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Var(headers, "H", "Headers to set on the http(s) request (e.g. -H \"Key: Value\")")
  flag.Parse()
  
  if len(urlString) > 0 {
    var err error
    parsedUrl, err = url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http" || parsedUrl.Scheme == "https"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  var cfg *thrift.TConfiguration = nil
  if useHttp {
    trans, err = thrift.NewTHttpClient(parsedUrl.String())
    if len(headers) > 0 {
      httptrans := trans.(*thrift.THttpClient)
      for key, value := range headers {
        httptrans.SetHeader(key, value)
      }
    }
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans = thrift.NewTSocketConf(net.JoinHostPort(host, portStr), cfg)
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewTFramedTransportConf(trans, cfg)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactoryConf(cfg)
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactoryConf(cfg)
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryConf(cfg)
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  iprot := protocolFactory.GetProtocol(trans)
  oprot := protocolFactory.GetProtocol(trans)
  client := media.NewUserServiceClient(thrift.NewTStandardClient(iprot, oprot))
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "RegisterUser":
    if flag.NArg() - 1 != 6 {
      fmt.Fprintln(os.Stderr, "RegisterUser requires 6 args")
      flag.Usage()
    }
    argvalue0, err134 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err134 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    argvalue4 := flag.Arg(5)
    value4 := argvalue4
    arg139 := flag.Arg(6)
    mbTrans140 := thrift.NewTMemoryBufferLen(len(arg139))
    defer mbTrans140.Close()
    _, err141 := mbTrans140.WriteString(arg139)
    if err141 != nil { 
      Usage()
      return
    }
    factory142 := thrift.NewTJSONProtocolFactory()
    jsProt143 := factory142.GetProtocol(mbTrans140)
    containerStruct5 := media.NewUserServiceRegisterUserArgs()
    err144 := containerStruct5.ReadField6(context.Background(), jsProt143)
    if err144 != nil {
      Usage()
      return
    }
    argvalue5 := containerStruct5.Carrier
    value5 := argvalue5
    fmt.Print(client.RegisterUser(context.Background(), value0, value1, value2, value3, value4, value5))
    fmt.Print("\n")
    break
  case "RegisterUserWithId":
    if flag.NArg() - 1 != 7 {
      fmt.Fprintln(os.Stderr, "RegisterUserWithId requires 7 args")
      flag.Usage()
    }
    argvalue0, err145 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err145 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    argvalue4 := flag.Arg(5)
    value4 := argvalue4
    argvalue5, err150 := (strconv.ParseInt(flag.Arg(6), 10, 64))
    if err150 != nil {
      Usage()
      return
    }
    value5 := argvalue5
    arg151 := flag.Arg(7)
    mbTrans152 := thrift.NewTMemoryBufferLen(len(arg151))
    defer mbTrans152.Close()
    _, err153 := mbTrans152.WriteString(arg151)
    if err153 != nil { 
      Usage()
      return
    }
    factory154 := thrift.NewTJSONProtocolFactory()
    jsProt155 := factory154.GetProtocol(mbTrans152)
    containerStruct6 := media.NewUserServiceRegisterUserWithIdArgs()
    err156 := containerStruct6.ReadField7(context.Background(), jsProt155)
    if err156 != nil {
      Usage()
      return
    }
    argvalue6 := containerStruct6.Carrier
    value6 := argvalue6
    fmt.Print(client.RegisterUserWithId(context.Background(), value0, value1, value2, value3, value4, value5, value6))
    fmt.Print("\n")
    break
  case "Login":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "Login requires 4 args")
      flag.Usage()
    }
    argvalue0, err157 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err157 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    arg160 := flag.Arg(4)
    mbTrans161 := thrift.NewTMemoryBufferLen(len(arg160))
    defer mbTrans161.Close()
    _, err162 := mbTrans161.WriteString(arg160)
    if err162 != nil { 
      Usage()
      return
    }
    factory163 := thrift.NewTJSONProtocolFactory()
    jsProt164 := factory163.GetProtocol(mbTrans161)
    containerStruct3 := media.NewUserServiceLoginArgs()
    err165 := containerStruct3.ReadField4(context.Background(), jsProt164)
    if err165 != nil {
      Usage()
      return
    }
    argvalue3 := containerStruct3.Carrier
    value3 := argvalue3
    fmt.Print(client.Login(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "UploadUserWithUserId":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "UploadUserWithUserId requires 3 args")
      flag.Usage()
    }
    argvalue0, err166 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err166 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1, err167 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err167 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg168 := flag.Arg(3)
    mbTrans169 := thrift.NewTMemoryBufferLen(len(arg168))
    defer mbTrans169.Close()
    _, err170 := mbTrans169.WriteString(arg168)
    if err170 != nil { 
      Usage()
      return
    }
    factory171 := thrift.NewTJSONProtocolFactory()
    jsProt172 := factory171.GetProtocol(mbTrans169)
    containerStruct2 := media.NewUserServiceUploadUserWithUserIdArgs()
    err173 := containerStruct2.ReadField3(context.Background(), jsProt172)
    if err173 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.Carrier
    value2 := argvalue2
    fmt.Print(client.UploadUserWithUserId(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "UploadUserWithUsername":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "UploadUserWithUsername requires 3 args")
      flag.Usage()
    }
    argvalue0, err174 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err174 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg176 := flag.Arg(3)
    mbTrans177 := thrift.NewTMemoryBufferLen(len(arg176))
    defer mbTrans177.Close()
    _, err178 := mbTrans177.WriteString(arg176)
    if err178 != nil { 
      Usage()
      return
    }
    factory179 := thrift.NewTJSONProtocolFactory()
    jsProt180 := factory179.GetProtocol(mbTrans177)
    containerStruct2 := media.NewUserServiceUploadUserWithUsernameArgs()
    err181 := containerStruct2.ReadField3(context.Background(), jsProt180)
    if err181 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.Carrier
    value2 := argvalue2
    fmt.Print(client.UploadUserWithUsername(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
