// Code generated by Thrift Compiler (0.19.0). DO NOT EDIT.

package media

import (
	"bytes"
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"time"
	thrift "github.com/apache/thrift/lib/go/thrift"
	"strings"
	"regexp"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = errors.New
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal
// (needed by validator.)
var _ = strings.Contains
var _ = regexp.MatchString

type ErrorCode int64
const (
  ErrorCode_SE_THRIFT_CONNPOOL_TIMEOUT ErrorCode = 0
  ErrorCode_SE_THRIFT_CONN_ERROR ErrorCode = 1
  ErrorCode_SE_UNAUTHORIZED ErrorCode = 2
  ErrorCode_SE_MEMCACHED_ERROR ErrorCode = 3
  ErrorCode_SE_MONGODB_ERROR ErrorCode = 4
  ErrorCode_SE_REDIS_ERROR ErrorCode = 5
  ErrorCode_SE_THRIFT_HANDLER_ERROR ErrorCode = 6
)

func (p ErrorCode) String() string {
  switch p {
  case ErrorCode_SE_THRIFT_CONNPOOL_TIMEOUT: return "SE_THRIFT_CONNPOOL_TIMEOUT"
  case ErrorCode_SE_THRIFT_CONN_ERROR: return "SE_THRIFT_CONN_ERROR"
  case ErrorCode_SE_UNAUTHORIZED: return "SE_UNAUTHORIZED"
  case ErrorCode_SE_MEMCACHED_ERROR: return "SE_MEMCACHED_ERROR"
  case ErrorCode_SE_MONGODB_ERROR: return "SE_MONGODB_ERROR"
  case ErrorCode_SE_REDIS_ERROR: return "SE_REDIS_ERROR"
  case ErrorCode_SE_THRIFT_HANDLER_ERROR: return "SE_THRIFT_HANDLER_ERROR"
  }
  return "<UNSET>"
}

func ErrorCodeFromString(s string) (ErrorCode, error) {
  switch s {
  case "SE_THRIFT_CONNPOOL_TIMEOUT": return ErrorCode_SE_THRIFT_CONNPOOL_TIMEOUT, nil 
  case "SE_THRIFT_CONN_ERROR": return ErrorCode_SE_THRIFT_CONN_ERROR, nil 
  case "SE_UNAUTHORIZED": return ErrorCode_SE_UNAUTHORIZED, nil 
  case "SE_MEMCACHED_ERROR": return ErrorCode_SE_MEMCACHED_ERROR, nil 
  case "SE_MONGODB_ERROR": return ErrorCode_SE_MONGODB_ERROR, nil 
  case "SE_REDIS_ERROR": return ErrorCode_SE_REDIS_ERROR, nil 
  case "SE_THRIFT_HANDLER_ERROR": return ErrorCode_SE_THRIFT_HANDLER_ERROR, nil 
  }
  return ErrorCode(0), fmt.Errorf("not a valid ErrorCode string")
}


func ErrorCodePtr(v ErrorCode) *ErrorCode { return &v }

func (p ErrorCode) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ErrorCode) UnmarshalText(text []byte) error {
q, err := ErrorCodeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ErrorCode) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ErrorCode(v)
return nil
}

func (p * ErrorCode) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
// Attributes:
//  - UserID
//  - FirstName
//  - LastName
//  - Username
//  - Password
//  - Salt
type User struct {
  UserID int64 `thrift:"user_id,1" db:"user_id" json:"user_id"`
  FirstName string `thrift:"first_name,2" db:"first_name" json:"first_name"`
  LastName string `thrift:"last_name,3" db:"last_name" json:"last_name"`
  Username string `thrift:"username,4" db:"username" json:"username"`
  Password string `thrift:"password,5" db:"password" json:"password"`
  Salt string `thrift:"salt,6" db:"salt" json:"salt"`
}

func NewUser() *User {
  return &User{}
}


func (p *User) GetUserID() int64 {
  return p.UserID
}

func (p *User) GetFirstName() string {
  return p.FirstName
}

func (p *User) GetLastName() string {
  return p.LastName
}

func (p *User) GetUsername() string {
  return p.Username
}

func (p *User) GetPassword() string {
  return p.Password
}

func (p *User) GetSalt() string {
  return p.Salt
}
func (p *User) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *User)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UserID = v
}
  return nil
}

func (p *User)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.FirstName = v
}
  return nil
}

func (p *User)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.LastName = v
}
  return nil
}

func (p *User)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Username = v
}
  return nil
}

func (p *User)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Password = v
}
  return nil
}

func (p *User)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Salt = v
}
  return nil
}

func (p *User) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "User"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *User) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "user_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.UserID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user_id: ", p), err) }
  return err
}

func (p *User) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "first_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:first_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.FirstName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.first_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:first_name: ", p), err) }
  return err
}

func (p *User) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "last_name", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:last_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.LastName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.last_name (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:last_name: ", p), err) }
  return err
}

func (p *User) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "username", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:username: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Username)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.username (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:username: ", p), err) }
  return err
}

func (p *User) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "password", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:password: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Password)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.password (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:password: ", p), err) }
  return err
}

func (p *User) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "salt", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:salt: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Salt)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.salt (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:salt: ", p), err) }
  return err
}

func (p *User) Equals(other *User) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.UserID != other.UserID { return false }
  if p.FirstName != other.FirstName { return false }
  if p.LastName != other.LastName { return false }
  if p.Username != other.Username { return false }
  if p.Password != other.Password { return false }
  if p.Salt != other.Salt { return false }
  return true
}

func (p *User) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("User(%+v)", *p)
}

func (p *User) Validate() error {
  return nil
}
// Attributes:
//  - ReviewID
//  - UserID
//  - ReqID
//  - Text
//  - MovieID
//  - Rating
//  - Timestamp
type Review struct {
  ReviewID int64 `thrift:"review_id,1" db:"review_id" json:"review_id"`
  UserID int64 `thrift:"user_id,2" db:"user_id" json:"user_id"`
  ReqID int64 `thrift:"req_id,3" db:"req_id" json:"req_id"`
  Text string `thrift:"text,4" db:"text" json:"text"`
  MovieID string `thrift:"movie_id,5" db:"movie_id" json:"movie_id"`
  Rating int32 `thrift:"rating,6" db:"rating" json:"rating"`
  Timestamp int64 `thrift:"timestamp,7" db:"timestamp" json:"timestamp"`
}

func NewReview() *Review {
  return &Review{}
}


func (p *Review) GetReviewID() int64 {
  return p.ReviewID
}

func (p *Review) GetUserID() int64 {
  return p.UserID
}

func (p *Review) GetReqID() int64 {
  return p.ReqID
}

func (p *Review) GetText() string {
  return p.Text
}

func (p *Review) GetMovieID() string {
  return p.MovieID
}

func (p *Review) GetRating() int32 {
  return p.Rating
}

func (p *Review) GetTimestamp() int64 {
  return p.Timestamp
}
func (p *Review) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Review)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReviewID = v
}
  return nil
}

func (p *Review)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserID = v
}
  return nil
}

func (p *Review)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ReqID = v
}
  return nil
}

func (p *Review)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Text = v
}
  return nil
}

func (p *Review)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.MovieID = v
}
  return nil
}

func (p *Review)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Rating = v
}
  return nil
}

func (p *Review)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.Timestamp = v
}
  return nil
}

func (p *Review) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Review"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Review) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "review_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:review_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ReviewID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.review_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:review_id: ", p), err) }
  return err
}

func (p *Review) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "user_id", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:user_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.UserID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:user_id: ", p), err) }
  return err
}

func (p *Review) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req_id", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:req_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ReqID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.req_id (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:req_id: ", p), err) }
  return err
}

func (p *Review) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "text", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:text: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Text)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.text (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:text: ", p), err) }
  return err
}

func (p *Review) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "movie_id", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:movie_id: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.MovieID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.movie_id (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:movie_id: ", p), err) }
  return err
}

func (p *Review) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "rating", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:rating: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Rating)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rating (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:rating: ", p), err) }
  return err
}

func (p *Review) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "timestamp", thrift.I64, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:timestamp: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Timestamp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.timestamp (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:timestamp: ", p), err) }
  return err
}

func (p *Review) Equals(other *Review) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ReviewID != other.ReviewID { return false }
  if p.UserID != other.UserID { return false }
  if p.ReqID != other.ReqID { return false }
  if p.Text != other.Text { return false }
  if p.MovieID != other.MovieID { return false }
  if p.Rating != other.Rating { return false }
  if p.Timestamp != other.Timestamp { return false }
  return true
}

func (p *Review) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Review(%+v)", *p)
}

func (p *Review) Validate() error {
  return nil
}
// Attributes:
//  - CastInfoID
//  - Name
//  - Gender
//  - Intro
type CastInfo struct {
  CastInfoID int64 `thrift:"cast_info_id,1" db:"cast_info_id" json:"cast_info_id"`
  Name string `thrift:"name,2" db:"name" json:"name"`
  Gender bool `thrift:"gender,3" db:"gender" json:"gender"`
  Intro string `thrift:"intro,4" db:"intro" json:"intro"`
}

func NewCastInfo() *CastInfo {
  return &CastInfo{}
}


func (p *CastInfo) GetCastInfoID() int64 {
  return p.CastInfoID
}

func (p *CastInfo) GetName() string {
  return p.Name
}

func (p *CastInfo) GetGender() bool {
  return p.Gender
}

func (p *CastInfo) GetIntro() string {
  return p.Intro
}
func (p *CastInfo) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CastInfo)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.CastInfoID = v
}
  return nil
}

func (p *CastInfo)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *CastInfo)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Gender = v
}
  return nil
}

func (p *CastInfo)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Intro = v
}
  return nil
}

func (p *CastInfo) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "CastInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CastInfo) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "cast_info_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:cast_info_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.CastInfoID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.cast_info_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:cast_info_id: ", p), err) }
  return err
}

func (p *CastInfo) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err) }
  return err
}

func (p *CastInfo) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "gender", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:gender: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.Gender)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gender (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:gender: ", p), err) }
  return err
}

func (p *CastInfo) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "intro", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:intro: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Intro)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.intro (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:intro: ", p), err) }
  return err
}

func (p *CastInfo) Equals(other *CastInfo) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.CastInfoID != other.CastInfoID { return false }
  if p.Name != other.Name { return false }
  if p.Gender != other.Gender { return false }
  if p.Intro != other.Intro { return false }
  return true
}

func (p *CastInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CastInfo(%+v)", *p)
}

func (p *CastInfo) Validate() error {
  return nil
}
// Attributes:
//  - CastID
//  - Character
//  - CastInfoID
type Cast struct {
  CastID int32 `thrift:"cast_id,1" db:"cast_id" json:"cast_id"`
  Character string `thrift:"character,2" db:"character" json:"character"`
  CastInfoID int64 `thrift:"cast_info_id,3" db:"cast_info_id" json:"cast_info_id"`
}

func NewCast() *Cast {
  return &Cast{}
}


func (p *Cast) GetCastID() int32 {
  return p.CastID
}

func (p *Cast) GetCharacter() string {
  return p.Character
}

func (p *Cast) GetCastInfoID() int64 {
  return p.CastInfoID
}
func (p *Cast) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Cast)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.CastID = v
}
  return nil
}

func (p *Cast)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Character = v
}
  return nil
}

func (p *Cast)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.CastInfoID = v
}
  return nil
}

func (p *Cast) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Cast"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Cast) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "cast_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:cast_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.CastID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.cast_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:cast_id: ", p), err) }
  return err
}

func (p *Cast) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "character", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:character: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Character)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.character (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:character: ", p), err) }
  return err
}

func (p *Cast) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "cast_info_id", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:cast_info_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.CastInfoID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.cast_info_id (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:cast_info_id: ", p), err) }
  return err
}

func (p *Cast) Equals(other *Cast) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.CastID != other.CastID { return false }
  if p.Character != other.Character { return false }
  if p.CastInfoID != other.CastInfoID { return false }
  return true
}

func (p *Cast) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Cast(%+v)", *p)
}

func (p *Cast) Validate() error {
  return nil
}
// Attributes:
//  - MovieID
//  - Title
//  - Casts
//  - PlotID
//  - ThumbnailIds
//  - PhotoIds
//  - VideoIds
//  - AvgRating
//  - NumRating
type MovieInfo struct {
  MovieID string `thrift:"movie_id,1" db:"movie_id" json:"movie_id"`
  Title string `thrift:"title,2" db:"title" json:"title"`
  Casts []*Cast `thrift:"casts,3" db:"casts" json:"casts"`
  PlotID int64 `thrift:"plot_id,4" db:"plot_id" json:"plot_id"`
  ThumbnailIds []string `thrift:"thumbnail_ids,5" db:"thumbnail_ids" json:"thumbnail_ids"`
  PhotoIds []string `thrift:"photo_ids,6" db:"photo_ids" json:"photo_ids"`
  VideoIds []string `thrift:"video_ids,7" db:"video_ids" json:"video_ids"`
  AvgRating float64 `thrift:"avg_rating,8" db:"avg_rating" json:"avg_rating"`
  NumRating int32 `thrift:"num_rating,9" db:"num_rating" json:"num_rating"`
}

func NewMovieInfo() *MovieInfo {
  return &MovieInfo{}
}


func (p *MovieInfo) GetMovieID() string {
  return p.MovieID
}

func (p *MovieInfo) GetTitle() string {
  return p.Title
}

func (p *MovieInfo) GetCasts() []*Cast {
  return p.Casts
}

func (p *MovieInfo) GetPlotID() int64 {
  return p.PlotID
}

func (p *MovieInfo) GetThumbnailIds() []string {
  return p.ThumbnailIds
}

func (p *MovieInfo) GetPhotoIds() []string {
  return p.PhotoIds
}

func (p *MovieInfo) GetVideoIds() []string {
  return p.VideoIds
}

func (p *MovieInfo) GetAvgRating() float64 {
  return p.AvgRating
}

func (p *MovieInfo) GetNumRating() int32 {
  return p.NumRating
}
func (p *MovieInfo) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MovieInfo)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.MovieID = v
}
  return nil
}

func (p *MovieInfo)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Title = v
}
  return nil
}

func (p *MovieInfo)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Cast, 0, size)
  p.Casts =  tSlice
  for i := 0; i < size; i ++ {
    _elem0 := &Cast{}
    if err := _elem0.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
    }
    p.Casts = append(p.Casts, _elem0)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MovieInfo)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.PlotID = v
}
  return nil
}

func (p *MovieInfo)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.ThumbnailIds =  tSlice
  for i := 0; i < size; i ++ {
var _elem1 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem1 = v
}
    p.ThumbnailIds = append(p.ThumbnailIds, _elem1)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MovieInfo)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.PhotoIds =  tSlice
  for i := 0; i < size; i ++ {
var _elem2 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem2 = v
}
    p.PhotoIds = append(p.PhotoIds, _elem2)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MovieInfo)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.VideoIds =  tSlice
  for i := 0; i < size; i ++ {
var _elem3 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem3 = v
}
    p.VideoIds = append(p.VideoIds, _elem3)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MovieInfo)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.AvgRating = v
}
  return nil
}

func (p *MovieInfo)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.NumRating = v
}
  return nil
}

func (p *MovieInfo) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "MovieInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MovieInfo) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "movie_id", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:movie_id: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.MovieID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.movie_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:movie_id: ", p), err) }
  return err
}

func (p *MovieInfo) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "title", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:title: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Title)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.title (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:title: ", p), err) }
  return err
}

func (p *MovieInfo) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "casts", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:casts: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Casts)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Casts {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:casts: ", p), err) }
  return err
}

func (p *MovieInfo) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "plot_id", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:plot_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.PlotID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.plot_id (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:plot_id: ", p), err) }
  return err
}

func (p *MovieInfo) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "thumbnail_ids", thrift.LIST, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:thumbnail_ids: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.ThumbnailIds)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ThumbnailIds {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:thumbnail_ids: ", p), err) }
  return err
}

func (p *MovieInfo) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "photo_ids", thrift.LIST, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:photo_ids: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.PhotoIds)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.PhotoIds {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:photo_ids: ", p), err) }
  return err
}

func (p *MovieInfo) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "video_ids", thrift.LIST, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:video_ids: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.VideoIds)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.VideoIds {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:video_ids: ", p), err) }
  return err
}

func (p *MovieInfo) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "avg_rating", thrift.DOUBLE, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:avg_rating: ", p), err) }
  if err := oprot.WriteDouble(ctx, float64(p.AvgRating)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.avg_rating (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:avg_rating: ", p), err) }
  return err
}

func (p *MovieInfo) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "num_rating", thrift.I32, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:num_rating: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.NumRating)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.num_rating (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:num_rating: ", p), err) }
  return err
}

func (p *MovieInfo) Equals(other *MovieInfo) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.MovieID != other.MovieID { return false }
  if p.Title != other.Title { return false }
  if len(p.Casts) != len(other.Casts) { return false }
  for i, _tgt := range p.Casts {
    _src4 := other.Casts[i]
    if !_tgt.Equals(_src4) { return false }
  }
  if p.PlotID != other.PlotID { return false }
  if len(p.ThumbnailIds) != len(other.ThumbnailIds) { return false }
  for i, _tgt := range p.ThumbnailIds {
    _src5 := other.ThumbnailIds[i]
    if _tgt != _src5 { return false }
  }
  if len(p.PhotoIds) != len(other.PhotoIds) { return false }
  for i, _tgt := range p.PhotoIds {
    _src6 := other.PhotoIds[i]
    if _tgt != _src6 { return false }
  }
  if len(p.VideoIds) != len(other.VideoIds) { return false }
  for i, _tgt := range p.VideoIds {
    _src7 := other.VideoIds[i]
    if _tgt != _src7 { return false }
  }
  if p.AvgRating != other.AvgRating { return false }
  if p.NumRating != other.NumRating { return false }
  return true
}

func (p *MovieInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MovieInfo(%+v)", *p)
}

func (p *MovieInfo) Validate() error {
  return nil
}
// Attributes:
//  - MovieInfo
//  - Reviews
//  - CastInfos
//  - Plot
type Page struct {
  MovieInfo *MovieInfo `thrift:"movie_info,1" db:"movie_info" json:"movie_info"`
  Reviews []*Review `thrift:"reviews,2" db:"reviews" json:"reviews"`
  CastInfos []*CastInfo `thrift:"cast_infos,3" db:"cast_infos" json:"cast_infos"`
  Plot string `thrift:"plot,4" db:"plot" json:"plot"`
}

func NewPage() *Page {
  return &Page{}
}

var Page_MovieInfo_DEFAULT *MovieInfo
func (p *Page) GetMovieInfo() *MovieInfo {
  if !p.IsSetMovieInfo() {
    return Page_MovieInfo_DEFAULT
  }
return p.MovieInfo
}

func (p *Page) GetReviews() []*Review {
  return p.Reviews
}

func (p *Page) GetCastInfos() []*CastInfo {
  return p.CastInfos
}

func (p *Page) GetPlot() string {
  return p.Plot
}
func (p *Page) IsSetMovieInfo() bool {
  return p.MovieInfo != nil
}

func (p *Page) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Page)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.MovieInfo = &MovieInfo{}
  if err := p.MovieInfo.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.MovieInfo), err)
  }
  return nil
}

func (p *Page)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Review, 0, size)
  p.Reviews =  tSlice
  for i := 0; i < size; i ++ {
    _elem8 := &Review{}
    if err := _elem8.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem8), err)
    }
    p.Reviews = append(p.Reviews, _elem8)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Page)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*CastInfo, 0, size)
  p.CastInfos =  tSlice
  for i := 0; i < size; i ++ {
    _elem9 := &CastInfo{}
    if err := _elem9.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem9), err)
    }
    p.CastInfos = append(p.CastInfos, _elem9)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Page)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Plot = v
}
  return nil
}

func (p *Page) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Page"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Page) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "movie_info", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:movie_info: ", p), err) }
  if err := p.MovieInfo.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.MovieInfo), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:movie_info: ", p), err) }
  return err
}

func (p *Page) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reviews", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:reviews: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Reviews)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Reviews {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:reviews: ", p), err) }
  return err
}

func (p *Page) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "cast_infos", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:cast_infos: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.CastInfos)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.CastInfos {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:cast_infos: ", p), err) }
  return err
}

func (p *Page) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "plot", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:plot: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Plot)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.plot (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:plot: ", p), err) }
  return err
}

func (p *Page) Equals(other *Page) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.MovieInfo.Equals(other.MovieInfo) { return false }
  if len(p.Reviews) != len(other.Reviews) { return false }
  for i, _tgt := range p.Reviews {
    _src10 := other.Reviews[i]
    if !_tgt.Equals(_src10) { return false }
  }
  if len(p.CastInfos) != len(other.CastInfos) { return false }
  for i, _tgt := range p.CastInfos {
    _src11 := other.CastInfos[i]
    if !_tgt.Equals(_src11) { return false }
  }
  if p.Plot != other.Plot { return false }
  return true
}

func (p *Page) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Page(%+v)", *p)
}

func (p *Page) Validate() error {
  return nil
}
// Attributes:
//  - ErrorCode
//  - Message
type ServiceException struct {
  ErrorCode ErrorCode `thrift:"errorCode,1" db:"errorCode" json:"errorCode"`
  Message string `thrift:"message,2" db:"message" json:"message"`
}

func NewServiceException() *ServiceException {
  return &ServiceException{}
}


func (p *ServiceException) GetErrorCode() ErrorCode {
  return p.ErrorCode
}

func (p *ServiceException) GetMessage() string {
  return p.Message
}
func (p *ServiceException) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ServiceException)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := ErrorCode(v)
  p.ErrorCode = temp
}
  return nil
}

func (p *ServiceException)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *ServiceException) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ServiceException"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ServiceException) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "errorCode", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:errorCode: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ErrorCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.errorCode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:errorCode: ", p), err) }
  return err
}

func (p *ServiceException) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "message", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:message: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:message: ", p), err) }
  return err
}

func (p *ServiceException) Equals(other *ServiceException) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ErrorCode != other.ErrorCode { return false }
  if p.Message != other.Message { return false }
  return true
}

func (p *ServiceException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ServiceException(%+v)", *p)
}

func (p *ServiceException) Error() string {
  return p.String()
}

func (ServiceException) TExceptionType() thrift.TExceptionType {
  return thrift.TExceptionTypeCompiled
}

var _ thrift.TException = (*ServiceException)(nil)

func (p *ServiceException) Validate() error {
  return nil
}
type UniqueIdService interface {
  // Parameters:
  //  - ReqID
  //  - Carrier
  UploadUniqueId(ctx context.Context, req_id int64, carrier map[string]string) (_err error)
}

type UniqueIdServiceClient struct {
  c thrift.TClient
  meta thrift.ResponseMeta
}

func NewUniqueIdServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *UniqueIdServiceClient {
  return &UniqueIdServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewUniqueIdServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *UniqueIdServiceClient {
  return &UniqueIdServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewUniqueIdServiceClient(c thrift.TClient) *UniqueIdServiceClient {
  return &UniqueIdServiceClient{
    c: c,
  }
}

func (p *UniqueIdServiceClient) Client_() thrift.TClient {
  return p.c
}

func (p *UniqueIdServiceClient) LastResponseMeta_() thrift.ResponseMeta {
  return p.meta
}

func (p *UniqueIdServiceClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
  p.meta = meta
}

// Parameters:
//  - ReqID
//  - Carrier
func (p *UniqueIdServiceClient) UploadUniqueId(ctx context.Context, req_id int64, carrier map[string]string) (_err error) {
  var _args12 UniqueIdServiceUploadUniqueIdArgs
  _args12.ReqID = req_id
  _args12.Carrier = carrier
  var _result14 UniqueIdServiceUploadUniqueIdResult
  var _meta13 thrift.ResponseMeta
  _meta13, _err = p.Client_().Call(ctx, "UploadUniqueId", &_args12, &_result14)
  p.SetLastResponseMeta_(_meta13)
  if _err != nil {
    return
  }
  switch {
  case _result14.Se!= nil:
    return _result14.Se
  }

  return nil
}

type UniqueIdServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler UniqueIdService
}

func (p *UniqueIdServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *UniqueIdServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *UniqueIdServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewUniqueIdServiceProcessor(handler UniqueIdService) *UniqueIdServiceProcessor {

  self15 := &UniqueIdServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self15.processorMap["UploadUniqueId"] = &uniqueIdServiceProcessorUploadUniqueId{handler:handler}
return self15
}

func (p *UniqueIdServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
  if err2 != nil { return false, thrift.WrapTException(err2) }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(ctx, thrift.STRUCT)
  iprot.ReadMessageEnd(ctx)
  x16 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
  x16.Write(ctx, oprot)
  oprot.WriteMessageEnd(ctx)
  oprot.Flush(ctx)
  return false, x16

}

type uniqueIdServiceProcessorUploadUniqueId struct {
  handler UniqueIdService
}

func (p *uniqueIdServiceProcessorUploadUniqueId) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err17 error
  args := UniqueIdServiceUploadUniqueIdArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "UploadUniqueId", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := UniqueIdServiceUploadUniqueIdResult{}
  if err2 := p.handler.UploadUniqueId(ctx, args.ReqID, args.Carrier); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    switch v := err2.(type) {
    case *ServiceException:
      result.Se = v
    default:
      if errors.Is(err2, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err2)
      }
      if errors.Is(err2, context.Canceled) {
        if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
          return false, thrift.WrapTException(err)
        }
      }
      _exc18 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UploadUniqueId: " + err2.Error())
      if err2 := oprot.WriteMessageBegin(ctx, "UploadUniqueId", thrift.EXCEPTION, seqId); err2 != nil {
        _write_err17 = thrift.WrapTException(err2)
      }
      if err2 := _exc18.Write(ctx, oprot); _write_err17 == nil && err2 != nil {
        _write_err17 = thrift.WrapTException(err2)
      }
      if err2 := oprot.WriteMessageEnd(ctx); _write_err17 == nil && err2 != nil {
        _write_err17 = thrift.WrapTException(err2)
      }
      if err2 := oprot.Flush(ctx); _write_err17 == nil && err2 != nil {
        _write_err17 = thrift.WrapTException(err2)
      }
      if _write_err17 != nil {
        return false, thrift.WrapTException(_write_err17)
      }
      return true, err
    }
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "UploadUniqueId", thrift.REPLY, seqId); err2 != nil {
    _write_err17 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err17 == nil && err2 != nil {
    _write_err17 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err17 == nil && err2 != nil {
    _write_err17 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err17 == nil && err2 != nil {
    _write_err17 = thrift.WrapTException(err2)
  }
  if _write_err17 != nil {
    return false, thrift.WrapTException(_write_err17)
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - ReqID
//  - Carrier
type UniqueIdServiceUploadUniqueIdArgs struct {
  ReqID int64 `thrift:"req_id,1" db:"req_id" json:"req_id"`
  Carrier map[string]string `thrift:"carrier,2" db:"carrier" json:"carrier"`
}

func NewUniqueIdServiceUploadUniqueIdArgs() *UniqueIdServiceUploadUniqueIdArgs {
  return &UniqueIdServiceUploadUniqueIdArgs{}
}


func (p *UniqueIdServiceUploadUniqueIdArgs) GetReqID() int64 {
  return p.ReqID
}

func (p *UniqueIdServiceUploadUniqueIdArgs) GetCarrier() map[string]string {
  return p.Carrier
}
func (p *UniqueIdServiceUploadUniqueIdArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UniqueIdServiceUploadUniqueIdArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqID = v
}
  return nil
}

func (p *UniqueIdServiceUploadUniqueIdArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Carrier =  tMap
  for i := 0; i < size; i ++ {
var _key19 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key19 = v
}
var _val20 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val20 = v
}
    p.Carrier[_key19] = _val20
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *UniqueIdServiceUploadUniqueIdArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "UploadUniqueId_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UniqueIdServiceUploadUniqueIdArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ReqID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.req_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req_id: ", p), err) }
  return err
}

func (p *UniqueIdServiceUploadUniqueIdArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "carrier", thrift.MAP, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:carrier: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.Carrier)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Carrier {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:carrier: ", p), err) }
  return err
}

func (p *UniqueIdServiceUploadUniqueIdArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UniqueIdServiceUploadUniqueIdArgs(%+v)", *p)
}

// Attributes:
//  - Se
type UniqueIdServiceUploadUniqueIdResult struct {
  Se *ServiceException `thrift:"se,1" db:"se" json:"se,omitempty"`
}

func NewUniqueIdServiceUploadUniqueIdResult() *UniqueIdServiceUploadUniqueIdResult {
  return &UniqueIdServiceUploadUniqueIdResult{}
}

var UniqueIdServiceUploadUniqueIdResult_Se_DEFAULT *ServiceException
func (p *UniqueIdServiceUploadUniqueIdResult) GetSe() *ServiceException {
  if !p.IsSetSe() {
    return UniqueIdServiceUploadUniqueIdResult_Se_DEFAULT
  }
return p.Se
}
func (p *UniqueIdServiceUploadUniqueIdResult) IsSetSe() bool {
  return p.Se != nil
}

func (p *UniqueIdServiceUploadUniqueIdResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UniqueIdServiceUploadUniqueIdResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Se = &ServiceException{}
  if err := p.Se.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Se), err)
  }
  return nil
}

func (p *UniqueIdServiceUploadUniqueIdResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "UploadUniqueId_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UniqueIdServiceUploadUniqueIdResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSe() {
    if err := oprot.WriteFieldBegin(ctx, "se", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:se: ", p), err) }
    if err := p.Se.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Se), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:se: ", p), err) }
  }
  return err
}

func (p *UniqueIdServiceUploadUniqueIdResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UniqueIdServiceUploadUniqueIdResult(%+v)", *p)
}


type MovieIdService interface {
  // Parameters:
  //  - ReqID
  //  - Title
  //  - Rating
  //  - Carrier
  UploadMovieId(ctx context.Context, req_id int64, title string, rating int32, carrier map[string]string) (_err error)
  // Parameters:
  //  - ReqID
  //  - Title
  //  - MovieID
  //  - Carrier
  RegisterMovieId(ctx context.Context, req_id int64, title string, movie_id string, carrier map[string]string) (_err error)
}

type MovieIdServiceClient struct {
  c thrift.TClient
  meta thrift.ResponseMeta
}

func NewMovieIdServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *MovieIdServiceClient {
  return &MovieIdServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewMovieIdServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *MovieIdServiceClient {
  return &MovieIdServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewMovieIdServiceClient(c thrift.TClient) *MovieIdServiceClient {
  return &MovieIdServiceClient{
    c: c,
  }
}

func (p *MovieIdServiceClient) Client_() thrift.TClient {
  return p.c
}

func (p *MovieIdServiceClient) LastResponseMeta_() thrift.ResponseMeta {
  return p.meta
}

func (p *MovieIdServiceClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
  p.meta = meta
}

// Parameters:
//  - ReqID
//  - Title
//  - Rating
//  - Carrier
func (p *MovieIdServiceClient) UploadMovieId(ctx context.Context, req_id int64, title string, rating int32, carrier map[string]string) (_err error) {
  var _args28 MovieIdServiceUploadMovieIdArgs
  _args28.ReqID = req_id
  _args28.Title = title
  _args28.Rating = rating
  _args28.Carrier = carrier
  var _result30 MovieIdServiceUploadMovieIdResult
  var _meta29 thrift.ResponseMeta
  _meta29, _err = p.Client_().Call(ctx, "UploadMovieId", &_args28, &_result30)
  p.SetLastResponseMeta_(_meta29)
  if _err != nil {
    return
  }
  switch {
  case _result30.Se!= nil:
    return _result30.Se
  }

  return nil
}

// Parameters:
//  - ReqID
//  - Title
//  - MovieID
//  - Carrier
func (p *MovieIdServiceClient) RegisterMovieId(ctx context.Context, req_id int64, title string, movie_id string, carrier map[string]string) (_err error) {
  var _args31 MovieIdServiceRegisterMovieIdArgs
  _args31.ReqID = req_id
  _args31.Title = title
  _args31.MovieID = movie_id
  _args31.Carrier = carrier
  var _result33 MovieIdServiceRegisterMovieIdResult
  var _meta32 thrift.ResponseMeta
  _meta32, _err = p.Client_().Call(ctx, "RegisterMovieId", &_args31, &_result33)
  p.SetLastResponseMeta_(_meta32)
  if _err != nil {
    return
  }
  switch {
  case _result33.Se!= nil:
    return _result33.Se
  }

  return nil
}

type MovieIdServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler MovieIdService
}

func (p *MovieIdServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *MovieIdServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *MovieIdServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewMovieIdServiceProcessor(handler MovieIdService) *MovieIdServiceProcessor {

  self34 := &MovieIdServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self34.processorMap["UploadMovieId"] = &movieIdServiceProcessorUploadMovieId{handler:handler}
  self34.processorMap["RegisterMovieId"] = &movieIdServiceProcessorRegisterMovieId{handler:handler}
return self34
}

func (p *MovieIdServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
  if err2 != nil { return false, thrift.WrapTException(err2) }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(ctx, thrift.STRUCT)
  iprot.ReadMessageEnd(ctx)
  x35 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
  x35.Write(ctx, oprot)
  oprot.WriteMessageEnd(ctx)
  oprot.Flush(ctx)
  return false, x35

}

type movieIdServiceProcessorUploadMovieId struct {
  handler MovieIdService
}

func (p *movieIdServiceProcessorUploadMovieId) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err36 error
  args := MovieIdServiceUploadMovieIdArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "UploadMovieId", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := MovieIdServiceUploadMovieIdResult{}
  if err2 := p.handler.UploadMovieId(ctx, args.ReqID, args.Title, args.Rating, args.Carrier); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    switch v := err2.(type) {
    case *ServiceException:
      result.Se = v
    default:
      if errors.Is(err2, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err2)
      }
      if errors.Is(err2, context.Canceled) {
        if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
          return false, thrift.WrapTException(err)
        }
      }
      _exc37 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UploadMovieId: " + err2.Error())
      if err2 := oprot.WriteMessageBegin(ctx, "UploadMovieId", thrift.EXCEPTION, seqId); err2 != nil {
        _write_err36 = thrift.WrapTException(err2)
      }
      if err2 := _exc37.Write(ctx, oprot); _write_err36 == nil && err2 != nil {
        _write_err36 = thrift.WrapTException(err2)
      }
      if err2 := oprot.WriteMessageEnd(ctx); _write_err36 == nil && err2 != nil {
        _write_err36 = thrift.WrapTException(err2)
      }
      if err2 := oprot.Flush(ctx); _write_err36 == nil && err2 != nil {
        _write_err36 = thrift.WrapTException(err2)
      }
      if _write_err36 != nil {
        return false, thrift.WrapTException(_write_err36)
      }
      return true, err
    }
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "UploadMovieId", thrift.REPLY, seqId); err2 != nil {
    _write_err36 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err36 == nil && err2 != nil {
    _write_err36 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err36 == nil && err2 != nil {
    _write_err36 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err36 == nil && err2 != nil {
    _write_err36 = thrift.WrapTException(err2)
  }
  if _write_err36 != nil {
    return false, thrift.WrapTException(_write_err36)
  }
  return true, err
}

type movieIdServiceProcessorRegisterMovieId struct {
  handler MovieIdService
}

func (p *movieIdServiceProcessorRegisterMovieId) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err38 error
  args := MovieIdServiceRegisterMovieIdArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "RegisterMovieId", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := MovieIdServiceRegisterMovieIdResult{}
  if err2 := p.handler.RegisterMovieId(ctx, args.ReqID, args.Title, args.MovieID, args.Carrier); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    switch v := err2.(type) {
    case *ServiceException:
      result.Se = v
    default:
      if errors.Is(err2, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err2)
      }
      if errors.Is(err2, context.Canceled) {
        if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
          return false, thrift.WrapTException(err)
        }
      }
      _exc39 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing RegisterMovieId: " + err2.Error())
      if err2 := oprot.WriteMessageBegin(ctx, "RegisterMovieId", thrift.EXCEPTION, seqId); err2 != nil {
        _write_err38 = thrift.WrapTException(err2)
      }
      if err2 := _exc39.Write(ctx, oprot); _write_err38 == nil && err2 != nil {
        _write_err38 = thrift.WrapTException(err2)
      }
      if err2 := oprot.WriteMessageEnd(ctx); _write_err38 == nil && err2 != nil {
        _write_err38 = thrift.WrapTException(err2)
      }
      if err2 := oprot.Flush(ctx); _write_err38 == nil && err2 != nil {
        _write_err38 = thrift.WrapTException(err2)
      }
      if _write_err38 != nil {
        return false, thrift.WrapTException(_write_err38)
      }
      return true, err
    }
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "RegisterMovieId", thrift.REPLY, seqId); err2 != nil {
    _write_err38 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err38 == nil && err2 != nil {
    _write_err38 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err38 == nil && err2 != nil {
    _write_err38 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err38 == nil && err2 != nil {
    _write_err38 = thrift.WrapTException(err2)
  }
  if _write_err38 != nil {
    return false, thrift.WrapTException(_write_err38)
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - ReqID
//  - Title
//  - Rating
//  - Carrier
type MovieIdServiceUploadMovieIdArgs struct {
  ReqID int64 `thrift:"req_id,1" db:"req_id" json:"req_id"`
  Title string `thrift:"title,2" db:"title" json:"title"`
  Rating int32 `thrift:"rating,3" db:"rating" json:"rating"`
  Carrier map[string]string `thrift:"carrier,4" db:"carrier" json:"carrier"`
}

func NewMovieIdServiceUploadMovieIdArgs() *MovieIdServiceUploadMovieIdArgs {
  return &MovieIdServiceUploadMovieIdArgs{}
}


func (p *MovieIdServiceUploadMovieIdArgs) GetReqID() int64 {
  return p.ReqID
}

func (p *MovieIdServiceUploadMovieIdArgs) GetTitle() string {
  return p.Title
}

func (p *MovieIdServiceUploadMovieIdArgs) GetRating() int32 {
  return p.Rating
}

func (p *MovieIdServiceUploadMovieIdArgs) GetCarrier() map[string]string {
  return p.Carrier
}
func (p *MovieIdServiceUploadMovieIdArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MovieIdServiceUploadMovieIdArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqID = v
}
  return nil
}

func (p *MovieIdServiceUploadMovieIdArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Title = v
}
  return nil
}

func (p *MovieIdServiceUploadMovieIdArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Rating = v
}
  return nil
}

func (p *MovieIdServiceUploadMovieIdArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Carrier =  tMap
  for i := 0; i < size; i ++ {
var _key40 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key40 = v
}
var _val41 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val41 = v
}
    p.Carrier[_key40] = _val41
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *MovieIdServiceUploadMovieIdArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "UploadMovieId_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MovieIdServiceUploadMovieIdArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ReqID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.req_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req_id: ", p), err) }
  return err
}

func (p *MovieIdServiceUploadMovieIdArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "title", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:title: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Title)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.title (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:title: ", p), err) }
  return err
}

func (p *MovieIdServiceUploadMovieIdArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "rating", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:rating: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Rating)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rating (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:rating: ", p), err) }
  return err
}

func (p *MovieIdServiceUploadMovieIdArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "carrier", thrift.MAP, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:carrier: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.Carrier)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Carrier {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:carrier: ", p), err) }
  return err
}

func (p *MovieIdServiceUploadMovieIdArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MovieIdServiceUploadMovieIdArgs(%+v)", *p)
}

// Attributes:
//  - Se
type MovieIdServiceUploadMovieIdResult struct {
  Se *ServiceException `thrift:"se,1" db:"se" json:"se,omitempty"`
}

func NewMovieIdServiceUploadMovieIdResult() *MovieIdServiceUploadMovieIdResult {
  return &MovieIdServiceUploadMovieIdResult{}
}

var MovieIdServiceUploadMovieIdResult_Se_DEFAULT *ServiceException
func (p *MovieIdServiceUploadMovieIdResult) GetSe() *ServiceException {
  if !p.IsSetSe() {
    return MovieIdServiceUploadMovieIdResult_Se_DEFAULT
  }
return p.Se
}
func (p *MovieIdServiceUploadMovieIdResult) IsSetSe() bool {
  return p.Se != nil
}

func (p *MovieIdServiceUploadMovieIdResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MovieIdServiceUploadMovieIdResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Se = &ServiceException{}
  if err := p.Se.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Se), err)
  }
  return nil
}

func (p *MovieIdServiceUploadMovieIdResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "UploadMovieId_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MovieIdServiceUploadMovieIdResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSe() {
    if err := oprot.WriteFieldBegin(ctx, "se", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:se: ", p), err) }
    if err := p.Se.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Se), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:se: ", p), err) }
  }
  return err
}

func (p *MovieIdServiceUploadMovieIdResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MovieIdServiceUploadMovieIdResult(%+v)", *p)
}

// Attributes:
//  - ReqID
//  - Title
//  - MovieID
//  - Carrier
type MovieIdServiceRegisterMovieIdArgs struct {
  ReqID int64 `thrift:"req_id,1" db:"req_id" json:"req_id"`
  Title string `thrift:"title,2" db:"title" json:"title"`
  MovieID string `thrift:"movie_id,3" db:"movie_id" json:"movie_id"`
  Carrier map[string]string `thrift:"carrier,4" db:"carrier" json:"carrier"`
}

func NewMovieIdServiceRegisterMovieIdArgs() *MovieIdServiceRegisterMovieIdArgs {
  return &MovieIdServiceRegisterMovieIdArgs{}
}


func (p *MovieIdServiceRegisterMovieIdArgs) GetReqID() int64 {
  return p.ReqID
}

func (p *MovieIdServiceRegisterMovieIdArgs) GetTitle() string {
  return p.Title
}

func (p *MovieIdServiceRegisterMovieIdArgs) GetMovieID() string {
  return p.MovieID
}

func (p *MovieIdServiceRegisterMovieIdArgs) GetCarrier() map[string]string {
  return p.Carrier
}
func (p *MovieIdServiceRegisterMovieIdArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MovieIdServiceRegisterMovieIdArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqID = v
}
  return nil
}

func (p *MovieIdServiceRegisterMovieIdArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Title = v
}
  return nil
}

func (p *MovieIdServiceRegisterMovieIdArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.MovieID = v
}
  return nil
}

func (p *MovieIdServiceRegisterMovieIdArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Carrier =  tMap
  for i := 0; i < size; i ++ {
var _key42 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key42 = v
}
var _val43 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val43 = v
}
    p.Carrier[_key42] = _val43
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *MovieIdServiceRegisterMovieIdArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "RegisterMovieId_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MovieIdServiceRegisterMovieIdArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ReqID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.req_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req_id: ", p), err) }
  return err
}

func (p *MovieIdServiceRegisterMovieIdArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "title", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:title: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Title)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.title (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:title: ", p), err) }
  return err
}

func (p *MovieIdServiceRegisterMovieIdArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "movie_id", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:movie_id: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.MovieID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.movie_id (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:movie_id: ", p), err) }
  return err
}

func (p *MovieIdServiceRegisterMovieIdArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "carrier", thrift.MAP, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:carrier: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.Carrier)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Carrier {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:carrier: ", p), err) }
  return err
}

func (p *MovieIdServiceRegisterMovieIdArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MovieIdServiceRegisterMovieIdArgs(%+v)", *p)
}

// Attributes:
//  - Se
type MovieIdServiceRegisterMovieIdResult struct {
  Se *ServiceException `thrift:"se,1" db:"se" json:"se,omitempty"`
}

func NewMovieIdServiceRegisterMovieIdResult() *MovieIdServiceRegisterMovieIdResult {
  return &MovieIdServiceRegisterMovieIdResult{}
}

var MovieIdServiceRegisterMovieIdResult_Se_DEFAULT *ServiceException
func (p *MovieIdServiceRegisterMovieIdResult) GetSe() *ServiceException {
  if !p.IsSetSe() {
    return MovieIdServiceRegisterMovieIdResult_Se_DEFAULT
  }
return p.Se
}
func (p *MovieIdServiceRegisterMovieIdResult) IsSetSe() bool {
  return p.Se != nil
}

func (p *MovieIdServiceRegisterMovieIdResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MovieIdServiceRegisterMovieIdResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Se = &ServiceException{}
  if err := p.Se.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Se), err)
  }
  return nil
}

func (p *MovieIdServiceRegisterMovieIdResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "RegisterMovieId_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MovieIdServiceRegisterMovieIdResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSe() {
    if err := oprot.WriteFieldBegin(ctx, "se", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:se: ", p), err) }
    if err := p.Se.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Se), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:se: ", p), err) }
  }
  return err
}

func (p *MovieIdServiceRegisterMovieIdResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MovieIdServiceRegisterMovieIdResult(%+v)", *p)
}


type TextService interface {
  // Parameters:
  //  - ReqID
  //  - Text
  //  - Carrier
  UploadText(ctx context.Context, req_id int64, text string, carrier map[string]string) (_err error)
}

type TextServiceClient struct {
  c thrift.TClient
  meta thrift.ResponseMeta
}

func NewTextServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *TextServiceClient {
  return &TextServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewTextServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *TextServiceClient {
  return &TextServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewTextServiceClient(c thrift.TClient) *TextServiceClient {
  return &TextServiceClient{
    c: c,
  }
}

func (p *TextServiceClient) Client_() thrift.TClient {
  return p.c
}

func (p *TextServiceClient) LastResponseMeta_() thrift.ResponseMeta {
  return p.meta
}

func (p *TextServiceClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
  p.meta = meta
}

// Parameters:
//  - ReqID
//  - Text
//  - Carrier
func (p *TextServiceClient) UploadText(ctx context.Context, req_id int64, text string, carrier map[string]string) (_err error) {
  var _args62 TextServiceUploadTextArgs
  _args62.ReqID = req_id
  _args62.Text = text
  _args62.Carrier = carrier
  var _result64 TextServiceUploadTextResult
  var _meta63 thrift.ResponseMeta
  _meta63, _err = p.Client_().Call(ctx, "UploadText", &_args62, &_result64)
  p.SetLastResponseMeta_(_meta63)
  if _err != nil {
    return
  }
  switch {
  case _result64.Se!= nil:
    return _result64.Se
  }

  return nil
}

type TextServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler TextService
}

func (p *TextServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *TextServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *TextServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewTextServiceProcessor(handler TextService) *TextServiceProcessor {

  self65 := &TextServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self65.processorMap["UploadText"] = &textServiceProcessorUploadText{handler:handler}
return self65
}

func (p *TextServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
  if err2 != nil { return false, thrift.WrapTException(err2) }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(ctx, thrift.STRUCT)
  iprot.ReadMessageEnd(ctx)
  x66 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
  x66.Write(ctx, oprot)
  oprot.WriteMessageEnd(ctx)
  oprot.Flush(ctx)
  return false, x66

}

type textServiceProcessorUploadText struct {
  handler TextService
}

func (p *textServiceProcessorUploadText) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err67 error
  args := TextServiceUploadTextArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "UploadText", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TextServiceUploadTextResult{}
  if err2 := p.handler.UploadText(ctx, args.ReqID, args.Text, args.Carrier); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    switch v := err2.(type) {
    case *ServiceException:
      result.Se = v
    default:
      if errors.Is(err2, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err2)
      }
      if errors.Is(err2, context.Canceled) {
        if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
          return false, thrift.WrapTException(err)
        }
      }
      _exc68 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UploadText: " + err2.Error())
      if err2 := oprot.WriteMessageBegin(ctx, "UploadText", thrift.EXCEPTION, seqId); err2 != nil {
        _write_err67 = thrift.WrapTException(err2)
      }
      if err2 := _exc68.Write(ctx, oprot); _write_err67 == nil && err2 != nil {
        _write_err67 = thrift.WrapTException(err2)
      }
      if err2 := oprot.WriteMessageEnd(ctx); _write_err67 == nil && err2 != nil {
        _write_err67 = thrift.WrapTException(err2)
      }
      if err2 := oprot.Flush(ctx); _write_err67 == nil && err2 != nil {
        _write_err67 = thrift.WrapTException(err2)
      }
      if _write_err67 != nil {
        return false, thrift.WrapTException(_write_err67)
      }
      return true, err
    }
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "UploadText", thrift.REPLY, seqId); err2 != nil {
    _write_err67 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err67 == nil && err2 != nil {
    _write_err67 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err67 == nil && err2 != nil {
    _write_err67 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err67 == nil && err2 != nil {
    _write_err67 = thrift.WrapTException(err2)
  }
  if _write_err67 != nil {
    return false, thrift.WrapTException(_write_err67)
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - ReqID
//  - Text
//  - Carrier
type TextServiceUploadTextArgs struct {
  ReqID int64 `thrift:"req_id,1" db:"req_id" json:"req_id"`
  Text string `thrift:"text,2" db:"text" json:"text"`
  Carrier map[string]string `thrift:"carrier,3" db:"carrier" json:"carrier"`
}

func NewTextServiceUploadTextArgs() *TextServiceUploadTextArgs {
  return &TextServiceUploadTextArgs{}
}


func (p *TextServiceUploadTextArgs) GetReqID() int64 {
  return p.ReqID
}

func (p *TextServiceUploadTextArgs) GetText() string {
  return p.Text
}

func (p *TextServiceUploadTextArgs) GetCarrier() map[string]string {
  return p.Carrier
}
func (p *TextServiceUploadTextArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TextServiceUploadTextArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqID = v
}
  return nil
}

func (p *TextServiceUploadTextArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Text = v
}
  return nil
}

func (p *TextServiceUploadTextArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Carrier =  tMap
  for i := 0; i < size; i ++ {
var _key69 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key69 = v
}
var _val70 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val70 = v
}
    p.Carrier[_key69] = _val70
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *TextServiceUploadTextArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "UploadText_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TextServiceUploadTextArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ReqID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.req_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req_id: ", p), err) }
  return err
}

func (p *TextServiceUploadTextArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "text", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:text: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Text)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.text (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:text: ", p), err) }
  return err
}

func (p *TextServiceUploadTextArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "carrier", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:carrier: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.Carrier)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Carrier {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:carrier: ", p), err) }
  return err
}

func (p *TextServiceUploadTextArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TextServiceUploadTextArgs(%+v)", *p)
}

// Attributes:
//  - Se
type TextServiceUploadTextResult struct {
  Se *ServiceException `thrift:"se,1" db:"se" json:"se,omitempty"`
}

func NewTextServiceUploadTextResult() *TextServiceUploadTextResult {
  return &TextServiceUploadTextResult{}
}

var TextServiceUploadTextResult_Se_DEFAULT *ServiceException
func (p *TextServiceUploadTextResult) GetSe() *ServiceException {
  if !p.IsSetSe() {
    return TextServiceUploadTextResult_Se_DEFAULT
  }
return p.Se
}
func (p *TextServiceUploadTextResult) IsSetSe() bool {
  return p.Se != nil
}

func (p *TextServiceUploadTextResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TextServiceUploadTextResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Se = &ServiceException{}
  if err := p.Se.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Se), err)
  }
  return nil
}

func (p *TextServiceUploadTextResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "UploadText_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TextServiceUploadTextResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSe() {
    if err := oprot.WriteFieldBegin(ctx, "se", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:se: ", p), err) }
    if err := p.Se.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Se), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:se: ", p), err) }
  }
  return err
}

func (p *TextServiceUploadTextResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TextServiceUploadTextResult(%+v)", *p)
}


type RatingService interface {
  // Parameters:
  //  - ReqID
  //  - MovieID
  //  - Rating
  //  - Carrier
  UploadRating(ctx context.Context, req_id int64, movie_id string, rating int32, carrier map[string]string) (_err error)
}

type RatingServiceClient struct {
  c thrift.TClient
  meta thrift.ResponseMeta
}

func NewRatingServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *RatingServiceClient {
  return &RatingServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewRatingServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *RatingServiceClient {
  return &RatingServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewRatingServiceClient(c thrift.TClient) *RatingServiceClient {
  return &RatingServiceClient{
    c: c,
  }
}

func (p *RatingServiceClient) Client_() thrift.TClient {
  return p.c
}

func (p *RatingServiceClient) LastResponseMeta_() thrift.ResponseMeta {
  return p.meta
}

func (p *RatingServiceClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
  p.meta = meta
}

// Parameters:
//  - ReqID
//  - MovieID
//  - Rating
//  - Carrier
func (p *RatingServiceClient) UploadRating(ctx context.Context, req_id int64, movie_id string, rating int32, carrier map[string]string) (_err error) {
  var _args79 RatingServiceUploadRatingArgs
  _args79.ReqID = req_id
  _args79.MovieID = movie_id
  _args79.Rating = rating
  _args79.Carrier = carrier
  var _result81 RatingServiceUploadRatingResult
  var _meta80 thrift.ResponseMeta
  _meta80, _err = p.Client_().Call(ctx, "UploadRating", &_args79, &_result81)
  p.SetLastResponseMeta_(_meta80)
  if _err != nil {
    return
  }
  switch {
  case _result81.Se!= nil:
    return _result81.Se
  }

  return nil
}

type RatingServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler RatingService
}

func (p *RatingServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *RatingServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *RatingServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewRatingServiceProcessor(handler RatingService) *RatingServiceProcessor {

  self82 := &RatingServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self82.processorMap["UploadRating"] = &ratingServiceProcessorUploadRating{handler:handler}
return self82
}

func (p *RatingServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
  if err2 != nil { return false, thrift.WrapTException(err2) }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(ctx, thrift.STRUCT)
  iprot.ReadMessageEnd(ctx)
  x83 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
  x83.Write(ctx, oprot)
  oprot.WriteMessageEnd(ctx)
  oprot.Flush(ctx)
  return false, x83

}

type ratingServiceProcessorUploadRating struct {
  handler RatingService
}

func (p *ratingServiceProcessorUploadRating) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err84 error
  args := RatingServiceUploadRatingArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "UploadRating", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := RatingServiceUploadRatingResult{}
  if err2 := p.handler.UploadRating(ctx, args.ReqID, args.MovieID, args.Rating, args.Carrier); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    switch v := err2.(type) {
    case *ServiceException:
      result.Se = v
    default:
      if errors.Is(err2, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err2)
      }
      if errors.Is(err2, context.Canceled) {
        if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
          return false, thrift.WrapTException(err)
        }
      }
      _exc85 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UploadRating: " + err2.Error())
      if err2 := oprot.WriteMessageBegin(ctx, "UploadRating", thrift.EXCEPTION, seqId); err2 != nil {
        _write_err84 = thrift.WrapTException(err2)
      }
      if err2 := _exc85.Write(ctx, oprot); _write_err84 == nil && err2 != nil {
        _write_err84 = thrift.WrapTException(err2)
      }
      if err2 := oprot.WriteMessageEnd(ctx); _write_err84 == nil && err2 != nil {
        _write_err84 = thrift.WrapTException(err2)
      }
      if err2 := oprot.Flush(ctx); _write_err84 == nil && err2 != nil {
        _write_err84 = thrift.WrapTException(err2)
      }
      if _write_err84 != nil {
        return false, thrift.WrapTException(_write_err84)
      }
      return true, err
    }
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "UploadRating", thrift.REPLY, seqId); err2 != nil {
    _write_err84 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err84 == nil && err2 != nil {
    _write_err84 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err84 == nil && err2 != nil {
    _write_err84 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err84 == nil && err2 != nil {
    _write_err84 = thrift.WrapTException(err2)
  }
  if _write_err84 != nil {
    return false, thrift.WrapTException(_write_err84)
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - ReqID
//  - MovieID
//  - Rating
//  - Carrier
type RatingServiceUploadRatingArgs struct {
  ReqID int64 `thrift:"req_id,1" db:"req_id" json:"req_id"`
  MovieID string `thrift:"movie_id,2" db:"movie_id" json:"movie_id"`
  Rating int32 `thrift:"rating,3" db:"rating" json:"rating"`
  Carrier map[string]string `thrift:"carrier,4" db:"carrier" json:"carrier"`
}

func NewRatingServiceUploadRatingArgs() *RatingServiceUploadRatingArgs {
  return &RatingServiceUploadRatingArgs{}
}


func (p *RatingServiceUploadRatingArgs) GetReqID() int64 {
  return p.ReqID
}

func (p *RatingServiceUploadRatingArgs) GetMovieID() string {
  return p.MovieID
}

func (p *RatingServiceUploadRatingArgs) GetRating() int32 {
  return p.Rating
}

func (p *RatingServiceUploadRatingArgs) GetCarrier() map[string]string {
  return p.Carrier
}
func (p *RatingServiceUploadRatingArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RatingServiceUploadRatingArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqID = v
}
  return nil
}

func (p *RatingServiceUploadRatingArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.MovieID = v
}
  return nil
}

func (p *RatingServiceUploadRatingArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Rating = v
}
  return nil
}

func (p *RatingServiceUploadRatingArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Carrier =  tMap
  for i := 0; i < size; i ++ {
var _key86 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key86 = v
}
var _val87 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val87 = v
}
    p.Carrier[_key86] = _val87
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *RatingServiceUploadRatingArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "UploadRating_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RatingServiceUploadRatingArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ReqID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.req_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req_id: ", p), err) }
  return err
}

func (p *RatingServiceUploadRatingArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "movie_id", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:movie_id: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.MovieID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.movie_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:movie_id: ", p), err) }
  return err
}

func (p *RatingServiceUploadRatingArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "rating", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:rating: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Rating)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rating (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:rating: ", p), err) }
  return err
}

func (p *RatingServiceUploadRatingArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "carrier", thrift.MAP, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:carrier: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.Carrier)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Carrier {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:carrier: ", p), err) }
  return err
}

func (p *RatingServiceUploadRatingArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RatingServiceUploadRatingArgs(%+v)", *p)
}

// Attributes:
//  - Se
type RatingServiceUploadRatingResult struct {
  Se *ServiceException `thrift:"se,1" db:"se" json:"se,omitempty"`
}

func NewRatingServiceUploadRatingResult() *RatingServiceUploadRatingResult {
  return &RatingServiceUploadRatingResult{}
}

var RatingServiceUploadRatingResult_Se_DEFAULT *ServiceException
func (p *RatingServiceUploadRatingResult) GetSe() *ServiceException {
  if !p.IsSetSe() {
    return RatingServiceUploadRatingResult_Se_DEFAULT
  }
return p.Se
}
func (p *RatingServiceUploadRatingResult) IsSetSe() bool {
  return p.Se != nil
}

func (p *RatingServiceUploadRatingResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RatingServiceUploadRatingResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Se = &ServiceException{}
  if err := p.Se.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Se), err)
  }
  return nil
}

func (p *RatingServiceUploadRatingResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "UploadRating_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RatingServiceUploadRatingResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSe() {
    if err := oprot.WriteFieldBegin(ctx, "se", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:se: ", p), err) }
    if err := p.Se.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Se), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:se: ", p), err) }
  }
  return err
}

func (p *RatingServiceUploadRatingResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RatingServiceUploadRatingResult(%+v)", *p)
}


type UserService interface {
  // Parameters:
  //  - ReqID
  //  - FirstName
  //  - LastName
  //  - Username
  //  - Password
  //  - Carrier
  RegisterUser(ctx context.Context, req_id int64, first_name string, last_name string, username string, password string, carrier map[string]string) (_err error)
  // Parameters:
  //  - ReqID
  //  - FirstName
  //  - LastName
  //  - Username
  //  - Password
  //  - UserID
  //  - Carrier
  RegisterUserWithId(ctx context.Context, req_id int64, first_name string, last_name string, username string, password string, user_id int64, carrier map[string]string) (_err error)
  // Parameters:
  //  - ReqID
  //  - Username
  //  - Password
  //  - Carrier
  Login(ctx context.Context, req_id int64, username string, password string, carrier map[string]string) (_r string, _err error)
  // Parameters:
  //  - ReqID
  //  - UserID
  //  - Carrier
  UploadUserWithUserId(ctx context.Context, req_id int64, user_id int64, carrier map[string]string) (_err error)
  // Parameters:
  //  - ReqID
  //  - Username
  //  - Carrier
  UploadUserWithUsername(ctx context.Context, req_id int64, username string, carrier map[string]string) (_err error)
}

type UserServiceClient struct {
  c thrift.TClient
  meta thrift.ResponseMeta
}

func NewUserServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *UserServiceClient {
  return &UserServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewUserServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *UserServiceClient {
  return &UserServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewUserServiceClient(c thrift.TClient) *UserServiceClient {
  return &UserServiceClient{
    c: c,
  }
}

func (p *UserServiceClient) Client_() thrift.TClient {
  return p.c
}

func (p *UserServiceClient) LastResponseMeta_() thrift.ResponseMeta {
  return p.meta
}

func (p *UserServiceClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
  p.meta = meta
}

// Parameters:
//  - ReqID
//  - FirstName
//  - LastName
//  - Username
//  - Password
//  - Carrier
func (p *UserServiceClient) RegisterUser(ctx context.Context, req_id int64, first_name string, last_name string, username string, password string, carrier map[string]string) (_err error) {
  var _args97 UserServiceRegisterUserArgs
  _args97.ReqID = req_id
  _args97.FirstName = first_name
  _args97.LastName = last_name
  _args97.Username = username
  _args97.Password = password
  _args97.Carrier = carrier
  var _result99 UserServiceRegisterUserResult
  var _meta98 thrift.ResponseMeta
  _meta98, _err = p.Client_().Call(ctx, "RegisterUser", &_args97, &_result99)
  p.SetLastResponseMeta_(_meta98)
  if _err != nil {
    return
  }
  switch {
  case _result99.Se!= nil:
    return _result99.Se
  }

  return nil
}

// Parameters:
//  - ReqID
//  - FirstName
//  - LastName
//  - Username
//  - Password
//  - UserID
//  - Carrier
func (p *UserServiceClient) RegisterUserWithId(ctx context.Context, req_id int64, first_name string, last_name string, username string, password string, user_id int64, carrier map[string]string) (_err error) {
  var _args100 UserServiceRegisterUserWithIdArgs
  _args100.ReqID = req_id
  _args100.FirstName = first_name
  _args100.LastName = last_name
  _args100.Username = username
  _args100.Password = password
  _args100.UserID = user_id
  _args100.Carrier = carrier
  var _result102 UserServiceRegisterUserWithIdResult
  var _meta101 thrift.ResponseMeta
  _meta101, _err = p.Client_().Call(ctx, "RegisterUserWithId", &_args100, &_result102)
  p.SetLastResponseMeta_(_meta101)
  if _err != nil {
    return
  }
  switch {
  case _result102.Se!= nil:
    return _result102.Se
  }

  return nil
}

// Parameters:
//  - ReqID
//  - Username
//  - Password
//  - Carrier
func (p *UserServiceClient) Login(ctx context.Context, req_id int64, username string, password string, carrier map[string]string) (_r string, _err error) {
  var _args103 UserServiceLoginArgs
  _args103.ReqID = req_id
  _args103.Username = username
  _args103.Password = password
  _args103.Carrier = carrier
  var _result105 UserServiceLoginResult
  var _meta104 thrift.ResponseMeta
  _meta104, _err = p.Client_().Call(ctx, "Login", &_args103, &_result105)
  p.SetLastResponseMeta_(_meta104)
  if _err != nil {
    return
  }
  switch {
  case _result105.Se!= nil:
    return _r, _result105.Se
  }

  return _result105.GetSuccess(), nil
}

// Parameters:
//  - ReqID
//  - UserID
//  - Carrier
func (p *UserServiceClient) UploadUserWithUserId(ctx context.Context, req_id int64, user_id int64, carrier map[string]string) (_err error) {
  var _args106 UserServiceUploadUserWithUserIdArgs
  _args106.ReqID = req_id
  _args106.UserID = user_id
  _args106.Carrier = carrier
  var _result108 UserServiceUploadUserWithUserIdResult
  var _meta107 thrift.ResponseMeta
  _meta107, _err = p.Client_().Call(ctx, "UploadUserWithUserId", &_args106, &_result108)
  p.SetLastResponseMeta_(_meta107)
  if _err != nil {
    return
  }
  switch {
  case _result108.Se!= nil:
    return _result108.Se
  }

  return nil
}

// Parameters:
//  - ReqID
//  - Username
//  - Carrier
func (p *UserServiceClient) UploadUserWithUsername(ctx context.Context, req_id int64, username string, carrier map[string]string) (_err error) {
  var _args109 UserServiceUploadUserWithUsernameArgs
  _args109.ReqID = req_id
  _args109.Username = username
  _args109.Carrier = carrier
  var _result111 UserServiceUploadUserWithUsernameResult
  var _meta110 thrift.ResponseMeta
  _meta110, _err = p.Client_().Call(ctx, "UploadUserWithUsername", &_args109, &_result111)
  p.SetLastResponseMeta_(_meta110)
  if _err != nil {
    return
  }
  switch {
  case _result111.Se!= nil:
    return _result111.Se
  }

  return nil
}

type UserServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler UserService
}

func (p *UserServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *UserServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *UserServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewUserServiceProcessor(handler UserService) *UserServiceProcessor {

  self112 := &UserServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self112.processorMap["RegisterUser"] = &userServiceProcessorRegisterUser{handler:handler}
  self112.processorMap["RegisterUserWithId"] = &userServiceProcessorRegisterUserWithId{handler:handler}
  self112.processorMap["Login"] = &userServiceProcessorLogin{handler:handler}
  self112.processorMap["UploadUserWithUserId"] = &userServiceProcessorUploadUserWithUserId{handler:handler}
  self112.processorMap["UploadUserWithUsername"] = &userServiceProcessorUploadUserWithUsername{handler:handler}
return self112
}

func (p *UserServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
  if err2 != nil { return false, thrift.WrapTException(err2) }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(ctx, thrift.STRUCT)
  iprot.ReadMessageEnd(ctx)
  x113 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
  x113.Write(ctx, oprot)
  oprot.WriteMessageEnd(ctx)
  oprot.Flush(ctx)
  return false, x113

}

type userServiceProcessorRegisterUser struct {
  handler UserService
}

func (p *userServiceProcessorRegisterUser) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err114 error
  args := UserServiceRegisterUserArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "RegisterUser", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := UserServiceRegisterUserResult{}
  if err2 := p.handler.RegisterUser(ctx, args.ReqID, args.FirstName, args.LastName, args.Username, args.Password, args.Carrier); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    switch v := err2.(type) {
    case *ServiceException:
      result.Se = v
    default:
      if errors.Is(err2, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err2)
      }
      if errors.Is(err2, context.Canceled) {
        if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
          return false, thrift.WrapTException(err)
        }
      }
      _exc115 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing RegisterUser: " + err2.Error())
      if err2 := oprot.WriteMessageBegin(ctx, "RegisterUser", thrift.EXCEPTION, seqId); err2 != nil {
        _write_err114 = thrift.WrapTException(err2)
      }
      if err2 := _exc115.Write(ctx, oprot); _write_err114 == nil && err2 != nil {
        _write_err114 = thrift.WrapTException(err2)
      }
      if err2 := oprot.WriteMessageEnd(ctx); _write_err114 == nil && err2 != nil {
        _write_err114 = thrift.WrapTException(err2)
      }
      if err2 := oprot.Flush(ctx); _write_err114 == nil && err2 != nil {
        _write_err114 = thrift.WrapTException(err2)
      }
      if _write_err114 != nil {
        return false, thrift.WrapTException(_write_err114)
      }
      return true, err
    }
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "RegisterUser", thrift.REPLY, seqId); err2 != nil {
    _write_err114 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err114 == nil && err2 != nil {
    _write_err114 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err114 == nil && err2 != nil {
    _write_err114 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err114 == nil && err2 != nil {
    _write_err114 = thrift.WrapTException(err2)
  }
  if _write_err114 != nil {
    return false, thrift.WrapTException(_write_err114)
  }
  return true, err
}

type userServiceProcessorRegisterUserWithId struct {
  handler UserService
}

func (p *userServiceProcessorRegisterUserWithId) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err116 error
  args := UserServiceRegisterUserWithIdArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "RegisterUserWithId", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := UserServiceRegisterUserWithIdResult{}
  if err2 := p.handler.RegisterUserWithId(ctx, args.ReqID, args.FirstName, args.LastName, args.Username, args.Password, args.UserID, args.Carrier); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    switch v := err2.(type) {
    case *ServiceException:
      result.Se = v
    default:
      if errors.Is(err2, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err2)
      }
      if errors.Is(err2, context.Canceled) {
        if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
          return false, thrift.WrapTException(err)
        }
      }
      _exc117 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing RegisterUserWithId: " + err2.Error())
      if err2 := oprot.WriteMessageBegin(ctx, "RegisterUserWithId", thrift.EXCEPTION, seqId); err2 != nil {
        _write_err116 = thrift.WrapTException(err2)
      }
      if err2 := _exc117.Write(ctx, oprot); _write_err116 == nil && err2 != nil {
        _write_err116 = thrift.WrapTException(err2)
      }
      if err2 := oprot.WriteMessageEnd(ctx); _write_err116 == nil && err2 != nil {
        _write_err116 = thrift.WrapTException(err2)
      }
      if err2 := oprot.Flush(ctx); _write_err116 == nil && err2 != nil {
        _write_err116 = thrift.WrapTException(err2)
      }
      if _write_err116 != nil {
        return false, thrift.WrapTException(_write_err116)
      }
      return true, err
    }
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "RegisterUserWithId", thrift.REPLY, seqId); err2 != nil {
    _write_err116 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err116 == nil && err2 != nil {
    _write_err116 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err116 == nil && err2 != nil {
    _write_err116 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err116 == nil && err2 != nil {
    _write_err116 = thrift.WrapTException(err2)
  }
  if _write_err116 != nil {
    return false, thrift.WrapTException(_write_err116)
  }
  return true, err
}

type userServiceProcessorLogin struct {
  handler UserService
}

func (p *userServiceProcessorLogin) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err118 error
  args := UserServiceLoginArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "Login", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := UserServiceLoginResult{}
  if retval, err2 := p.handler.Login(ctx, args.ReqID, args.Username, args.Password, args.Carrier); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    switch v := err2.(type) {
    case *ServiceException:
      result.Se = v
    default:
      if errors.Is(err2, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err2)
      }
      if errors.Is(err2, context.Canceled) {
        if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
          return false, thrift.WrapTException(err)
        }
      }
      _exc119 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Login: " + err2.Error())
      if err2 := oprot.WriteMessageBegin(ctx, "Login", thrift.EXCEPTION, seqId); err2 != nil {
        _write_err118 = thrift.WrapTException(err2)
      }
      if err2 := _exc119.Write(ctx, oprot); _write_err118 == nil && err2 != nil {
        _write_err118 = thrift.WrapTException(err2)
      }
      if err2 := oprot.WriteMessageEnd(ctx); _write_err118 == nil && err2 != nil {
        _write_err118 = thrift.WrapTException(err2)
      }
      if err2 := oprot.Flush(ctx); _write_err118 == nil && err2 != nil {
        _write_err118 = thrift.WrapTException(err2)
      }
      if _write_err118 != nil {
        return false, thrift.WrapTException(_write_err118)
      }
      return true, err
    }
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "Login", thrift.REPLY, seqId); err2 != nil {
    _write_err118 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err118 == nil && err2 != nil {
    _write_err118 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err118 == nil && err2 != nil {
    _write_err118 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err118 == nil && err2 != nil {
    _write_err118 = thrift.WrapTException(err2)
  }
  if _write_err118 != nil {
    return false, thrift.WrapTException(_write_err118)
  }
  return true, err
}

type userServiceProcessorUploadUserWithUserId struct {
  handler UserService
}

func (p *userServiceProcessorUploadUserWithUserId) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err120 error
  args := UserServiceUploadUserWithUserIdArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "UploadUserWithUserId", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := UserServiceUploadUserWithUserIdResult{}
  if err2 := p.handler.UploadUserWithUserId(ctx, args.ReqID, args.UserID, args.Carrier); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    switch v := err2.(type) {
    case *ServiceException:
      result.Se = v
    default:
      if errors.Is(err2, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err2)
      }
      if errors.Is(err2, context.Canceled) {
        if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
          return false, thrift.WrapTException(err)
        }
      }
      _exc121 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UploadUserWithUserId: " + err2.Error())
      if err2 := oprot.WriteMessageBegin(ctx, "UploadUserWithUserId", thrift.EXCEPTION, seqId); err2 != nil {
        _write_err120 = thrift.WrapTException(err2)
      }
      if err2 := _exc121.Write(ctx, oprot); _write_err120 == nil && err2 != nil {
        _write_err120 = thrift.WrapTException(err2)
      }
      if err2 := oprot.WriteMessageEnd(ctx); _write_err120 == nil && err2 != nil {
        _write_err120 = thrift.WrapTException(err2)
      }
      if err2 := oprot.Flush(ctx); _write_err120 == nil && err2 != nil {
        _write_err120 = thrift.WrapTException(err2)
      }
      if _write_err120 != nil {
        return false, thrift.WrapTException(_write_err120)
      }
      return true, err
    }
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "UploadUserWithUserId", thrift.REPLY, seqId); err2 != nil {
    _write_err120 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err120 == nil && err2 != nil {
    _write_err120 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err120 == nil && err2 != nil {
    _write_err120 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err120 == nil && err2 != nil {
    _write_err120 = thrift.WrapTException(err2)
  }
  if _write_err120 != nil {
    return false, thrift.WrapTException(_write_err120)
  }
  return true, err
}

type userServiceProcessorUploadUserWithUsername struct {
  handler UserService
}

func (p *userServiceProcessorUploadUserWithUsername) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err122 error
  args := UserServiceUploadUserWithUsernameArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "UploadUserWithUsername", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := UserServiceUploadUserWithUsernameResult{}
  if err2 := p.handler.UploadUserWithUsername(ctx, args.ReqID, args.Username, args.Carrier); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    switch v := err2.(type) {
    case *ServiceException:
      result.Se = v
    default:
      if errors.Is(err2, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err2)
      }
      if errors.Is(err2, context.Canceled) {
        if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
          return false, thrift.WrapTException(err)
        }
      }
      _exc123 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UploadUserWithUsername: " + err2.Error())
      if err2 := oprot.WriteMessageBegin(ctx, "UploadUserWithUsername", thrift.EXCEPTION, seqId); err2 != nil {
        _write_err122 = thrift.WrapTException(err2)
      }
      if err2 := _exc123.Write(ctx, oprot); _write_err122 == nil && err2 != nil {
        _write_err122 = thrift.WrapTException(err2)
      }
      if err2 := oprot.WriteMessageEnd(ctx); _write_err122 == nil && err2 != nil {
        _write_err122 = thrift.WrapTException(err2)
      }
      if err2 := oprot.Flush(ctx); _write_err122 == nil && err2 != nil {
        _write_err122 = thrift.WrapTException(err2)
      }
      if _write_err122 != nil {
        return false, thrift.WrapTException(_write_err122)
      }
      return true, err
    }
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "UploadUserWithUsername", thrift.REPLY, seqId); err2 != nil {
    _write_err122 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err122 == nil && err2 != nil {
    _write_err122 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err122 == nil && err2 != nil {
    _write_err122 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err122 == nil && err2 != nil {
    _write_err122 = thrift.WrapTException(err2)
  }
  if _write_err122 != nil {
    return false, thrift.WrapTException(_write_err122)
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - ReqID
//  - FirstName
//  - LastName
//  - Username
//  - Password
//  - Carrier
type UserServiceRegisterUserArgs struct {
  ReqID int64 `thrift:"req_id,1" db:"req_id" json:"req_id"`
  FirstName string `thrift:"first_name,2" db:"first_name" json:"first_name"`
  LastName string `thrift:"last_name,3" db:"last_name" json:"last_name"`
  Username string `thrift:"username,4" db:"username" json:"username"`
  Password string `thrift:"password,5" db:"password" json:"password"`
  Carrier map[string]string `thrift:"carrier,6" db:"carrier" json:"carrier"`
}

func NewUserServiceRegisterUserArgs() *UserServiceRegisterUserArgs {
  return &UserServiceRegisterUserArgs{}
}


func (p *UserServiceRegisterUserArgs) GetReqID() int64 {
  return p.ReqID
}

func (p *UserServiceRegisterUserArgs) GetFirstName() string {
  return p.FirstName
}

func (p *UserServiceRegisterUserArgs) GetLastName() string {
  return p.LastName
}

func (p *UserServiceRegisterUserArgs) GetUsername() string {
  return p.Username
}

func (p *UserServiceRegisterUserArgs) GetPassword() string {
  return p.Password
}

func (p *UserServiceRegisterUserArgs) GetCarrier() map[string]string {
  return p.Carrier
}
func (p *UserServiceRegisterUserArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserServiceRegisterUserArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqID = v
}
  return nil
}

func (p *UserServiceRegisterUserArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.FirstName = v
}
  return nil
}

func (p *UserServiceRegisterUserArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.LastName = v
}
  return nil
}

func (p *UserServiceRegisterUserArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Username = v
}
  return nil
}

func (p *UserServiceRegisterUserArgs)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Password = v
}
  return nil
}

func (p *UserServiceRegisterUserArgs)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Carrier =  tMap
  for i := 0; i < size; i ++ {
var _key124 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key124 = v
}
var _val125 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val125 = v
}
    p.Carrier[_key124] = _val125
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *UserServiceRegisterUserArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "RegisterUser_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserServiceRegisterUserArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ReqID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.req_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req_id: ", p), err) }
  return err
}

func (p *UserServiceRegisterUserArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "first_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:first_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.FirstName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.first_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:first_name: ", p), err) }
  return err
}

func (p *UserServiceRegisterUserArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "last_name", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:last_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.LastName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.last_name (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:last_name: ", p), err) }
  return err
}

func (p *UserServiceRegisterUserArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "username", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:username: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Username)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.username (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:username: ", p), err) }
  return err
}

func (p *UserServiceRegisterUserArgs) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "password", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:password: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Password)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.password (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:password: ", p), err) }
  return err
}

func (p *UserServiceRegisterUserArgs) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "carrier", thrift.MAP, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:carrier: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.Carrier)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Carrier {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:carrier: ", p), err) }
  return err
}

func (p *UserServiceRegisterUserArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserServiceRegisterUserArgs(%+v)", *p)
}

// Attributes:
//  - Se
type UserServiceRegisterUserResult struct {
  Se *ServiceException `thrift:"se,1" db:"se" json:"se,omitempty"`
}

func NewUserServiceRegisterUserResult() *UserServiceRegisterUserResult {
  return &UserServiceRegisterUserResult{}
}

var UserServiceRegisterUserResult_Se_DEFAULT *ServiceException
func (p *UserServiceRegisterUserResult) GetSe() *ServiceException {
  if !p.IsSetSe() {
    return UserServiceRegisterUserResult_Se_DEFAULT
  }
return p.Se
}
func (p *UserServiceRegisterUserResult) IsSetSe() bool {
  return p.Se != nil
}

func (p *UserServiceRegisterUserResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserServiceRegisterUserResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Se = &ServiceException{}
  if err := p.Se.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Se), err)
  }
  return nil
}

func (p *UserServiceRegisterUserResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "RegisterUser_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserServiceRegisterUserResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSe() {
    if err := oprot.WriteFieldBegin(ctx, "se", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:se: ", p), err) }
    if err := p.Se.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Se), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:se: ", p), err) }
  }
  return err
}

func (p *UserServiceRegisterUserResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserServiceRegisterUserResult(%+v)", *p)
}

// Attributes:
//  - ReqID
//  - FirstName
//  - LastName
//  - Username
//  - Password
//  - UserID
//  - Carrier
type UserServiceRegisterUserWithIdArgs struct {
  ReqID int64 `thrift:"req_id,1" db:"req_id" json:"req_id"`
  FirstName string `thrift:"first_name,2" db:"first_name" json:"first_name"`
  LastName string `thrift:"last_name,3" db:"last_name" json:"last_name"`
  Username string `thrift:"username,4" db:"username" json:"username"`
  Password string `thrift:"password,5" db:"password" json:"password"`
  UserID int64 `thrift:"user_id,6" db:"user_id" json:"user_id"`
  Carrier map[string]string `thrift:"carrier,7" db:"carrier" json:"carrier"`
}

func NewUserServiceRegisterUserWithIdArgs() *UserServiceRegisterUserWithIdArgs {
  return &UserServiceRegisterUserWithIdArgs{}
}


func (p *UserServiceRegisterUserWithIdArgs) GetReqID() int64 {
  return p.ReqID
}

func (p *UserServiceRegisterUserWithIdArgs) GetFirstName() string {
  return p.FirstName
}

func (p *UserServiceRegisterUserWithIdArgs) GetLastName() string {
  return p.LastName
}

func (p *UserServiceRegisterUserWithIdArgs) GetUsername() string {
  return p.Username
}

func (p *UserServiceRegisterUserWithIdArgs) GetPassword() string {
  return p.Password
}

func (p *UserServiceRegisterUserWithIdArgs) GetUserID() int64 {
  return p.UserID
}

func (p *UserServiceRegisterUserWithIdArgs) GetCarrier() map[string]string {
  return p.Carrier
}
func (p *UserServiceRegisterUserWithIdArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserServiceRegisterUserWithIdArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqID = v
}
  return nil
}

func (p *UserServiceRegisterUserWithIdArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.FirstName = v
}
  return nil
}

func (p *UserServiceRegisterUserWithIdArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.LastName = v
}
  return nil
}

func (p *UserServiceRegisterUserWithIdArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Username = v
}
  return nil
}

func (p *UserServiceRegisterUserWithIdArgs)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Password = v
}
  return nil
}

func (p *UserServiceRegisterUserWithIdArgs)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.UserID = v
}
  return nil
}

func (p *UserServiceRegisterUserWithIdArgs)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Carrier =  tMap
  for i := 0; i < size; i ++ {
var _key126 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key126 = v
}
var _val127 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val127 = v
}
    p.Carrier[_key126] = _val127
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *UserServiceRegisterUserWithIdArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "RegisterUserWithId_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserServiceRegisterUserWithIdArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ReqID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.req_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req_id: ", p), err) }
  return err
}

func (p *UserServiceRegisterUserWithIdArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "first_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:first_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.FirstName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.first_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:first_name: ", p), err) }
  return err
}

func (p *UserServiceRegisterUserWithIdArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "last_name", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:last_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.LastName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.last_name (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:last_name: ", p), err) }
  return err
}

func (p *UserServiceRegisterUserWithIdArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "username", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:username: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Username)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.username (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:username: ", p), err) }
  return err
}

func (p *UserServiceRegisterUserWithIdArgs) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "password", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:password: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Password)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.password (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:password: ", p), err) }
  return err
}

func (p *UserServiceRegisterUserWithIdArgs) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "user_id", thrift.I64, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:user_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.UserID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_id (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:user_id: ", p), err) }
  return err
}

func (p *UserServiceRegisterUserWithIdArgs) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "carrier", thrift.MAP, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:carrier: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.Carrier)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Carrier {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:carrier: ", p), err) }
  return err
}

func (p *UserServiceRegisterUserWithIdArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserServiceRegisterUserWithIdArgs(%+v)", *p)
}

// Attributes:
//  - Se
type UserServiceRegisterUserWithIdResult struct {
  Se *ServiceException `thrift:"se,1" db:"se" json:"se,omitempty"`
}

func NewUserServiceRegisterUserWithIdResult() *UserServiceRegisterUserWithIdResult {
  return &UserServiceRegisterUserWithIdResult{}
}

var UserServiceRegisterUserWithIdResult_Se_DEFAULT *ServiceException
func (p *UserServiceRegisterUserWithIdResult) GetSe() *ServiceException {
  if !p.IsSetSe() {
    return UserServiceRegisterUserWithIdResult_Se_DEFAULT
  }
return p.Se
}
func (p *UserServiceRegisterUserWithIdResult) IsSetSe() bool {
  return p.Se != nil
}

func (p *UserServiceRegisterUserWithIdResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserServiceRegisterUserWithIdResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Se = &ServiceException{}
  if err := p.Se.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Se), err)
  }
  return nil
}

func (p *UserServiceRegisterUserWithIdResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "RegisterUserWithId_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserServiceRegisterUserWithIdResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSe() {
    if err := oprot.WriteFieldBegin(ctx, "se", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:se: ", p), err) }
    if err := p.Se.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Se), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:se: ", p), err) }
  }
  return err
}

func (p *UserServiceRegisterUserWithIdResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserServiceRegisterUserWithIdResult(%+v)", *p)
}

// Attributes:
//  - ReqID
//  - Username
//  - Password
//  - Carrier
type UserServiceLoginArgs struct {
  ReqID int64 `thrift:"req_id,1" db:"req_id" json:"req_id"`
  Username string `thrift:"username,2" db:"username" json:"username"`
  Password string `thrift:"password,3" db:"password" json:"password"`
  Carrier map[string]string `thrift:"carrier,4" db:"carrier" json:"carrier"`
}

func NewUserServiceLoginArgs() *UserServiceLoginArgs {
  return &UserServiceLoginArgs{}
}


func (p *UserServiceLoginArgs) GetReqID() int64 {
  return p.ReqID
}

func (p *UserServiceLoginArgs) GetUsername() string {
  return p.Username
}

func (p *UserServiceLoginArgs) GetPassword() string {
  return p.Password
}

func (p *UserServiceLoginArgs) GetCarrier() map[string]string {
  return p.Carrier
}
func (p *UserServiceLoginArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserServiceLoginArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqID = v
}
  return nil
}

func (p *UserServiceLoginArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Username = v
}
  return nil
}

func (p *UserServiceLoginArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Password = v
}
  return nil
}

func (p *UserServiceLoginArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Carrier =  tMap
  for i := 0; i < size; i ++ {
var _key128 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key128 = v
}
var _val129 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val129 = v
}
    p.Carrier[_key128] = _val129
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *UserServiceLoginArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Login_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserServiceLoginArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ReqID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.req_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req_id: ", p), err) }
  return err
}

func (p *UserServiceLoginArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "username", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:username: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Username)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.username (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:username: ", p), err) }
  return err
}

func (p *UserServiceLoginArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "password", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:password: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Password)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.password (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:password: ", p), err) }
  return err
}

func (p *UserServiceLoginArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "carrier", thrift.MAP, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:carrier: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.Carrier)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Carrier {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:carrier: ", p), err) }
  return err
}

func (p *UserServiceLoginArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserServiceLoginArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Se
type UserServiceLoginResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  Se *ServiceException `thrift:"se,1" db:"se" json:"se,omitempty"`
}

func NewUserServiceLoginResult() *UserServiceLoginResult {
  return &UserServiceLoginResult{}
}

var UserServiceLoginResult_Success_DEFAULT string
func (p *UserServiceLoginResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return UserServiceLoginResult_Success_DEFAULT
  }
return *p.Success
}
var UserServiceLoginResult_Se_DEFAULT *ServiceException
func (p *UserServiceLoginResult) GetSe() *ServiceException {
  if !p.IsSetSe() {
    return UserServiceLoginResult_Se_DEFAULT
  }
return p.Se
}
func (p *UserServiceLoginResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *UserServiceLoginResult) IsSetSe() bool {
  return p.Se != nil
}

func (p *UserServiceLoginResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserServiceLoginResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *UserServiceLoginResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Se = &ServiceException{}
  if err := p.Se.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Se), err)
  }
  return nil
}

func (p *UserServiceLoginResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Login_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserServiceLoginResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *UserServiceLoginResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSe() {
    if err := oprot.WriteFieldBegin(ctx, "se", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:se: ", p), err) }
    if err := p.Se.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Se), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:se: ", p), err) }
  }
  return err
}

func (p *UserServiceLoginResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserServiceLoginResult(%+v)", *p)
}

// Attributes:
//  - ReqID
//  - UserID
//  - Carrier
type UserServiceUploadUserWithUserIdArgs struct {
  ReqID int64 `thrift:"req_id,1" db:"req_id" json:"req_id"`
  UserID int64 `thrift:"user_id,2" db:"user_id" json:"user_id"`
  Carrier map[string]string `thrift:"carrier,3" db:"carrier" json:"carrier"`
}

func NewUserServiceUploadUserWithUserIdArgs() *UserServiceUploadUserWithUserIdArgs {
  return &UserServiceUploadUserWithUserIdArgs{}
}


func (p *UserServiceUploadUserWithUserIdArgs) GetReqID() int64 {
  return p.ReqID
}

func (p *UserServiceUploadUserWithUserIdArgs) GetUserID() int64 {
  return p.UserID
}

func (p *UserServiceUploadUserWithUserIdArgs) GetCarrier() map[string]string {
  return p.Carrier
}
func (p *UserServiceUploadUserWithUserIdArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserServiceUploadUserWithUserIdArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqID = v
}
  return nil
}

func (p *UserServiceUploadUserWithUserIdArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserID = v
}
  return nil
}

func (p *UserServiceUploadUserWithUserIdArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Carrier =  tMap
  for i := 0; i < size; i ++ {
var _key130 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key130 = v
}
var _val131 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val131 = v
}
    p.Carrier[_key130] = _val131
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *UserServiceUploadUserWithUserIdArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "UploadUserWithUserId_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserServiceUploadUserWithUserIdArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ReqID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.req_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req_id: ", p), err) }
  return err
}

func (p *UserServiceUploadUserWithUserIdArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "user_id", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:user_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.UserID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:user_id: ", p), err) }
  return err
}

func (p *UserServiceUploadUserWithUserIdArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "carrier", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:carrier: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.Carrier)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Carrier {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:carrier: ", p), err) }
  return err
}

func (p *UserServiceUploadUserWithUserIdArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserServiceUploadUserWithUserIdArgs(%+v)", *p)
}

// Attributes:
//  - Se
type UserServiceUploadUserWithUserIdResult struct {
  Se *ServiceException `thrift:"se,1" db:"se" json:"se,omitempty"`
}

func NewUserServiceUploadUserWithUserIdResult() *UserServiceUploadUserWithUserIdResult {
  return &UserServiceUploadUserWithUserIdResult{}
}

var UserServiceUploadUserWithUserIdResult_Se_DEFAULT *ServiceException
func (p *UserServiceUploadUserWithUserIdResult) GetSe() *ServiceException {
  if !p.IsSetSe() {
    return UserServiceUploadUserWithUserIdResult_Se_DEFAULT
  }
return p.Se
}
func (p *UserServiceUploadUserWithUserIdResult) IsSetSe() bool {
  return p.Se != nil
}

func (p *UserServiceUploadUserWithUserIdResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserServiceUploadUserWithUserIdResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Se = &ServiceException{}
  if err := p.Se.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Se), err)
  }
  return nil
}

func (p *UserServiceUploadUserWithUserIdResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "UploadUserWithUserId_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserServiceUploadUserWithUserIdResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSe() {
    if err := oprot.WriteFieldBegin(ctx, "se", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:se: ", p), err) }
    if err := p.Se.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Se), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:se: ", p), err) }
  }
  return err
}

func (p *UserServiceUploadUserWithUserIdResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserServiceUploadUserWithUserIdResult(%+v)", *p)
}

// Attributes:
//  - ReqID
//  - Username
//  - Carrier
type UserServiceUploadUserWithUsernameArgs struct {
  ReqID int64 `thrift:"req_id,1" db:"req_id" json:"req_id"`
  Username string `thrift:"username,2" db:"username" json:"username"`
  Carrier map[string]string `thrift:"carrier,3" db:"carrier" json:"carrier"`
}

func NewUserServiceUploadUserWithUsernameArgs() *UserServiceUploadUserWithUsernameArgs {
  return &UserServiceUploadUserWithUsernameArgs{}
}


func (p *UserServiceUploadUserWithUsernameArgs) GetReqID() int64 {
  return p.ReqID
}

func (p *UserServiceUploadUserWithUsernameArgs) GetUsername() string {
  return p.Username
}

func (p *UserServiceUploadUserWithUsernameArgs) GetCarrier() map[string]string {
  return p.Carrier
}
func (p *UserServiceUploadUserWithUsernameArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserServiceUploadUserWithUsernameArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqID = v
}
  return nil
}

func (p *UserServiceUploadUserWithUsernameArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Username = v
}
  return nil
}

func (p *UserServiceUploadUserWithUsernameArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Carrier =  tMap
  for i := 0; i < size; i ++ {
var _key132 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key132 = v
}
var _val133 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val133 = v
}
    p.Carrier[_key132] = _val133
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *UserServiceUploadUserWithUsernameArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "UploadUserWithUsername_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserServiceUploadUserWithUsernameArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ReqID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.req_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req_id: ", p), err) }
  return err
}

func (p *UserServiceUploadUserWithUsernameArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "username", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:username: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Username)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.username (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:username: ", p), err) }
  return err
}

func (p *UserServiceUploadUserWithUsernameArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "carrier", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:carrier: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.Carrier)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Carrier {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:carrier: ", p), err) }
  return err
}

func (p *UserServiceUploadUserWithUsernameArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserServiceUploadUserWithUsernameArgs(%+v)", *p)
}

// Attributes:
//  - Se
type UserServiceUploadUserWithUsernameResult struct {
  Se *ServiceException `thrift:"se,1" db:"se" json:"se,omitempty"`
}

func NewUserServiceUploadUserWithUsernameResult() *UserServiceUploadUserWithUsernameResult {
  return &UserServiceUploadUserWithUsernameResult{}
}

var UserServiceUploadUserWithUsernameResult_Se_DEFAULT *ServiceException
func (p *UserServiceUploadUserWithUsernameResult) GetSe() *ServiceException {
  if !p.IsSetSe() {
    return UserServiceUploadUserWithUsernameResult_Se_DEFAULT
  }
return p.Se
}
func (p *UserServiceUploadUserWithUsernameResult) IsSetSe() bool {
  return p.Se != nil
}

func (p *UserServiceUploadUserWithUsernameResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserServiceUploadUserWithUsernameResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Se = &ServiceException{}
  if err := p.Se.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Se), err)
  }
  return nil
}

func (p *UserServiceUploadUserWithUsernameResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "UploadUserWithUsername_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserServiceUploadUserWithUsernameResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSe() {
    if err := oprot.WriteFieldBegin(ctx, "se", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:se: ", p), err) }
    if err := p.Se.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Se), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:se: ", p), err) }
  }
  return err
}

func (p *UserServiceUploadUserWithUsernameResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserServiceUploadUserWithUsernameResult(%+v)", *p)
}


type ComposeReviewService interface {
  // Parameters:
  //  - ReqID
  //  - Text
  //  - Carrier
  UploadText(ctx context.Context, req_id int64, text string, carrier map[string]string) (_err error)
  // Parameters:
  //  - ReqID
  //  - Rating
  //  - Carrier
  UploadRating(ctx context.Context, req_id int64, rating int32, carrier map[string]string) (_err error)
  // Parameters:
  //  - ReqID
  //  - MovieID
  //  - Carrier
  UploadMovieId(ctx context.Context, req_id int64, movie_id string, carrier map[string]string) (_err error)
  // Parameters:
  //  - ReqID
  //  - UniqueID
  //  - Carrier
  UploadUniqueId(ctx context.Context, req_id int64, unique_id int64, carrier map[string]string) (_err error)
  // Parameters:
  //  - ReqID
  //  - UserID
  //  - Carrier
  UploadUserId(ctx context.Context, req_id int64, user_id int64, carrier map[string]string) (_err error)
}

type ComposeReviewServiceClient struct {
  c thrift.TClient
  meta thrift.ResponseMeta
}

func NewComposeReviewServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *ComposeReviewServiceClient {
  return &ComposeReviewServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewComposeReviewServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *ComposeReviewServiceClient {
  return &ComposeReviewServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewComposeReviewServiceClient(c thrift.TClient) *ComposeReviewServiceClient {
  return &ComposeReviewServiceClient{
    c: c,
  }
}

func (p *ComposeReviewServiceClient) Client_() thrift.TClient {
  return p.c
}

func (p *ComposeReviewServiceClient) LastResponseMeta_() thrift.ResponseMeta {
  return p.meta
}

func (p *ComposeReviewServiceClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
  p.meta = meta
}

// Parameters:
//  - ReqID
//  - Text
//  - Carrier
func (p *ComposeReviewServiceClient) UploadText(ctx context.Context, req_id int64, text string, carrier map[string]string) (_err error) {
  var _args182 ComposeReviewServiceUploadTextArgs
  _args182.ReqID = req_id
  _args182.Text = text
  _args182.Carrier = carrier
  var _result184 ComposeReviewServiceUploadTextResult
  var _meta183 thrift.ResponseMeta
  _meta183, _err = p.Client_().Call(ctx, "UploadText", &_args182, &_result184)
  p.SetLastResponseMeta_(_meta183)
  if _err != nil {
    return
  }
  switch {
  case _result184.Se!= nil:
    return _result184.Se
  }

  return nil
}

// Parameters:
//  - ReqID
//  - Rating
//  - Carrier
func (p *ComposeReviewServiceClient) UploadRating(ctx context.Context, req_id int64, rating int32, carrier map[string]string) (_err error) {
  var _args185 ComposeReviewServiceUploadRatingArgs
  _args185.ReqID = req_id
  _args185.Rating = rating
  _args185.Carrier = carrier
  var _result187 ComposeReviewServiceUploadRatingResult
  var _meta186 thrift.ResponseMeta
  _meta186, _err = p.Client_().Call(ctx, "UploadRating", &_args185, &_result187)
  p.SetLastResponseMeta_(_meta186)
  if _err != nil {
    return
  }
  switch {
  case _result187.Se!= nil:
    return _result187.Se
  }

  return nil
}

// Parameters:
//  - ReqID
//  - MovieID
//  - Carrier
func (p *ComposeReviewServiceClient) UploadMovieId(ctx context.Context, req_id int64, movie_id string, carrier map[string]string) (_err error) {
  var _args188 ComposeReviewServiceUploadMovieIdArgs
  _args188.ReqID = req_id
  _args188.MovieID = movie_id
  _args188.Carrier = carrier
  var _result190 ComposeReviewServiceUploadMovieIdResult
  var _meta189 thrift.ResponseMeta
  _meta189, _err = p.Client_().Call(ctx, "UploadMovieId", &_args188, &_result190)
  p.SetLastResponseMeta_(_meta189)
  if _err != nil {
    return
  }
  switch {
  case _result190.Se!= nil:
    return _result190.Se
  }

  return nil
}

// Parameters:
//  - ReqID
//  - UniqueID
//  - Carrier
func (p *ComposeReviewServiceClient) UploadUniqueId(ctx context.Context, req_id int64, unique_id int64, carrier map[string]string) (_err error) {
  var _args191 ComposeReviewServiceUploadUniqueIdArgs
  _args191.ReqID = req_id
  _args191.UniqueID = unique_id
  _args191.Carrier = carrier
  var _result193 ComposeReviewServiceUploadUniqueIdResult
  var _meta192 thrift.ResponseMeta
  _meta192, _err = p.Client_().Call(ctx, "UploadUniqueId", &_args191, &_result193)
  p.SetLastResponseMeta_(_meta192)
  if _err != nil {
    return
  }
  switch {
  case _result193.Se!= nil:
    return _result193.Se
  }

  return nil
}

// Parameters:
//  - ReqID
//  - UserID
//  - Carrier
func (p *ComposeReviewServiceClient) UploadUserId(ctx context.Context, req_id int64, user_id int64, carrier map[string]string) (_err error) {
  var _args194 ComposeReviewServiceUploadUserIdArgs
  _args194.ReqID = req_id
  _args194.UserID = user_id
  _args194.Carrier = carrier
  var _result196 ComposeReviewServiceUploadUserIdResult
  var _meta195 thrift.ResponseMeta
  _meta195, _err = p.Client_().Call(ctx, "UploadUserId", &_args194, &_result196)
  p.SetLastResponseMeta_(_meta195)
  if _err != nil {
    return
  }
  switch {
  case _result196.Se!= nil:
    return _result196.Se
  }

  return nil
}

type ComposeReviewServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler ComposeReviewService
}

func (p *ComposeReviewServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *ComposeReviewServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *ComposeReviewServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewComposeReviewServiceProcessor(handler ComposeReviewService) *ComposeReviewServiceProcessor {

  self197 := &ComposeReviewServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self197.processorMap["UploadText"] = &composeReviewServiceProcessorUploadText{handler:handler}
  self197.processorMap["UploadRating"] = &composeReviewServiceProcessorUploadRating{handler:handler}
  self197.processorMap["UploadMovieId"] = &composeReviewServiceProcessorUploadMovieId{handler:handler}
  self197.processorMap["UploadUniqueId"] = &composeReviewServiceProcessorUploadUniqueId{handler:handler}
  self197.processorMap["UploadUserId"] = &composeReviewServiceProcessorUploadUserId{handler:handler}
return self197
}

func (p *ComposeReviewServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
  if err2 != nil { return false, thrift.WrapTException(err2) }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(ctx, thrift.STRUCT)
  iprot.ReadMessageEnd(ctx)
  x198 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
  x198.Write(ctx, oprot)
  oprot.WriteMessageEnd(ctx)
  oprot.Flush(ctx)
  return false, x198

}

type composeReviewServiceProcessorUploadText struct {
  handler ComposeReviewService
}

func (p *composeReviewServiceProcessorUploadText) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err199 error
  args := ComposeReviewServiceUploadTextArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "UploadText", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ComposeReviewServiceUploadTextResult{}
  if err2 := p.handler.UploadText(ctx, args.ReqID, args.Text, args.Carrier); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    switch v := err2.(type) {
    case *ServiceException:
      result.Se = v
    default:
      if errors.Is(err2, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err2)
      }
      if errors.Is(err2, context.Canceled) {
        if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
          return false, thrift.WrapTException(err)
        }
      }
      _exc200 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UploadText: " + err2.Error())
      if err2 := oprot.WriteMessageBegin(ctx, "UploadText", thrift.EXCEPTION, seqId); err2 != nil {
        _write_err199 = thrift.WrapTException(err2)
      }
      if err2 := _exc200.Write(ctx, oprot); _write_err199 == nil && err2 != nil {
        _write_err199 = thrift.WrapTException(err2)
      }
      if err2 := oprot.WriteMessageEnd(ctx); _write_err199 == nil && err2 != nil {
        _write_err199 = thrift.WrapTException(err2)
      }
      if err2 := oprot.Flush(ctx); _write_err199 == nil && err2 != nil {
        _write_err199 = thrift.WrapTException(err2)
      }
      if _write_err199 != nil {
        return false, thrift.WrapTException(_write_err199)
      }
      return true, err
    }
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "UploadText", thrift.REPLY, seqId); err2 != nil {
    _write_err199 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err199 == nil && err2 != nil {
    _write_err199 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err199 == nil && err2 != nil {
    _write_err199 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err199 == nil && err2 != nil {
    _write_err199 = thrift.WrapTException(err2)
  }
  if _write_err199 != nil {
    return false, thrift.WrapTException(_write_err199)
  }
  return true, err
}

type composeReviewServiceProcessorUploadRating struct {
  handler ComposeReviewService
}

func (p *composeReviewServiceProcessorUploadRating) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err201 error
  args := ComposeReviewServiceUploadRatingArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "UploadRating", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ComposeReviewServiceUploadRatingResult{}
  if err2 := p.handler.UploadRating(ctx, args.ReqID, args.Rating, args.Carrier); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    switch v := err2.(type) {
    case *ServiceException:
      result.Se = v
    default:
      if errors.Is(err2, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err2)
      }
      if errors.Is(err2, context.Canceled) {
        if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
          return false, thrift.WrapTException(err)
        }
      }
      _exc202 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UploadRating: " + err2.Error())
      if err2 := oprot.WriteMessageBegin(ctx, "UploadRating", thrift.EXCEPTION, seqId); err2 != nil {
        _write_err201 = thrift.WrapTException(err2)
      }
      if err2 := _exc202.Write(ctx, oprot); _write_err201 == nil && err2 != nil {
        _write_err201 = thrift.WrapTException(err2)
      }
      if err2 := oprot.WriteMessageEnd(ctx); _write_err201 == nil && err2 != nil {
        _write_err201 = thrift.WrapTException(err2)
      }
      if err2 := oprot.Flush(ctx); _write_err201 == nil && err2 != nil {
        _write_err201 = thrift.WrapTException(err2)
      }
      if _write_err201 != nil {
        return false, thrift.WrapTException(_write_err201)
      }
      return true, err
    }
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "UploadRating", thrift.REPLY, seqId); err2 != nil {
    _write_err201 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err201 == nil && err2 != nil {
    _write_err201 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err201 == nil && err2 != nil {
    _write_err201 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err201 == nil && err2 != nil {
    _write_err201 = thrift.WrapTException(err2)
  }
  if _write_err201 != nil {
    return false, thrift.WrapTException(_write_err201)
  }
  return true, err
}

type composeReviewServiceProcessorUploadMovieId struct {
  handler ComposeReviewService
}

func (p *composeReviewServiceProcessorUploadMovieId) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err203 error
  args := ComposeReviewServiceUploadMovieIdArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "UploadMovieId", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ComposeReviewServiceUploadMovieIdResult{}
  if err2 := p.handler.UploadMovieId(ctx, args.ReqID, args.MovieID, args.Carrier); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    switch v := err2.(type) {
    case *ServiceException:
      result.Se = v
    default:
      if errors.Is(err2, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err2)
      }
      if errors.Is(err2, context.Canceled) {
        if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
          return false, thrift.WrapTException(err)
        }
      }
      _exc204 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UploadMovieId: " + err2.Error())
      if err2 := oprot.WriteMessageBegin(ctx, "UploadMovieId", thrift.EXCEPTION, seqId); err2 != nil {
        _write_err203 = thrift.WrapTException(err2)
      }
      if err2 := _exc204.Write(ctx, oprot); _write_err203 == nil && err2 != nil {
        _write_err203 = thrift.WrapTException(err2)
      }
      if err2 := oprot.WriteMessageEnd(ctx); _write_err203 == nil && err2 != nil {
        _write_err203 = thrift.WrapTException(err2)
      }
      if err2 := oprot.Flush(ctx); _write_err203 == nil && err2 != nil {
        _write_err203 = thrift.WrapTException(err2)
      }
      if _write_err203 != nil {
        return false, thrift.WrapTException(_write_err203)
      }
      return true, err
    }
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "UploadMovieId", thrift.REPLY, seqId); err2 != nil {
    _write_err203 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err203 == nil && err2 != nil {
    _write_err203 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err203 == nil && err2 != nil {
    _write_err203 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err203 == nil && err2 != nil {
    _write_err203 = thrift.WrapTException(err2)
  }
  if _write_err203 != nil {
    return false, thrift.WrapTException(_write_err203)
  }
  return true, err
}

type composeReviewServiceProcessorUploadUniqueId struct {
  handler ComposeReviewService
}

func (p *composeReviewServiceProcessorUploadUniqueId) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err205 error
  args := ComposeReviewServiceUploadUniqueIdArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "UploadUniqueId", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ComposeReviewServiceUploadUniqueIdResult{}
  if err2 := p.handler.UploadUniqueId(ctx, args.ReqID, args.UniqueID, args.Carrier); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    switch v := err2.(type) {
    case *ServiceException:
      result.Se = v
    default:
      if errors.Is(err2, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err2)
      }
      if errors.Is(err2, context.Canceled) {
        if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
          return false, thrift.WrapTException(err)
        }
      }
      _exc206 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UploadUniqueId: " + err2.Error())
      if err2 := oprot.WriteMessageBegin(ctx, "UploadUniqueId", thrift.EXCEPTION, seqId); err2 != nil {
        _write_err205 = thrift.WrapTException(err2)
      }
      if err2 := _exc206.Write(ctx, oprot); _write_err205 == nil && err2 != nil {
        _write_err205 = thrift.WrapTException(err2)
      }
      if err2 := oprot.WriteMessageEnd(ctx); _write_err205 == nil && err2 != nil {
        _write_err205 = thrift.WrapTException(err2)
      }
      if err2 := oprot.Flush(ctx); _write_err205 == nil && err2 != nil {
        _write_err205 = thrift.WrapTException(err2)
      }
      if _write_err205 != nil {
        return false, thrift.WrapTException(_write_err205)
      }
      return true, err
    }
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "UploadUniqueId", thrift.REPLY, seqId); err2 != nil {
    _write_err205 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err205 == nil && err2 != nil {
    _write_err205 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err205 == nil && err2 != nil {
    _write_err205 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err205 == nil && err2 != nil {
    _write_err205 = thrift.WrapTException(err2)
  }
  if _write_err205 != nil {
    return false, thrift.WrapTException(_write_err205)
  }
  return true, err
}

type composeReviewServiceProcessorUploadUserId struct {
  handler ComposeReviewService
}

func (p *composeReviewServiceProcessorUploadUserId) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err207 error
  args := ComposeReviewServiceUploadUserIdArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "UploadUserId", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ComposeReviewServiceUploadUserIdResult{}
  if err2 := p.handler.UploadUserId(ctx, args.ReqID, args.UserID, args.Carrier); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    switch v := err2.(type) {
    case *ServiceException:
      result.Se = v
    default:
      if errors.Is(err2, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err2)
      }
      if errors.Is(err2, context.Canceled) {
        if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
          return false, thrift.WrapTException(err)
        }
      }
      _exc208 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UploadUserId: " + err2.Error())
      if err2 := oprot.WriteMessageBegin(ctx, "UploadUserId", thrift.EXCEPTION, seqId); err2 != nil {
        _write_err207 = thrift.WrapTException(err2)
      }
      if err2 := _exc208.Write(ctx, oprot); _write_err207 == nil && err2 != nil {
        _write_err207 = thrift.WrapTException(err2)
      }
      if err2 := oprot.WriteMessageEnd(ctx); _write_err207 == nil && err2 != nil {
        _write_err207 = thrift.WrapTException(err2)
      }
      if err2 := oprot.Flush(ctx); _write_err207 == nil && err2 != nil {
        _write_err207 = thrift.WrapTException(err2)
      }
      if _write_err207 != nil {
        return false, thrift.WrapTException(_write_err207)
      }
      return true, err
    }
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "UploadUserId", thrift.REPLY, seqId); err2 != nil {
    _write_err207 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err207 == nil && err2 != nil {
    _write_err207 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err207 == nil && err2 != nil {
    _write_err207 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err207 == nil && err2 != nil {
    _write_err207 = thrift.WrapTException(err2)
  }
  if _write_err207 != nil {
    return false, thrift.WrapTException(_write_err207)
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - ReqID
//  - Text
//  - Carrier
type ComposeReviewServiceUploadTextArgs struct {
  ReqID int64 `thrift:"req_id,1" db:"req_id" json:"req_id"`
  Text string `thrift:"text,2" db:"text" json:"text"`
  Carrier map[string]string `thrift:"carrier,3" db:"carrier" json:"carrier"`
}

func NewComposeReviewServiceUploadTextArgs() *ComposeReviewServiceUploadTextArgs {
  return &ComposeReviewServiceUploadTextArgs{}
}


func (p *ComposeReviewServiceUploadTextArgs) GetReqID() int64 {
  return p.ReqID
}

func (p *ComposeReviewServiceUploadTextArgs) GetText() string {
  return p.Text
}

func (p *ComposeReviewServiceUploadTextArgs) GetCarrier() map[string]string {
  return p.Carrier
}
func (p *ComposeReviewServiceUploadTextArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ComposeReviewServiceUploadTextArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqID = v
}
  return nil
}

func (p *ComposeReviewServiceUploadTextArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Text = v
}
  return nil
}

func (p *ComposeReviewServiceUploadTextArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Carrier =  tMap
  for i := 0; i < size; i ++ {
var _key209 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key209 = v
}
var _val210 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val210 = v
}
    p.Carrier[_key209] = _val210
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *ComposeReviewServiceUploadTextArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "UploadText_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ComposeReviewServiceUploadTextArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ReqID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.req_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req_id: ", p), err) }
  return err
}

func (p *ComposeReviewServiceUploadTextArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "text", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:text: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Text)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.text (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:text: ", p), err) }
  return err
}

func (p *ComposeReviewServiceUploadTextArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "carrier", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:carrier: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.Carrier)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Carrier {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:carrier: ", p), err) }
  return err
}

func (p *ComposeReviewServiceUploadTextArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ComposeReviewServiceUploadTextArgs(%+v)", *p)
}

// Attributes:
//  - Se
type ComposeReviewServiceUploadTextResult struct {
  Se *ServiceException `thrift:"se,1" db:"se" json:"se,omitempty"`
}

func NewComposeReviewServiceUploadTextResult() *ComposeReviewServiceUploadTextResult {
  return &ComposeReviewServiceUploadTextResult{}
}

var ComposeReviewServiceUploadTextResult_Se_DEFAULT *ServiceException
func (p *ComposeReviewServiceUploadTextResult) GetSe() *ServiceException {
  if !p.IsSetSe() {
    return ComposeReviewServiceUploadTextResult_Se_DEFAULT
  }
return p.Se
}
func (p *ComposeReviewServiceUploadTextResult) IsSetSe() bool {
  return p.Se != nil
}

func (p *ComposeReviewServiceUploadTextResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ComposeReviewServiceUploadTextResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Se = &ServiceException{}
  if err := p.Se.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Se), err)
  }
  return nil
}

func (p *ComposeReviewServiceUploadTextResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "UploadText_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ComposeReviewServiceUploadTextResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSe() {
    if err := oprot.WriteFieldBegin(ctx, "se", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:se: ", p), err) }
    if err := p.Se.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Se), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:se: ", p), err) }
  }
  return err
}

func (p *ComposeReviewServiceUploadTextResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ComposeReviewServiceUploadTextResult(%+v)", *p)
}

// Attributes:
//  - ReqID
//  - Rating
//  - Carrier
type ComposeReviewServiceUploadRatingArgs struct {
  ReqID int64 `thrift:"req_id,1" db:"req_id" json:"req_id"`
  Rating int32 `thrift:"rating,2" db:"rating" json:"rating"`
  Carrier map[string]string `thrift:"carrier,3" db:"carrier" json:"carrier"`
}

func NewComposeReviewServiceUploadRatingArgs() *ComposeReviewServiceUploadRatingArgs {
  return &ComposeReviewServiceUploadRatingArgs{}
}


func (p *ComposeReviewServiceUploadRatingArgs) GetReqID() int64 {
  return p.ReqID
}

func (p *ComposeReviewServiceUploadRatingArgs) GetRating() int32 {
  return p.Rating
}

func (p *ComposeReviewServiceUploadRatingArgs) GetCarrier() map[string]string {
  return p.Carrier
}
func (p *ComposeReviewServiceUploadRatingArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ComposeReviewServiceUploadRatingArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqID = v
}
  return nil
}

func (p *ComposeReviewServiceUploadRatingArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Rating = v
}
  return nil
}

func (p *ComposeReviewServiceUploadRatingArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Carrier =  tMap
  for i := 0; i < size; i ++ {
var _key211 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key211 = v
}
var _val212 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val212 = v
}
    p.Carrier[_key211] = _val212
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *ComposeReviewServiceUploadRatingArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "UploadRating_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ComposeReviewServiceUploadRatingArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ReqID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.req_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req_id: ", p), err) }
  return err
}

func (p *ComposeReviewServiceUploadRatingArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "rating", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:rating: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Rating)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rating (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:rating: ", p), err) }
  return err
}

func (p *ComposeReviewServiceUploadRatingArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "carrier", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:carrier: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.Carrier)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Carrier {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:carrier: ", p), err) }
  return err
}

func (p *ComposeReviewServiceUploadRatingArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ComposeReviewServiceUploadRatingArgs(%+v)", *p)
}

// Attributes:
//  - Se
type ComposeReviewServiceUploadRatingResult struct {
  Se *ServiceException `thrift:"se,1" db:"se" json:"se,omitempty"`
}

func NewComposeReviewServiceUploadRatingResult() *ComposeReviewServiceUploadRatingResult {
  return &ComposeReviewServiceUploadRatingResult{}
}

var ComposeReviewServiceUploadRatingResult_Se_DEFAULT *ServiceException
func (p *ComposeReviewServiceUploadRatingResult) GetSe() *ServiceException {
  if !p.IsSetSe() {
    return ComposeReviewServiceUploadRatingResult_Se_DEFAULT
  }
return p.Se
}
func (p *ComposeReviewServiceUploadRatingResult) IsSetSe() bool {
  return p.Se != nil
}

func (p *ComposeReviewServiceUploadRatingResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ComposeReviewServiceUploadRatingResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Se = &ServiceException{}
  if err := p.Se.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Se), err)
  }
  return nil
}

func (p *ComposeReviewServiceUploadRatingResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "UploadRating_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ComposeReviewServiceUploadRatingResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSe() {
    if err := oprot.WriteFieldBegin(ctx, "se", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:se: ", p), err) }
    if err := p.Se.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Se), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:se: ", p), err) }
  }
  return err
}

func (p *ComposeReviewServiceUploadRatingResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ComposeReviewServiceUploadRatingResult(%+v)", *p)
}

// Attributes:
//  - ReqID
//  - MovieID
//  - Carrier
type ComposeReviewServiceUploadMovieIdArgs struct {
  ReqID int64 `thrift:"req_id,1" db:"req_id" json:"req_id"`
  MovieID string `thrift:"movie_id,2" db:"movie_id" json:"movie_id"`
  Carrier map[string]string `thrift:"carrier,3" db:"carrier" json:"carrier"`
}

func NewComposeReviewServiceUploadMovieIdArgs() *ComposeReviewServiceUploadMovieIdArgs {
  return &ComposeReviewServiceUploadMovieIdArgs{}
}


func (p *ComposeReviewServiceUploadMovieIdArgs) GetReqID() int64 {
  return p.ReqID
}

func (p *ComposeReviewServiceUploadMovieIdArgs) GetMovieID() string {
  return p.MovieID
}

func (p *ComposeReviewServiceUploadMovieIdArgs) GetCarrier() map[string]string {
  return p.Carrier
}
func (p *ComposeReviewServiceUploadMovieIdArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ComposeReviewServiceUploadMovieIdArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqID = v
}
  return nil
}

func (p *ComposeReviewServiceUploadMovieIdArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.MovieID = v
}
  return nil
}

func (p *ComposeReviewServiceUploadMovieIdArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Carrier =  tMap
  for i := 0; i < size; i ++ {
var _key213 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key213 = v
}
var _val214 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val214 = v
}
    p.Carrier[_key213] = _val214
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *ComposeReviewServiceUploadMovieIdArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "UploadMovieId_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ComposeReviewServiceUploadMovieIdArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ReqID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.req_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req_id: ", p), err) }
  return err
}

func (p *ComposeReviewServiceUploadMovieIdArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "movie_id", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:movie_id: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.MovieID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.movie_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:movie_id: ", p), err) }
  return err
}

func (p *ComposeReviewServiceUploadMovieIdArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "carrier", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:carrier: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.Carrier)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Carrier {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:carrier: ", p), err) }
  return err
}

func (p *ComposeReviewServiceUploadMovieIdArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ComposeReviewServiceUploadMovieIdArgs(%+v)", *p)
}

// Attributes:
//  - Se
type ComposeReviewServiceUploadMovieIdResult struct {
  Se *ServiceException `thrift:"se,1" db:"se" json:"se,omitempty"`
}

func NewComposeReviewServiceUploadMovieIdResult() *ComposeReviewServiceUploadMovieIdResult {
  return &ComposeReviewServiceUploadMovieIdResult{}
}

var ComposeReviewServiceUploadMovieIdResult_Se_DEFAULT *ServiceException
func (p *ComposeReviewServiceUploadMovieIdResult) GetSe() *ServiceException {
  if !p.IsSetSe() {
    return ComposeReviewServiceUploadMovieIdResult_Se_DEFAULT
  }
return p.Se
}
func (p *ComposeReviewServiceUploadMovieIdResult) IsSetSe() bool {
  return p.Se != nil
}

func (p *ComposeReviewServiceUploadMovieIdResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ComposeReviewServiceUploadMovieIdResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Se = &ServiceException{}
  if err := p.Se.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Se), err)
  }
  return nil
}

func (p *ComposeReviewServiceUploadMovieIdResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "UploadMovieId_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ComposeReviewServiceUploadMovieIdResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSe() {
    if err := oprot.WriteFieldBegin(ctx, "se", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:se: ", p), err) }
    if err := p.Se.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Se), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:se: ", p), err) }
  }
  return err
}

func (p *ComposeReviewServiceUploadMovieIdResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ComposeReviewServiceUploadMovieIdResult(%+v)", *p)
}

// Attributes:
//  - ReqID
//  - UniqueID
//  - Carrier
type ComposeReviewServiceUploadUniqueIdArgs struct {
  ReqID int64 `thrift:"req_id,1" db:"req_id" json:"req_id"`
  UniqueID int64 `thrift:"unique_id,2" db:"unique_id" json:"unique_id"`
  Carrier map[string]string `thrift:"carrier,3" db:"carrier" json:"carrier"`
}

func NewComposeReviewServiceUploadUniqueIdArgs() *ComposeReviewServiceUploadUniqueIdArgs {
  return &ComposeReviewServiceUploadUniqueIdArgs{}
}


func (p *ComposeReviewServiceUploadUniqueIdArgs) GetReqID() int64 {
  return p.ReqID
}

func (p *ComposeReviewServiceUploadUniqueIdArgs) GetUniqueID() int64 {
  return p.UniqueID
}

func (p *ComposeReviewServiceUploadUniqueIdArgs) GetCarrier() map[string]string {
  return p.Carrier
}
func (p *ComposeReviewServiceUploadUniqueIdArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ComposeReviewServiceUploadUniqueIdArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqID = v
}
  return nil
}

func (p *ComposeReviewServiceUploadUniqueIdArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UniqueID = v
}
  return nil
}

func (p *ComposeReviewServiceUploadUniqueIdArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Carrier =  tMap
  for i := 0; i < size; i ++ {
var _key215 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key215 = v
}
var _val216 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val216 = v
}
    p.Carrier[_key215] = _val216
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *ComposeReviewServiceUploadUniqueIdArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "UploadUniqueId_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ComposeReviewServiceUploadUniqueIdArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ReqID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.req_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req_id: ", p), err) }
  return err
}

func (p *ComposeReviewServiceUploadUniqueIdArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "unique_id", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:unique_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.UniqueID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.unique_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:unique_id: ", p), err) }
  return err
}

func (p *ComposeReviewServiceUploadUniqueIdArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "carrier", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:carrier: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.Carrier)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Carrier {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:carrier: ", p), err) }
  return err
}

func (p *ComposeReviewServiceUploadUniqueIdArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ComposeReviewServiceUploadUniqueIdArgs(%+v)", *p)
}

// Attributes:
//  - Se
type ComposeReviewServiceUploadUniqueIdResult struct {
  Se *ServiceException `thrift:"se,1" db:"se" json:"se,omitempty"`
}

func NewComposeReviewServiceUploadUniqueIdResult() *ComposeReviewServiceUploadUniqueIdResult {
  return &ComposeReviewServiceUploadUniqueIdResult{}
}

var ComposeReviewServiceUploadUniqueIdResult_Se_DEFAULT *ServiceException
func (p *ComposeReviewServiceUploadUniqueIdResult) GetSe() *ServiceException {
  if !p.IsSetSe() {
    return ComposeReviewServiceUploadUniqueIdResult_Se_DEFAULT
  }
return p.Se
}
func (p *ComposeReviewServiceUploadUniqueIdResult) IsSetSe() bool {
  return p.Se != nil
}

func (p *ComposeReviewServiceUploadUniqueIdResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ComposeReviewServiceUploadUniqueIdResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Se = &ServiceException{}
  if err := p.Se.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Se), err)
  }
  return nil
}

func (p *ComposeReviewServiceUploadUniqueIdResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "UploadUniqueId_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ComposeReviewServiceUploadUniqueIdResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSe() {
    if err := oprot.WriteFieldBegin(ctx, "se", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:se: ", p), err) }
    if err := p.Se.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Se), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:se: ", p), err) }
  }
  return err
}

func (p *ComposeReviewServiceUploadUniqueIdResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ComposeReviewServiceUploadUniqueIdResult(%+v)", *p)
}

// Attributes:
//  - ReqID
//  - UserID
//  - Carrier
type ComposeReviewServiceUploadUserIdArgs struct {
  ReqID int64 `thrift:"req_id,1" db:"req_id" json:"req_id"`
  UserID int64 `thrift:"user_id,2" db:"user_id" json:"user_id"`
  // unused field # 3
  Carrier map[string]string `thrift:"carrier,4" db:"carrier" json:"carrier"`
}

func NewComposeReviewServiceUploadUserIdArgs() *ComposeReviewServiceUploadUserIdArgs {
  return &ComposeReviewServiceUploadUserIdArgs{}
}


func (p *ComposeReviewServiceUploadUserIdArgs) GetReqID() int64 {
  return p.ReqID
}

func (p *ComposeReviewServiceUploadUserIdArgs) GetUserID() int64 {
  return p.UserID
}

func (p *ComposeReviewServiceUploadUserIdArgs) GetCarrier() map[string]string {
  return p.Carrier
}
func (p *ComposeReviewServiceUploadUserIdArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ComposeReviewServiceUploadUserIdArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqID = v
}
  return nil
}

func (p *ComposeReviewServiceUploadUserIdArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserID = v
}
  return nil
}

func (p *ComposeReviewServiceUploadUserIdArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Carrier =  tMap
  for i := 0; i < size; i ++ {
var _key217 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key217 = v
}
var _val218 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val218 = v
}
    p.Carrier[_key217] = _val218
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *ComposeReviewServiceUploadUserIdArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "UploadUserId_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ComposeReviewServiceUploadUserIdArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ReqID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.req_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req_id: ", p), err) }
  return err
}

func (p *ComposeReviewServiceUploadUserIdArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "user_id", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:user_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.UserID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:user_id: ", p), err) }
  return err
}

func (p *ComposeReviewServiceUploadUserIdArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "carrier", thrift.MAP, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:carrier: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.Carrier)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Carrier {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:carrier: ", p), err) }
  return err
}

func (p *ComposeReviewServiceUploadUserIdArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ComposeReviewServiceUploadUserIdArgs(%+v)", *p)
}

// Attributes:
//  - Se
type ComposeReviewServiceUploadUserIdResult struct {
  Se *ServiceException `thrift:"se,1" db:"se" json:"se,omitempty"`
}

func NewComposeReviewServiceUploadUserIdResult() *ComposeReviewServiceUploadUserIdResult {
  return &ComposeReviewServiceUploadUserIdResult{}
}

var ComposeReviewServiceUploadUserIdResult_Se_DEFAULT *ServiceException
func (p *ComposeReviewServiceUploadUserIdResult) GetSe() *ServiceException {
  if !p.IsSetSe() {
    return ComposeReviewServiceUploadUserIdResult_Se_DEFAULT
  }
return p.Se
}
func (p *ComposeReviewServiceUploadUserIdResult) IsSetSe() bool {
  return p.Se != nil
}

func (p *ComposeReviewServiceUploadUserIdResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ComposeReviewServiceUploadUserIdResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Se = &ServiceException{}
  if err := p.Se.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Se), err)
  }
  return nil
}

func (p *ComposeReviewServiceUploadUserIdResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "UploadUserId_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ComposeReviewServiceUploadUserIdResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSe() {
    if err := oprot.WriteFieldBegin(ctx, "se", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:se: ", p), err) }
    if err := p.Se.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Se), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:se: ", p), err) }
  }
  return err
}

func (p *ComposeReviewServiceUploadUserIdResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ComposeReviewServiceUploadUserIdResult(%+v)", *p)
}


type ReviewStorageService interface {
  // Parameters:
  //  - ReqID
  //  - Review
  //  - Carrier
  StoreReview(ctx context.Context, req_id int64, review *Review, carrier map[string]string) (_err error)
  // Parameters:
  //  - ReqID
  //  - ReviewIds
  //  - Carrier
  ReadReviews(ctx context.Context, req_id int64, review_ids []int64, carrier map[string]string) (_r []*Review, _err error)
}

type ReviewStorageServiceClient struct {
  c thrift.TClient
  meta thrift.ResponseMeta
}

func NewReviewStorageServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *ReviewStorageServiceClient {
  return &ReviewStorageServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewReviewStorageServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *ReviewStorageServiceClient {
  return &ReviewStorageServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewReviewStorageServiceClient(c thrift.TClient) *ReviewStorageServiceClient {
  return &ReviewStorageServiceClient{
    c: c,
  }
}

func (p *ReviewStorageServiceClient) Client_() thrift.TClient {
  return p.c
}

func (p *ReviewStorageServiceClient) LastResponseMeta_() thrift.ResponseMeta {
  return p.meta
}

func (p *ReviewStorageServiceClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
  p.meta = meta
}

// Parameters:
//  - ReqID
//  - Review
//  - Carrier
func (p *ReviewStorageServiceClient) StoreReview(ctx context.Context, req_id int64, review *Review, carrier map[string]string) (_err error) {
  var _args259 ReviewStorageServiceStoreReviewArgs
  _args259.ReqID = req_id
  _args259.Review = review
  _args259.Carrier = carrier
  var _result261 ReviewStorageServiceStoreReviewResult
  var _meta260 thrift.ResponseMeta
  _meta260, _err = p.Client_().Call(ctx, "StoreReview", &_args259, &_result261)
  p.SetLastResponseMeta_(_meta260)
  if _err != nil {
    return
  }
  switch {
  case _result261.Se!= nil:
    return _result261.Se
  }

  return nil
}

// Parameters:
//  - ReqID
//  - ReviewIds
//  - Carrier
func (p *ReviewStorageServiceClient) ReadReviews(ctx context.Context, req_id int64, review_ids []int64, carrier map[string]string) (_r []*Review, _err error) {
  var _args262 ReviewStorageServiceReadReviewsArgs
  _args262.ReqID = req_id
  _args262.ReviewIds = review_ids
  _args262.Carrier = carrier
  var _result264 ReviewStorageServiceReadReviewsResult
  var _meta263 thrift.ResponseMeta
  _meta263, _err = p.Client_().Call(ctx, "ReadReviews", &_args262, &_result264)
  p.SetLastResponseMeta_(_meta263)
  if _err != nil {
    return
  }
  switch {
  case _result264.Se!= nil:
    return _r, _result264.Se
  }

  return _result264.GetSuccess(), nil
}

type ReviewStorageServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler ReviewStorageService
}

func (p *ReviewStorageServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *ReviewStorageServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *ReviewStorageServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewReviewStorageServiceProcessor(handler ReviewStorageService) *ReviewStorageServiceProcessor {

  self265 := &ReviewStorageServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self265.processorMap["StoreReview"] = &reviewStorageServiceProcessorStoreReview{handler:handler}
  self265.processorMap["ReadReviews"] = &reviewStorageServiceProcessorReadReviews{handler:handler}
return self265
}

func (p *ReviewStorageServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
  if err2 != nil { return false, thrift.WrapTException(err2) }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(ctx, thrift.STRUCT)
  iprot.ReadMessageEnd(ctx)
  x266 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
  x266.Write(ctx, oprot)
  oprot.WriteMessageEnd(ctx)
  oprot.Flush(ctx)
  return false, x266

}

type reviewStorageServiceProcessorStoreReview struct {
  handler ReviewStorageService
}

func (p *reviewStorageServiceProcessorStoreReview) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err267 error
  args := ReviewStorageServiceStoreReviewArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "StoreReview", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ReviewStorageServiceStoreReviewResult{}
  if err2 := p.handler.StoreReview(ctx, args.ReqID, args.Review, args.Carrier); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    switch v := err2.(type) {
    case *ServiceException:
      result.Se = v
    default:
      if errors.Is(err2, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err2)
      }
      if errors.Is(err2, context.Canceled) {
        if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
          return false, thrift.WrapTException(err)
        }
      }
      _exc268 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing StoreReview: " + err2.Error())
      if err2 := oprot.WriteMessageBegin(ctx, "StoreReview", thrift.EXCEPTION, seqId); err2 != nil {
        _write_err267 = thrift.WrapTException(err2)
      }
      if err2 := _exc268.Write(ctx, oprot); _write_err267 == nil && err2 != nil {
        _write_err267 = thrift.WrapTException(err2)
      }
      if err2 := oprot.WriteMessageEnd(ctx); _write_err267 == nil && err2 != nil {
        _write_err267 = thrift.WrapTException(err2)
      }
      if err2 := oprot.Flush(ctx); _write_err267 == nil && err2 != nil {
        _write_err267 = thrift.WrapTException(err2)
      }
      if _write_err267 != nil {
        return false, thrift.WrapTException(_write_err267)
      }
      return true, err
    }
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "StoreReview", thrift.REPLY, seqId); err2 != nil {
    _write_err267 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err267 == nil && err2 != nil {
    _write_err267 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err267 == nil && err2 != nil {
    _write_err267 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err267 == nil && err2 != nil {
    _write_err267 = thrift.WrapTException(err2)
  }
  if _write_err267 != nil {
    return false, thrift.WrapTException(_write_err267)
  }
  return true, err
}

type reviewStorageServiceProcessorReadReviews struct {
  handler ReviewStorageService
}

func (p *reviewStorageServiceProcessorReadReviews) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err269 error
  args := ReviewStorageServiceReadReviewsArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "ReadReviews", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ReviewStorageServiceReadReviewsResult{}
  if retval, err2 := p.handler.ReadReviews(ctx, args.ReqID, args.ReviewIds, args.Carrier); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    switch v := err2.(type) {
    case *ServiceException:
      result.Se = v
    default:
      if errors.Is(err2, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err2)
      }
      if errors.Is(err2, context.Canceled) {
        if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
          return false, thrift.WrapTException(err)
        }
      }
      _exc270 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ReadReviews: " + err2.Error())
      if err2 := oprot.WriteMessageBegin(ctx, "ReadReviews", thrift.EXCEPTION, seqId); err2 != nil {
        _write_err269 = thrift.WrapTException(err2)
      }
      if err2 := _exc270.Write(ctx, oprot); _write_err269 == nil && err2 != nil {
        _write_err269 = thrift.WrapTException(err2)
      }
      if err2 := oprot.WriteMessageEnd(ctx); _write_err269 == nil && err2 != nil {
        _write_err269 = thrift.WrapTException(err2)
      }
      if err2 := oprot.Flush(ctx); _write_err269 == nil && err2 != nil {
        _write_err269 = thrift.WrapTException(err2)
      }
      if _write_err269 != nil {
        return false, thrift.WrapTException(_write_err269)
      }
      return true, err
    }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "ReadReviews", thrift.REPLY, seqId); err2 != nil {
    _write_err269 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err269 == nil && err2 != nil {
    _write_err269 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err269 == nil && err2 != nil {
    _write_err269 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err269 == nil && err2 != nil {
    _write_err269 = thrift.WrapTException(err2)
  }
  if _write_err269 != nil {
    return false, thrift.WrapTException(_write_err269)
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - ReqID
//  - Review
//  - Carrier
type ReviewStorageServiceStoreReviewArgs struct {
  ReqID int64 `thrift:"req_id,1" db:"req_id" json:"req_id"`
  Review *Review `thrift:"review,2" db:"review" json:"review"`
  Carrier map[string]string `thrift:"carrier,3" db:"carrier" json:"carrier"`
}

func NewReviewStorageServiceStoreReviewArgs() *ReviewStorageServiceStoreReviewArgs {
  return &ReviewStorageServiceStoreReviewArgs{}
}


func (p *ReviewStorageServiceStoreReviewArgs) GetReqID() int64 {
  return p.ReqID
}
var ReviewStorageServiceStoreReviewArgs_Review_DEFAULT *Review
func (p *ReviewStorageServiceStoreReviewArgs) GetReview() *Review {
  if !p.IsSetReview() {
    return ReviewStorageServiceStoreReviewArgs_Review_DEFAULT
  }
return p.Review
}

func (p *ReviewStorageServiceStoreReviewArgs) GetCarrier() map[string]string {
  return p.Carrier
}
func (p *ReviewStorageServiceStoreReviewArgs) IsSetReview() bool {
  return p.Review != nil
}

func (p *ReviewStorageServiceStoreReviewArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReviewStorageServiceStoreReviewArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqID = v
}
  return nil
}

func (p *ReviewStorageServiceStoreReviewArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Review = &Review{}
  if err := p.Review.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Review), err)
  }
  return nil
}

func (p *ReviewStorageServiceStoreReviewArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Carrier =  tMap
  for i := 0; i < size; i ++ {
var _key271 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key271 = v
}
var _val272 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val272 = v
}
    p.Carrier[_key271] = _val272
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *ReviewStorageServiceStoreReviewArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "StoreReview_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReviewStorageServiceStoreReviewArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ReqID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.req_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req_id: ", p), err) }
  return err
}

func (p *ReviewStorageServiceStoreReviewArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "review", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:review: ", p), err) }
  if err := p.Review.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Review), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:review: ", p), err) }
  return err
}

func (p *ReviewStorageServiceStoreReviewArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "carrier", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:carrier: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.Carrier)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Carrier {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:carrier: ", p), err) }
  return err
}

func (p *ReviewStorageServiceStoreReviewArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReviewStorageServiceStoreReviewArgs(%+v)", *p)
}

// Attributes:
//  - Se
type ReviewStorageServiceStoreReviewResult struct {
  Se *ServiceException `thrift:"se,1" db:"se" json:"se,omitempty"`
}

func NewReviewStorageServiceStoreReviewResult() *ReviewStorageServiceStoreReviewResult {
  return &ReviewStorageServiceStoreReviewResult{}
}

var ReviewStorageServiceStoreReviewResult_Se_DEFAULT *ServiceException
func (p *ReviewStorageServiceStoreReviewResult) GetSe() *ServiceException {
  if !p.IsSetSe() {
    return ReviewStorageServiceStoreReviewResult_Se_DEFAULT
  }
return p.Se
}
func (p *ReviewStorageServiceStoreReviewResult) IsSetSe() bool {
  return p.Se != nil
}

func (p *ReviewStorageServiceStoreReviewResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReviewStorageServiceStoreReviewResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Se = &ServiceException{}
  if err := p.Se.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Se), err)
  }
  return nil
}

func (p *ReviewStorageServiceStoreReviewResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "StoreReview_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReviewStorageServiceStoreReviewResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSe() {
    if err := oprot.WriteFieldBegin(ctx, "se", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:se: ", p), err) }
    if err := p.Se.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Se), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:se: ", p), err) }
  }
  return err
}

func (p *ReviewStorageServiceStoreReviewResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReviewStorageServiceStoreReviewResult(%+v)", *p)
}

// Attributes:
//  - ReqID
//  - ReviewIds
//  - Carrier
type ReviewStorageServiceReadReviewsArgs struct {
  ReqID int64 `thrift:"req_id,1" db:"req_id" json:"req_id"`
  ReviewIds []int64 `thrift:"review_ids,2" db:"review_ids" json:"review_ids"`
  Carrier map[string]string `thrift:"carrier,3" db:"carrier" json:"carrier"`
}

func NewReviewStorageServiceReadReviewsArgs() *ReviewStorageServiceReadReviewsArgs {
  return &ReviewStorageServiceReadReviewsArgs{}
}


func (p *ReviewStorageServiceReadReviewsArgs) GetReqID() int64 {
  return p.ReqID
}

func (p *ReviewStorageServiceReadReviewsArgs) GetReviewIds() []int64 {
  return p.ReviewIds
}

func (p *ReviewStorageServiceReadReviewsArgs) GetCarrier() map[string]string {
  return p.Carrier
}
func (p *ReviewStorageServiceReadReviewsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReviewStorageServiceReadReviewsArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqID = v
}
  return nil
}

func (p *ReviewStorageServiceReadReviewsArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int64, 0, size)
  p.ReviewIds =  tSlice
  for i := 0; i < size; i ++ {
var _elem273 int64
    if v, err := iprot.ReadI64(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem273 = v
}
    p.ReviewIds = append(p.ReviewIds, _elem273)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ReviewStorageServiceReadReviewsArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Carrier =  tMap
  for i := 0; i < size; i ++ {
var _key274 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key274 = v
}
var _val275 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val275 = v
}
    p.Carrier[_key274] = _val275
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *ReviewStorageServiceReadReviewsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ReadReviews_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReviewStorageServiceReadReviewsArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ReqID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.req_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req_id: ", p), err) }
  return err
}

func (p *ReviewStorageServiceReadReviewsArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "review_ids", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:review_ids: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.I64, len(p.ReviewIds)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ReviewIds {
    if err := oprot.WriteI64(ctx, int64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:review_ids: ", p), err) }
  return err
}

func (p *ReviewStorageServiceReadReviewsArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "carrier", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:carrier: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.Carrier)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Carrier {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:carrier: ", p), err) }
  return err
}

func (p *ReviewStorageServiceReadReviewsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReviewStorageServiceReadReviewsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Se
type ReviewStorageServiceReadReviewsResult struct {
  Success []*Review `thrift:"success,0" db:"success" json:"success,omitempty"`
  Se *ServiceException `thrift:"se,1" db:"se" json:"se,omitempty"`
}

func NewReviewStorageServiceReadReviewsResult() *ReviewStorageServiceReadReviewsResult {
  return &ReviewStorageServiceReadReviewsResult{}
}

var ReviewStorageServiceReadReviewsResult_Success_DEFAULT []*Review

func (p *ReviewStorageServiceReadReviewsResult) GetSuccess() []*Review {
  return p.Success
}
var ReviewStorageServiceReadReviewsResult_Se_DEFAULT *ServiceException
func (p *ReviewStorageServiceReadReviewsResult) GetSe() *ServiceException {
  if !p.IsSetSe() {
    return ReviewStorageServiceReadReviewsResult_Se_DEFAULT
  }
return p.Se
}
func (p *ReviewStorageServiceReadReviewsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ReviewStorageServiceReadReviewsResult) IsSetSe() bool {
  return p.Se != nil
}

func (p *ReviewStorageServiceReadReviewsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReviewStorageServiceReadReviewsResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Review, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem276 := &Review{}
    if err := _elem276.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem276), err)
    }
    p.Success = append(p.Success, _elem276)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ReviewStorageServiceReadReviewsResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Se = &ServiceException{}
  if err := p.Se.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Se), err)
  }
  return nil
}

func (p *ReviewStorageServiceReadReviewsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ReadReviews_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReviewStorageServiceReadReviewsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ReviewStorageServiceReadReviewsResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSe() {
    if err := oprot.WriteFieldBegin(ctx, "se", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:se: ", p), err) }
    if err := p.Se.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Se), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:se: ", p), err) }
  }
  return err
}

func (p *ReviewStorageServiceReadReviewsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReviewStorageServiceReadReviewsResult(%+v)", *p)
}


type MovieReviewService interface {
  // Parameters:
  //  - ReqID
  //  - MovieID
  //  - ReviewID
  //  - Timestamp
  //  - Carrier
  UploadMovieReview(ctx context.Context, req_id int64, movie_id string, review_id int64, timestamp int64, carrier map[string]string) (_err error)
  // Parameters:
  //  - ReqID
  //  - MovieID
  //  - Start
  //  - Stop
  //  - Carrier
  ReadMovieReviews(ctx context.Context, req_id int64, movie_id string, start int32, stop int32, carrier map[string]string) (_r []*Review, _err error)
}

type MovieReviewServiceClient struct {
  c thrift.TClient
  meta thrift.ResponseMeta
}

func NewMovieReviewServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *MovieReviewServiceClient {
  return &MovieReviewServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewMovieReviewServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *MovieReviewServiceClient {
  return &MovieReviewServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewMovieReviewServiceClient(c thrift.TClient) *MovieReviewServiceClient {
  return &MovieReviewServiceClient{
    c: c,
  }
}

func (p *MovieReviewServiceClient) Client_() thrift.TClient {
  return p.c
}

func (p *MovieReviewServiceClient) LastResponseMeta_() thrift.ResponseMeta {
  return p.meta
}

func (p *MovieReviewServiceClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
  p.meta = meta
}

// Parameters:
//  - ReqID
//  - MovieID
//  - ReviewID
//  - Timestamp
//  - Carrier
func (p *MovieReviewServiceClient) UploadMovieReview(ctx context.Context, req_id int64, movie_id string, review_id int64, timestamp int64, carrier map[string]string) (_err error) {
  var _args303 MovieReviewServiceUploadMovieReviewArgs
  _args303.ReqID = req_id
  _args303.MovieID = movie_id
  _args303.ReviewID = review_id
  _args303.Timestamp = timestamp
  _args303.Carrier = carrier
  var _result305 MovieReviewServiceUploadMovieReviewResult
  var _meta304 thrift.ResponseMeta
  _meta304, _err = p.Client_().Call(ctx, "UploadMovieReview", &_args303, &_result305)
  p.SetLastResponseMeta_(_meta304)
  if _err != nil {
    return
  }
  switch {
  case _result305.Se!= nil:
    return _result305.Se
  }

  return nil
}

// Parameters:
//  - ReqID
//  - MovieID
//  - Start
//  - Stop
//  - Carrier
func (p *MovieReviewServiceClient) ReadMovieReviews(ctx context.Context, req_id int64, movie_id string, start int32, stop int32, carrier map[string]string) (_r []*Review, _err error) {
  var _args306 MovieReviewServiceReadMovieReviewsArgs
  _args306.ReqID = req_id
  _args306.MovieID = movie_id
  _args306.Start = start
  _args306.Stop = stop
  _args306.Carrier = carrier
  var _result308 MovieReviewServiceReadMovieReviewsResult
  var _meta307 thrift.ResponseMeta
  _meta307, _err = p.Client_().Call(ctx, "ReadMovieReviews", &_args306, &_result308)
  p.SetLastResponseMeta_(_meta307)
  if _err != nil {
    return
  }
  switch {
  case _result308.Se!= nil:
    return _r, _result308.Se
  }

  return _result308.GetSuccess(), nil
}

type MovieReviewServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler MovieReviewService
}

func (p *MovieReviewServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *MovieReviewServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *MovieReviewServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewMovieReviewServiceProcessor(handler MovieReviewService) *MovieReviewServiceProcessor {

  self309 := &MovieReviewServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self309.processorMap["UploadMovieReview"] = &movieReviewServiceProcessorUploadMovieReview{handler:handler}
  self309.processorMap["ReadMovieReviews"] = &movieReviewServiceProcessorReadMovieReviews{handler:handler}
return self309
}

func (p *MovieReviewServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
  if err2 != nil { return false, thrift.WrapTException(err2) }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(ctx, thrift.STRUCT)
  iprot.ReadMessageEnd(ctx)
  x310 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
  x310.Write(ctx, oprot)
  oprot.WriteMessageEnd(ctx)
  oprot.Flush(ctx)
  return false, x310

}

type movieReviewServiceProcessorUploadMovieReview struct {
  handler MovieReviewService
}

func (p *movieReviewServiceProcessorUploadMovieReview) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err311 error
  args := MovieReviewServiceUploadMovieReviewArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "UploadMovieReview", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := MovieReviewServiceUploadMovieReviewResult{}
  if err2 := p.handler.UploadMovieReview(ctx, args.ReqID, args.MovieID, args.ReviewID, args.Timestamp, args.Carrier); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    switch v := err2.(type) {
    case *ServiceException:
      result.Se = v
    default:
      if errors.Is(err2, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err2)
      }
      if errors.Is(err2, context.Canceled) {
        if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
          return false, thrift.WrapTException(err)
        }
      }
      _exc312 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UploadMovieReview: " + err2.Error())
      if err2 := oprot.WriteMessageBegin(ctx, "UploadMovieReview", thrift.EXCEPTION, seqId); err2 != nil {
        _write_err311 = thrift.WrapTException(err2)
      }
      if err2 := _exc312.Write(ctx, oprot); _write_err311 == nil && err2 != nil {
        _write_err311 = thrift.WrapTException(err2)
      }
      if err2 := oprot.WriteMessageEnd(ctx); _write_err311 == nil && err2 != nil {
        _write_err311 = thrift.WrapTException(err2)
      }
      if err2 := oprot.Flush(ctx); _write_err311 == nil && err2 != nil {
        _write_err311 = thrift.WrapTException(err2)
      }
      if _write_err311 != nil {
        return false, thrift.WrapTException(_write_err311)
      }
      return true, err
    }
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "UploadMovieReview", thrift.REPLY, seqId); err2 != nil {
    _write_err311 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err311 == nil && err2 != nil {
    _write_err311 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err311 == nil && err2 != nil {
    _write_err311 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err311 == nil && err2 != nil {
    _write_err311 = thrift.WrapTException(err2)
  }
  if _write_err311 != nil {
    return false, thrift.WrapTException(_write_err311)
  }
  return true, err
}

type movieReviewServiceProcessorReadMovieReviews struct {
  handler MovieReviewService
}

func (p *movieReviewServiceProcessorReadMovieReviews) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err313 error
  args := MovieReviewServiceReadMovieReviewsArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "ReadMovieReviews", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := MovieReviewServiceReadMovieReviewsResult{}
  if retval, err2 := p.handler.ReadMovieReviews(ctx, args.ReqID, args.MovieID, args.Start, args.Stop, args.Carrier); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    switch v := err2.(type) {
    case *ServiceException:
      result.Se = v
    default:
      if errors.Is(err2, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err2)
      }
      if errors.Is(err2, context.Canceled) {
        if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
          return false, thrift.WrapTException(err)
        }
      }
      _exc314 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ReadMovieReviews: " + err2.Error())
      if err2 := oprot.WriteMessageBegin(ctx, "ReadMovieReviews", thrift.EXCEPTION, seqId); err2 != nil {
        _write_err313 = thrift.WrapTException(err2)
      }
      if err2 := _exc314.Write(ctx, oprot); _write_err313 == nil && err2 != nil {
        _write_err313 = thrift.WrapTException(err2)
      }
      if err2 := oprot.WriteMessageEnd(ctx); _write_err313 == nil && err2 != nil {
        _write_err313 = thrift.WrapTException(err2)
      }
      if err2 := oprot.Flush(ctx); _write_err313 == nil && err2 != nil {
        _write_err313 = thrift.WrapTException(err2)
      }
      if _write_err313 != nil {
        return false, thrift.WrapTException(_write_err313)
      }
      return true, err
    }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "ReadMovieReviews", thrift.REPLY, seqId); err2 != nil {
    _write_err313 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err313 == nil && err2 != nil {
    _write_err313 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err313 == nil && err2 != nil {
    _write_err313 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err313 == nil && err2 != nil {
    _write_err313 = thrift.WrapTException(err2)
  }
  if _write_err313 != nil {
    return false, thrift.WrapTException(_write_err313)
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - ReqID
//  - MovieID
//  - ReviewID
//  - Timestamp
//  - Carrier
type MovieReviewServiceUploadMovieReviewArgs struct {
  ReqID int64 `thrift:"req_id,1" db:"req_id" json:"req_id"`
  MovieID string `thrift:"movie_id,2" db:"movie_id" json:"movie_id"`
  ReviewID int64 `thrift:"review_id,3" db:"review_id" json:"review_id"`
  Timestamp int64 `thrift:"timestamp,4" db:"timestamp" json:"timestamp"`
  Carrier map[string]string `thrift:"carrier,5" db:"carrier" json:"carrier"`
}

func NewMovieReviewServiceUploadMovieReviewArgs() *MovieReviewServiceUploadMovieReviewArgs {
  return &MovieReviewServiceUploadMovieReviewArgs{}
}


func (p *MovieReviewServiceUploadMovieReviewArgs) GetReqID() int64 {
  return p.ReqID
}

func (p *MovieReviewServiceUploadMovieReviewArgs) GetMovieID() string {
  return p.MovieID
}

func (p *MovieReviewServiceUploadMovieReviewArgs) GetReviewID() int64 {
  return p.ReviewID
}

func (p *MovieReviewServiceUploadMovieReviewArgs) GetTimestamp() int64 {
  return p.Timestamp
}

func (p *MovieReviewServiceUploadMovieReviewArgs) GetCarrier() map[string]string {
  return p.Carrier
}
func (p *MovieReviewServiceUploadMovieReviewArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MovieReviewServiceUploadMovieReviewArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqID = v
}
  return nil
}

func (p *MovieReviewServiceUploadMovieReviewArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.MovieID = v
}
  return nil
}

func (p *MovieReviewServiceUploadMovieReviewArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ReviewID = v
}
  return nil
}

func (p *MovieReviewServiceUploadMovieReviewArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Timestamp = v
}
  return nil
}

func (p *MovieReviewServiceUploadMovieReviewArgs)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Carrier =  tMap
  for i := 0; i < size; i ++ {
var _key315 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key315 = v
}
var _val316 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val316 = v
}
    p.Carrier[_key315] = _val316
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *MovieReviewServiceUploadMovieReviewArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "UploadMovieReview_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MovieReviewServiceUploadMovieReviewArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ReqID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.req_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req_id: ", p), err) }
  return err
}

func (p *MovieReviewServiceUploadMovieReviewArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "movie_id", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:movie_id: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.MovieID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.movie_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:movie_id: ", p), err) }
  return err
}

func (p *MovieReviewServiceUploadMovieReviewArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "review_id", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:review_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ReviewID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.review_id (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:review_id: ", p), err) }
  return err
}

func (p *MovieReviewServiceUploadMovieReviewArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "timestamp", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:timestamp: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Timestamp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.timestamp (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:timestamp: ", p), err) }
  return err
}

func (p *MovieReviewServiceUploadMovieReviewArgs) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "carrier", thrift.MAP, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:carrier: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.Carrier)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Carrier {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:carrier: ", p), err) }
  return err
}

func (p *MovieReviewServiceUploadMovieReviewArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MovieReviewServiceUploadMovieReviewArgs(%+v)", *p)
}

// Attributes:
//  - Se
type MovieReviewServiceUploadMovieReviewResult struct {
  Se *ServiceException `thrift:"se,1" db:"se" json:"se,omitempty"`
}

func NewMovieReviewServiceUploadMovieReviewResult() *MovieReviewServiceUploadMovieReviewResult {
  return &MovieReviewServiceUploadMovieReviewResult{}
}

var MovieReviewServiceUploadMovieReviewResult_Se_DEFAULT *ServiceException
func (p *MovieReviewServiceUploadMovieReviewResult) GetSe() *ServiceException {
  if !p.IsSetSe() {
    return MovieReviewServiceUploadMovieReviewResult_Se_DEFAULT
  }
return p.Se
}
func (p *MovieReviewServiceUploadMovieReviewResult) IsSetSe() bool {
  return p.Se != nil
}

func (p *MovieReviewServiceUploadMovieReviewResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MovieReviewServiceUploadMovieReviewResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Se = &ServiceException{}
  if err := p.Se.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Se), err)
  }
  return nil
}

func (p *MovieReviewServiceUploadMovieReviewResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "UploadMovieReview_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MovieReviewServiceUploadMovieReviewResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSe() {
    if err := oprot.WriteFieldBegin(ctx, "se", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:se: ", p), err) }
    if err := p.Se.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Se), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:se: ", p), err) }
  }
  return err
}

func (p *MovieReviewServiceUploadMovieReviewResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MovieReviewServiceUploadMovieReviewResult(%+v)", *p)
}

// Attributes:
//  - ReqID
//  - MovieID
//  - Start
//  - Stop
//  - Carrier
type MovieReviewServiceReadMovieReviewsArgs struct {
  ReqID int64 `thrift:"req_id,1" db:"req_id" json:"req_id"`
  MovieID string `thrift:"movie_id,2" db:"movie_id" json:"movie_id"`
  Start int32 `thrift:"start,3" db:"start" json:"start"`
  Stop int32 `thrift:"stop,4" db:"stop" json:"stop"`
  Carrier map[string]string `thrift:"carrier,5" db:"carrier" json:"carrier"`
}

func NewMovieReviewServiceReadMovieReviewsArgs() *MovieReviewServiceReadMovieReviewsArgs {
  return &MovieReviewServiceReadMovieReviewsArgs{}
}


func (p *MovieReviewServiceReadMovieReviewsArgs) GetReqID() int64 {
  return p.ReqID
}

func (p *MovieReviewServiceReadMovieReviewsArgs) GetMovieID() string {
  return p.MovieID
}

func (p *MovieReviewServiceReadMovieReviewsArgs) GetStart() int32 {
  return p.Start
}

func (p *MovieReviewServiceReadMovieReviewsArgs) GetStop() int32 {
  return p.Stop
}

func (p *MovieReviewServiceReadMovieReviewsArgs) GetCarrier() map[string]string {
  return p.Carrier
}
func (p *MovieReviewServiceReadMovieReviewsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MovieReviewServiceReadMovieReviewsArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqID = v
}
  return nil
}

func (p *MovieReviewServiceReadMovieReviewsArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.MovieID = v
}
  return nil
}

func (p *MovieReviewServiceReadMovieReviewsArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Start = v
}
  return nil
}

func (p *MovieReviewServiceReadMovieReviewsArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Stop = v
}
  return nil
}

func (p *MovieReviewServiceReadMovieReviewsArgs)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Carrier =  tMap
  for i := 0; i < size; i ++ {
var _key317 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key317 = v
}
var _val318 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val318 = v
}
    p.Carrier[_key317] = _val318
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *MovieReviewServiceReadMovieReviewsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ReadMovieReviews_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MovieReviewServiceReadMovieReviewsArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ReqID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.req_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req_id: ", p), err) }
  return err
}

func (p *MovieReviewServiceReadMovieReviewsArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "movie_id", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:movie_id: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.MovieID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.movie_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:movie_id: ", p), err) }
  return err
}

func (p *MovieReviewServiceReadMovieReviewsArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "start", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:start: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Start)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.start (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:start: ", p), err) }
  return err
}

func (p *MovieReviewServiceReadMovieReviewsArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "stop", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:stop: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Stop)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.stop (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:stop: ", p), err) }
  return err
}

func (p *MovieReviewServiceReadMovieReviewsArgs) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "carrier", thrift.MAP, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:carrier: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.Carrier)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Carrier {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:carrier: ", p), err) }
  return err
}

func (p *MovieReviewServiceReadMovieReviewsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MovieReviewServiceReadMovieReviewsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Se
type MovieReviewServiceReadMovieReviewsResult struct {
  Success []*Review `thrift:"success,0" db:"success" json:"success,omitempty"`
  Se *ServiceException `thrift:"se,1" db:"se" json:"se,omitempty"`
}

func NewMovieReviewServiceReadMovieReviewsResult() *MovieReviewServiceReadMovieReviewsResult {
  return &MovieReviewServiceReadMovieReviewsResult{}
}

var MovieReviewServiceReadMovieReviewsResult_Success_DEFAULT []*Review

func (p *MovieReviewServiceReadMovieReviewsResult) GetSuccess() []*Review {
  return p.Success
}
var MovieReviewServiceReadMovieReviewsResult_Se_DEFAULT *ServiceException
func (p *MovieReviewServiceReadMovieReviewsResult) GetSe() *ServiceException {
  if !p.IsSetSe() {
    return MovieReviewServiceReadMovieReviewsResult_Se_DEFAULT
  }
return p.Se
}
func (p *MovieReviewServiceReadMovieReviewsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MovieReviewServiceReadMovieReviewsResult) IsSetSe() bool {
  return p.Se != nil
}

func (p *MovieReviewServiceReadMovieReviewsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MovieReviewServiceReadMovieReviewsResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Review, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem319 := &Review{}
    if err := _elem319.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem319), err)
    }
    p.Success = append(p.Success, _elem319)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MovieReviewServiceReadMovieReviewsResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Se = &ServiceException{}
  if err := p.Se.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Se), err)
  }
  return nil
}

func (p *MovieReviewServiceReadMovieReviewsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ReadMovieReviews_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MovieReviewServiceReadMovieReviewsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MovieReviewServiceReadMovieReviewsResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSe() {
    if err := oprot.WriteFieldBegin(ctx, "se", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:se: ", p), err) }
    if err := p.Se.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Se), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:se: ", p), err) }
  }
  return err
}

func (p *MovieReviewServiceReadMovieReviewsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MovieReviewServiceReadMovieReviewsResult(%+v)", *p)
}


type UserReviewService interface {
  // Parameters:
  //  - ReqID
  //  - UserID
  //  - ReviewID
  //  - Timestamp
  //  - Carrier
  UploadUserReview(ctx context.Context, req_id int64, user_id int64, review_id int64, timestamp int64, carrier map[string]string) (_err error)
  // Parameters:
  //  - ReqID
  //  - UserID
  //  - Start
  //  - Stop
  //  - Carrier
  ReadUserReviews(ctx context.Context, req_id int64, user_id int64, start int32, stop int32, carrier map[string]string) (_r []*Review, _err error)
}

type UserReviewServiceClient struct {
  c thrift.TClient
  meta thrift.ResponseMeta
}

func NewUserReviewServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *UserReviewServiceClient {
  return &UserReviewServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewUserReviewServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *UserReviewServiceClient {
  return &UserReviewServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewUserReviewServiceClient(c thrift.TClient) *UserReviewServiceClient {
  return &UserReviewServiceClient{
    c: c,
  }
}

func (p *UserReviewServiceClient) Client_() thrift.TClient {
  return p.c
}

func (p *UserReviewServiceClient) LastResponseMeta_() thrift.ResponseMeta {
  return p.meta
}

func (p *UserReviewServiceClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
  p.meta = meta
}

// Parameters:
//  - ReqID
//  - UserID
//  - ReviewID
//  - Timestamp
//  - Carrier
func (p *UserReviewServiceClient) UploadUserReview(ctx context.Context, req_id int64, user_id int64, review_id int64, timestamp int64, carrier map[string]string) (_err error) {
  var _args340 UserReviewServiceUploadUserReviewArgs
  _args340.ReqID = req_id
  _args340.UserID = user_id
  _args340.ReviewID = review_id
  _args340.Timestamp = timestamp
  _args340.Carrier = carrier
  var _result342 UserReviewServiceUploadUserReviewResult
  var _meta341 thrift.ResponseMeta
  _meta341, _err = p.Client_().Call(ctx, "UploadUserReview", &_args340, &_result342)
  p.SetLastResponseMeta_(_meta341)
  if _err != nil {
    return
  }
  switch {
  case _result342.Se!= nil:
    return _result342.Se
  }

  return nil
}

// Parameters:
//  - ReqID
//  - UserID
//  - Start
//  - Stop
//  - Carrier
func (p *UserReviewServiceClient) ReadUserReviews(ctx context.Context, req_id int64, user_id int64, start int32, stop int32, carrier map[string]string) (_r []*Review, _err error) {
  var _args343 UserReviewServiceReadUserReviewsArgs
  _args343.ReqID = req_id
  _args343.UserID = user_id
  _args343.Start = start
  _args343.Stop = stop
  _args343.Carrier = carrier
  var _result345 UserReviewServiceReadUserReviewsResult
  var _meta344 thrift.ResponseMeta
  _meta344, _err = p.Client_().Call(ctx, "ReadUserReviews", &_args343, &_result345)
  p.SetLastResponseMeta_(_meta344)
  if _err != nil {
    return
  }
  switch {
  case _result345.Se!= nil:
    return _r, _result345.Se
  }

  return _result345.GetSuccess(), nil
}

type UserReviewServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler UserReviewService
}

func (p *UserReviewServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *UserReviewServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *UserReviewServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewUserReviewServiceProcessor(handler UserReviewService) *UserReviewServiceProcessor {

  self346 := &UserReviewServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self346.processorMap["UploadUserReview"] = &userReviewServiceProcessorUploadUserReview{handler:handler}
  self346.processorMap["ReadUserReviews"] = &userReviewServiceProcessorReadUserReviews{handler:handler}
return self346
}

func (p *UserReviewServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
  if err2 != nil { return false, thrift.WrapTException(err2) }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(ctx, thrift.STRUCT)
  iprot.ReadMessageEnd(ctx)
  x347 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
  x347.Write(ctx, oprot)
  oprot.WriteMessageEnd(ctx)
  oprot.Flush(ctx)
  return false, x347

}

type userReviewServiceProcessorUploadUserReview struct {
  handler UserReviewService
}

func (p *userReviewServiceProcessorUploadUserReview) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err348 error
  args := UserReviewServiceUploadUserReviewArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "UploadUserReview", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := UserReviewServiceUploadUserReviewResult{}
  if err2 := p.handler.UploadUserReview(ctx, args.ReqID, args.UserID, args.ReviewID, args.Timestamp, args.Carrier); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    switch v := err2.(type) {
    case *ServiceException:
      result.Se = v
    default:
      if errors.Is(err2, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err2)
      }
      if errors.Is(err2, context.Canceled) {
        if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
          return false, thrift.WrapTException(err)
        }
      }
      _exc349 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UploadUserReview: " + err2.Error())
      if err2 := oprot.WriteMessageBegin(ctx, "UploadUserReview", thrift.EXCEPTION, seqId); err2 != nil {
        _write_err348 = thrift.WrapTException(err2)
      }
      if err2 := _exc349.Write(ctx, oprot); _write_err348 == nil && err2 != nil {
        _write_err348 = thrift.WrapTException(err2)
      }
      if err2 := oprot.WriteMessageEnd(ctx); _write_err348 == nil && err2 != nil {
        _write_err348 = thrift.WrapTException(err2)
      }
      if err2 := oprot.Flush(ctx); _write_err348 == nil && err2 != nil {
        _write_err348 = thrift.WrapTException(err2)
      }
      if _write_err348 != nil {
        return false, thrift.WrapTException(_write_err348)
      }
      return true, err
    }
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "UploadUserReview", thrift.REPLY, seqId); err2 != nil {
    _write_err348 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err348 == nil && err2 != nil {
    _write_err348 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err348 == nil && err2 != nil {
    _write_err348 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err348 == nil && err2 != nil {
    _write_err348 = thrift.WrapTException(err2)
  }
  if _write_err348 != nil {
    return false, thrift.WrapTException(_write_err348)
  }
  return true, err
}

type userReviewServiceProcessorReadUserReviews struct {
  handler UserReviewService
}

func (p *userReviewServiceProcessorReadUserReviews) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err350 error
  args := UserReviewServiceReadUserReviewsArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "ReadUserReviews", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := UserReviewServiceReadUserReviewsResult{}
  if retval, err2 := p.handler.ReadUserReviews(ctx, args.ReqID, args.UserID, args.Start, args.Stop, args.Carrier); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    switch v := err2.(type) {
    case *ServiceException:
      result.Se = v
    default:
      if errors.Is(err2, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err2)
      }
      if errors.Is(err2, context.Canceled) {
        if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
          return false, thrift.WrapTException(err)
        }
      }
      _exc351 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ReadUserReviews: " + err2.Error())
      if err2 := oprot.WriteMessageBegin(ctx, "ReadUserReviews", thrift.EXCEPTION, seqId); err2 != nil {
        _write_err350 = thrift.WrapTException(err2)
      }
      if err2 := _exc351.Write(ctx, oprot); _write_err350 == nil && err2 != nil {
        _write_err350 = thrift.WrapTException(err2)
      }
      if err2 := oprot.WriteMessageEnd(ctx); _write_err350 == nil && err2 != nil {
        _write_err350 = thrift.WrapTException(err2)
      }
      if err2 := oprot.Flush(ctx); _write_err350 == nil && err2 != nil {
        _write_err350 = thrift.WrapTException(err2)
      }
      if _write_err350 != nil {
        return false, thrift.WrapTException(_write_err350)
      }
      return true, err
    }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "ReadUserReviews", thrift.REPLY, seqId); err2 != nil {
    _write_err350 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err350 == nil && err2 != nil {
    _write_err350 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err350 == nil && err2 != nil {
    _write_err350 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err350 == nil && err2 != nil {
    _write_err350 = thrift.WrapTException(err2)
  }
  if _write_err350 != nil {
    return false, thrift.WrapTException(_write_err350)
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - ReqID
//  - UserID
//  - ReviewID
//  - Timestamp
//  - Carrier
type UserReviewServiceUploadUserReviewArgs struct {
  ReqID int64 `thrift:"req_id,1" db:"req_id" json:"req_id"`
  UserID int64 `thrift:"user_id,2" db:"user_id" json:"user_id"`
  ReviewID int64 `thrift:"review_id,3" db:"review_id" json:"review_id"`
  Timestamp int64 `thrift:"timestamp,4" db:"timestamp" json:"timestamp"`
  Carrier map[string]string `thrift:"carrier,5" db:"carrier" json:"carrier"`
}

func NewUserReviewServiceUploadUserReviewArgs() *UserReviewServiceUploadUserReviewArgs {
  return &UserReviewServiceUploadUserReviewArgs{}
}


func (p *UserReviewServiceUploadUserReviewArgs) GetReqID() int64 {
  return p.ReqID
}

func (p *UserReviewServiceUploadUserReviewArgs) GetUserID() int64 {
  return p.UserID
}

func (p *UserReviewServiceUploadUserReviewArgs) GetReviewID() int64 {
  return p.ReviewID
}

func (p *UserReviewServiceUploadUserReviewArgs) GetTimestamp() int64 {
  return p.Timestamp
}

func (p *UserReviewServiceUploadUserReviewArgs) GetCarrier() map[string]string {
  return p.Carrier
}
func (p *UserReviewServiceUploadUserReviewArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserReviewServiceUploadUserReviewArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqID = v
}
  return nil
}

func (p *UserReviewServiceUploadUserReviewArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserID = v
}
  return nil
}

func (p *UserReviewServiceUploadUserReviewArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ReviewID = v
}
  return nil
}

func (p *UserReviewServiceUploadUserReviewArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Timestamp = v
}
  return nil
}

func (p *UserReviewServiceUploadUserReviewArgs)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Carrier =  tMap
  for i := 0; i < size; i ++ {
var _key352 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key352 = v
}
var _val353 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val353 = v
}
    p.Carrier[_key352] = _val353
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *UserReviewServiceUploadUserReviewArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "UploadUserReview_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserReviewServiceUploadUserReviewArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ReqID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.req_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req_id: ", p), err) }
  return err
}

func (p *UserReviewServiceUploadUserReviewArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "user_id", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:user_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.UserID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:user_id: ", p), err) }
  return err
}

func (p *UserReviewServiceUploadUserReviewArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "review_id", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:review_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ReviewID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.review_id (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:review_id: ", p), err) }
  return err
}

func (p *UserReviewServiceUploadUserReviewArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "timestamp", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:timestamp: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Timestamp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.timestamp (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:timestamp: ", p), err) }
  return err
}

func (p *UserReviewServiceUploadUserReviewArgs) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "carrier", thrift.MAP, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:carrier: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.Carrier)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Carrier {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:carrier: ", p), err) }
  return err
}

func (p *UserReviewServiceUploadUserReviewArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserReviewServiceUploadUserReviewArgs(%+v)", *p)
}

// Attributes:
//  - Se
type UserReviewServiceUploadUserReviewResult struct {
  Se *ServiceException `thrift:"se,1" db:"se" json:"se,omitempty"`
}

func NewUserReviewServiceUploadUserReviewResult() *UserReviewServiceUploadUserReviewResult {
  return &UserReviewServiceUploadUserReviewResult{}
}

var UserReviewServiceUploadUserReviewResult_Se_DEFAULT *ServiceException
func (p *UserReviewServiceUploadUserReviewResult) GetSe() *ServiceException {
  if !p.IsSetSe() {
    return UserReviewServiceUploadUserReviewResult_Se_DEFAULT
  }
return p.Se
}
func (p *UserReviewServiceUploadUserReviewResult) IsSetSe() bool {
  return p.Se != nil
}

func (p *UserReviewServiceUploadUserReviewResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserReviewServiceUploadUserReviewResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Se = &ServiceException{}
  if err := p.Se.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Se), err)
  }
  return nil
}

func (p *UserReviewServiceUploadUserReviewResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "UploadUserReview_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserReviewServiceUploadUserReviewResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSe() {
    if err := oprot.WriteFieldBegin(ctx, "se", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:se: ", p), err) }
    if err := p.Se.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Se), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:se: ", p), err) }
  }
  return err
}

func (p *UserReviewServiceUploadUserReviewResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserReviewServiceUploadUserReviewResult(%+v)", *p)
}

// Attributes:
//  - ReqID
//  - UserID
//  - Start
//  - Stop
//  - Carrier
type UserReviewServiceReadUserReviewsArgs struct {
  ReqID int64 `thrift:"req_id,1" db:"req_id" json:"req_id"`
  UserID int64 `thrift:"user_id,2" db:"user_id" json:"user_id"`
  Start int32 `thrift:"start,3" db:"start" json:"start"`
  Stop int32 `thrift:"stop,4" db:"stop" json:"stop"`
  Carrier map[string]string `thrift:"carrier,5" db:"carrier" json:"carrier"`
}

func NewUserReviewServiceReadUserReviewsArgs() *UserReviewServiceReadUserReviewsArgs {
  return &UserReviewServiceReadUserReviewsArgs{}
}


func (p *UserReviewServiceReadUserReviewsArgs) GetReqID() int64 {
  return p.ReqID
}

func (p *UserReviewServiceReadUserReviewsArgs) GetUserID() int64 {
  return p.UserID
}

func (p *UserReviewServiceReadUserReviewsArgs) GetStart() int32 {
  return p.Start
}

func (p *UserReviewServiceReadUserReviewsArgs) GetStop() int32 {
  return p.Stop
}

func (p *UserReviewServiceReadUserReviewsArgs) GetCarrier() map[string]string {
  return p.Carrier
}
func (p *UserReviewServiceReadUserReviewsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserReviewServiceReadUserReviewsArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqID = v
}
  return nil
}

func (p *UserReviewServiceReadUserReviewsArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserID = v
}
  return nil
}

func (p *UserReviewServiceReadUserReviewsArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Start = v
}
  return nil
}

func (p *UserReviewServiceReadUserReviewsArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Stop = v
}
  return nil
}

func (p *UserReviewServiceReadUserReviewsArgs)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Carrier =  tMap
  for i := 0; i < size; i ++ {
var _key354 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key354 = v
}
var _val355 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val355 = v
}
    p.Carrier[_key354] = _val355
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *UserReviewServiceReadUserReviewsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ReadUserReviews_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserReviewServiceReadUserReviewsArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ReqID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.req_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req_id: ", p), err) }
  return err
}

func (p *UserReviewServiceReadUserReviewsArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "user_id", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:user_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.UserID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:user_id: ", p), err) }
  return err
}

func (p *UserReviewServiceReadUserReviewsArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "start", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:start: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Start)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.start (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:start: ", p), err) }
  return err
}

func (p *UserReviewServiceReadUserReviewsArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "stop", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:stop: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Stop)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.stop (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:stop: ", p), err) }
  return err
}

func (p *UserReviewServiceReadUserReviewsArgs) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "carrier", thrift.MAP, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:carrier: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.Carrier)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Carrier {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:carrier: ", p), err) }
  return err
}

func (p *UserReviewServiceReadUserReviewsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserReviewServiceReadUserReviewsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Se
type UserReviewServiceReadUserReviewsResult struct {
  Success []*Review `thrift:"success,0" db:"success" json:"success,omitempty"`
  Se *ServiceException `thrift:"se,1" db:"se" json:"se,omitempty"`
}

func NewUserReviewServiceReadUserReviewsResult() *UserReviewServiceReadUserReviewsResult {
  return &UserReviewServiceReadUserReviewsResult{}
}

var UserReviewServiceReadUserReviewsResult_Success_DEFAULT []*Review

func (p *UserReviewServiceReadUserReviewsResult) GetSuccess() []*Review {
  return p.Success
}
var UserReviewServiceReadUserReviewsResult_Se_DEFAULT *ServiceException
func (p *UserReviewServiceReadUserReviewsResult) GetSe() *ServiceException {
  if !p.IsSetSe() {
    return UserReviewServiceReadUserReviewsResult_Se_DEFAULT
  }
return p.Se
}
func (p *UserReviewServiceReadUserReviewsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *UserReviewServiceReadUserReviewsResult) IsSetSe() bool {
  return p.Se != nil
}

func (p *UserReviewServiceReadUserReviewsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserReviewServiceReadUserReviewsResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Review, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem356 := &Review{}
    if err := _elem356.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem356), err)
    }
    p.Success = append(p.Success, _elem356)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *UserReviewServiceReadUserReviewsResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Se = &ServiceException{}
  if err := p.Se.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Se), err)
  }
  return nil
}

func (p *UserReviewServiceReadUserReviewsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ReadUserReviews_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserReviewServiceReadUserReviewsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *UserReviewServiceReadUserReviewsResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSe() {
    if err := oprot.WriteFieldBegin(ctx, "se", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:se: ", p), err) }
    if err := p.Se.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Se), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:se: ", p), err) }
  }
  return err
}

func (p *UserReviewServiceReadUserReviewsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserReviewServiceReadUserReviewsResult(%+v)", *p)
}


type CastInfoService interface {
  // Parameters:
  //  - ReqID
  //  - CastInfoID
  //  - Name
  //  - Gender
  //  - Intro
  //  - Carrier
  WriteCastInfo(ctx context.Context, req_id int64, cast_info_id int64, name string, gender bool, intro string, carrier map[string]string) (_err error)
  // Parameters:
  //  - ReqID
  //  - CastIds
  //  - Carrier
  ReadCastInfo(ctx context.Context, req_id int64, cast_ids []int64, carrier map[string]string) (_r []*CastInfo, _err error)
}

type CastInfoServiceClient struct {
  c thrift.TClient
  meta thrift.ResponseMeta
}

func NewCastInfoServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *CastInfoServiceClient {
  return &CastInfoServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewCastInfoServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *CastInfoServiceClient {
  return &CastInfoServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewCastInfoServiceClient(c thrift.TClient) *CastInfoServiceClient {
  return &CastInfoServiceClient{
    c: c,
  }
}

func (p *CastInfoServiceClient) Client_() thrift.TClient {
  return p.c
}

func (p *CastInfoServiceClient) LastResponseMeta_() thrift.ResponseMeta {
  return p.meta
}

func (p *CastInfoServiceClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
  p.meta = meta
}

// Parameters:
//  - ReqID
//  - CastInfoID
//  - Name
//  - Gender
//  - Intro
//  - Carrier
func (p *CastInfoServiceClient) WriteCastInfo(ctx context.Context, req_id int64, cast_info_id int64, name string, gender bool, intro string, carrier map[string]string) (_err error) {
  var _args377 CastInfoServiceWriteCastInfoArgs
  _args377.ReqID = req_id
  _args377.CastInfoID = cast_info_id
  _args377.Name = name
  _args377.Gender = gender
  _args377.Intro = intro
  _args377.Carrier = carrier
  var _result379 CastInfoServiceWriteCastInfoResult
  var _meta378 thrift.ResponseMeta
  _meta378, _err = p.Client_().Call(ctx, "WriteCastInfo", &_args377, &_result379)
  p.SetLastResponseMeta_(_meta378)
  if _err != nil {
    return
  }
  switch {
  case _result379.Se!= nil:
    return _result379.Se
  }

  return nil
}

// Parameters:
//  - ReqID
//  - CastIds
//  - Carrier
func (p *CastInfoServiceClient) ReadCastInfo(ctx context.Context, req_id int64, cast_ids []int64, carrier map[string]string) (_r []*CastInfo, _err error) {
  var _args380 CastInfoServiceReadCastInfoArgs
  _args380.ReqID = req_id
  _args380.CastIds = cast_ids
  _args380.Carrier = carrier
  var _result382 CastInfoServiceReadCastInfoResult
  var _meta381 thrift.ResponseMeta
  _meta381, _err = p.Client_().Call(ctx, "ReadCastInfo", &_args380, &_result382)
  p.SetLastResponseMeta_(_meta381)
  if _err != nil {
    return
  }
  switch {
  case _result382.Se!= nil:
    return _r, _result382.Se
  }

  return _result382.GetSuccess(), nil
}

type CastInfoServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler CastInfoService
}

func (p *CastInfoServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *CastInfoServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *CastInfoServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewCastInfoServiceProcessor(handler CastInfoService) *CastInfoServiceProcessor {

  self383 := &CastInfoServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self383.processorMap["WriteCastInfo"] = &castInfoServiceProcessorWriteCastInfo{handler:handler}
  self383.processorMap["ReadCastInfo"] = &castInfoServiceProcessorReadCastInfo{handler:handler}
return self383
}

func (p *CastInfoServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
  if err2 != nil { return false, thrift.WrapTException(err2) }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(ctx, thrift.STRUCT)
  iprot.ReadMessageEnd(ctx)
  x384 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
  x384.Write(ctx, oprot)
  oprot.WriteMessageEnd(ctx)
  oprot.Flush(ctx)
  return false, x384

}

type castInfoServiceProcessorWriteCastInfo struct {
  handler CastInfoService
}

func (p *castInfoServiceProcessorWriteCastInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err385 error
  args := CastInfoServiceWriteCastInfoArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "WriteCastInfo", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := CastInfoServiceWriteCastInfoResult{}
  if err2 := p.handler.WriteCastInfo(ctx, args.ReqID, args.CastInfoID, args.Name, args.Gender, args.Intro, args.Carrier); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    switch v := err2.(type) {
    case *ServiceException:
      result.Se = v
    default:
      if errors.Is(err2, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err2)
      }
      if errors.Is(err2, context.Canceled) {
        if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
          return false, thrift.WrapTException(err)
        }
      }
      _exc386 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing WriteCastInfo: " + err2.Error())
      if err2 := oprot.WriteMessageBegin(ctx, "WriteCastInfo", thrift.EXCEPTION, seqId); err2 != nil {
        _write_err385 = thrift.WrapTException(err2)
      }
      if err2 := _exc386.Write(ctx, oprot); _write_err385 == nil && err2 != nil {
        _write_err385 = thrift.WrapTException(err2)
      }
      if err2 := oprot.WriteMessageEnd(ctx); _write_err385 == nil && err2 != nil {
        _write_err385 = thrift.WrapTException(err2)
      }
      if err2 := oprot.Flush(ctx); _write_err385 == nil && err2 != nil {
        _write_err385 = thrift.WrapTException(err2)
      }
      if _write_err385 != nil {
        return false, thrift.WrapTException(_write_err385)
      }
      return true, err
    }
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "WriteCastInfo", thrift.REPLY, seqId); err2 != nil {
    _write_err385 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err385 == nil && err2 != nil {
    _write_err385 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err385 == nil && err2 != nil {
    _write_err385 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err385 == nil && err2 != nil {
    _write_err385 = thrift.WrapTException(err2)
  }
  if _write_err385 != nil {
    return false, thrift.WrapTException(_write_err385)
  }
  return true, err
}

type castInfoServiceProcessorReadCastInfo struct {
  handler CastInfoService
}

func (p *castInfoServiceProcessorReadCastInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err387 error
  args := CastInfoServiceReadCastInfoArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "ReadCastInfo", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := CastInfoServiceReadCastInfoResult{}
  if retval, err2 := p.handler.ReadCastInfo(ctx, args.ReqID, args.CastIds, args.Carrier); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    switch v := err2.(type) {
    case *ServiceException:
      result.Se = v
    default:
      if errors.Is(err2, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err2)
      }
      if errors.Is(err2, context.Canceled) {
        if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
          return false, thrift.WrapTException(err)
        }
      }
      _exc388 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ReadCastInfo: " + err2.Error())
      if err2 := oprot.WriteMessageBegin(ctx, "ReadCastInfo", thrift.EXCEPTION, seqId); err2 != nil {
        _write_err387 = thrift.WrapTException(err2)
      }
      if err2 := _exc388.Write(ctx, oprot); _write_err387 == nil && err2 != nil {
        _write_err387 = thrift.WrapTException(err2)
      }
      if err2 := oprot.WriteMessageEnd(ctx); _write_err387 == nil && err2 != nil {
        _write_err387 = thrift.WrapTException(err2)
      }
      if err2 := oprot.Flush(ctx); _write_err387 == nil && err2 != nil {
        _write_err387 = thrift.WrapTException(err2)
      }
      if _write_err387 != nil {
        return false, thrift.WrapTException(_write_err387)
      }
      return true, err
    }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "ReadCastInfo", thrift.REPLY, seqId); err2 != nil {
    _write_err387 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err387 == nil && err2 != nil {
    _write_err387 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err387 == nil && err2 != nil {
    _write_err387 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err387 == nil && err2 != nil {
    _write_err387 = thrift.WrapTException(err2)
  }
  if _write_err387 != nil {
    return false, thrift.WrapTException(_write_err387)
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - ReqID
//  - CastInfoID
//  - Name
//  - Gender
//  - Intro
//  - Carrier
type CastInfoServiceWriteCastInfoArgs struct {
  ReqID int64 `thrift:"req_id,1" db:"req_id" json:"req_id"`
  CastInfoID int64 `thrift:"cast_info_id,2" db:"cast_info_id" json:"cast_info_id"`
  Name string `thrift:"name,3" db:"name" json:"name"`
  Gender bool `thrift:"gender,4" db:"gender" json:"gender"`
  Intro string `thrift:"intro,5" db:"intro" json:"intro"`
  Carrier map[string]string `thrift:"carrier,6" db:"carrier" json:"carrier"`
}

func NewCastInfoServiceWriteCastInfoArgs() *CastInfoServiceWriteCastInfoArgs {
  return &CastInfoServiceWriteCastInfoArgs{}
}


func (p *CastInfoServiceWriteCastInfoArgs) GetReqID() int64 {
  return p.ReqID
}

func (p *CastInfoServiceWriteCastInfoArgs) GetCastInfoID() int64 {
  return p.CastInfoID
}

func (p *CastInfoServiceWriteCastInfoArgs) GetName() string {
  return p.Name
}

func (p *CastInfoServiceWriteCastInfoArgs) GetGender() bool {
  return p.Gender
}

func (p *CastInfoServiceWriteCastInfoArgs) GetIntro() string {
  return p.Intro
}

func (p *CastInfoServiceWriteCastInfoArgs) GetCarrier() map[string]string {
  return p.Carrier
}
func (p *CastInfoServiceWriteCastInfoArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CastInfoServiceWriteCastInfoArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqID = v
}
  return nil
}

func (p *CastInfoServiceWriteCastInfoArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.CastInfoID = v
}
  return nil
}

func (p *CastInfoServiceWriteCastInfoArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *CastInfoServiceWriteCastInfoArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Gender = v
}
  return nil
}

func (p *CastInfoServiceWriteCastInfoArgs)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Intro = v
}
  return nil
}

func (p *CastInfoServiceWriteCastInfoArgs)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Carrier =  tMap
  for i := 0; i < size; i ++ {
var _key389 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key389 = v
}
var _val390 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val390 = v
}
    p.Carrier[_key389] = _val390
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *CastInfoServiceWriteCastInfoArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "WriteCastInfo_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CastInfoServiceWriteCastInfoArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ReqID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.req_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req_id: ", p), err) }
  return err
}

func (p *CastInfoServiceWriteCastInfoArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "cast_info_id", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:cast_info_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.CastInfoID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.cast_info_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:cast_info_id: ", p), err) }
  return err
}

func (p *CastInfoServiceWriteCastInfoArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:name: ", p), err) }
  return err
}

func (p *CastInfoServiceWriteCastInfoArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "gender", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:gender: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.Gender)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gender (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:gender: ", p), err) }
  return err
}

func (p *CastInfoServiceWriteCastInfoArgs) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "intro", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:intro: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Intro)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.intro (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:intro: ", p), err) }
  return err
}

func (p *CastInfoServiceWriteCastInfoArgs) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "carrier", thrift.MAP, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:carrier: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.Carrier)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Carrier {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:carrier: ", p), err) }
  return err
}

func (p *CastInfoServiceWriteCastInfoArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CastInfoServiceWriteCastInfoArgs(%+v)", *p)
}

// Attributes:
//  - Se
type CastInfoServiceWriteCastInfoResult struct {
  Se *ServiceException `thrift:"se,1" db:"se" json:"se,omitempty"`
}

func NewCastInfoServiceWriteCastInfoResult() *CastInfoServiceWriteCastInfoResult {
  return &CastInfoServiceWriteCastInfoResult{}
}

var CastInfoServiceWriteCastInfoResult_Se_DEFAULT *ServiceException
func (p *CastInfoServiceWriteCastInfoResult) GetSe() *ServiceException {
  if !p.IsSetSe() {
    return CastInfoServiceWriteCastInfoResult_Se_DEFAULT
  }
return p.Se
}
func (p *CastInfoServiceWriteCastInfoResult) IsSetSe() bool {
  return p.Se != nil
}

func (p *CastInfoServiceWriteCastInfoResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CastInfoServiceWriteCastInfoResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Se = &ServiceException{}
  if err := p.Se.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Se), err)
  }
  return nil
}

func (p *CastInfoServiceWriteCastInfoResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "WriteCastInfo_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CastInfoServiceWriteCastInfoResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSe() {
    if err := oprot.WriteFieldBegin(ctx, "se", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:se: ", p), err) }
    if err := p.Se.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Se), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:se: ", p), err) }
  }
  return err
}

func (p *CastInfoServiceWriteCastInfoResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CastInfoServiceWriteCastInfoResult(%+v)", *p)
}

// Attributes:
//  - ReqID
//  - CastIds
//  - Carrier
type CastInfoServiceReadCastInfoArgs struct {
  ReqID int64 `thrift:"req_id,1" db:"req_id" json:"req_id"`
  CastIds []int64 `thrift:"cast_ids,2" db:"cast_ids" json:"cast_ids"`
  Carrier map[string]string `thrift:"carrier,3" db:"carrier" json:"carrier"`
}

func NewCastInfoServiceReadCastInfoArgs() *CastInfoServiceReadCastInfoArgs {
  return &CastInfoServiceReadCastInfoArgs{}
}


func (p *CastInfoServiceReadCastInfoArgs) GetReqID() int64 {
  return p.ReqID
}

func (p *CastInfoServiceReadCastInfoArgs) GetCastIds() []int64 {
  return p.CastIds
}

func (p *CastInfoServiceReadCastInfoArgs) GetCarrier() map[string]string {
  return p.Carrier
}
func (p *CastInfoServiceReadCastInfoArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CastInfoServiceReadCastInfoArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqID = v
}
  return nil
}

func (p *CastInfoServiceReadCastInfoArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int64, 0, size)
  p.CastIds =  tSlice
  for i := 0; i < size; i ++ {
var _elem391 int64
    if v, err := iprot.ReadI64(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem391 = v
}
    p.CastIds = append(p.CastIds, _elem391)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *CastInfoServiceReadCastInfoArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Carrier =  tMap
  for i := 0; i < size; i ++ {
var _key392 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key392 = v
}
var _val393 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val393 = v
}
    p.Carrier[_key392] = _val393
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *CastInfoServiceReadCastInfoArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ReadCastInfo_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CastInfoServiceReadCastInfoArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ReqID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.req_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req_id: ", p), err) }
  return err
}

func (p *CastInfoServiceReadCastInfoArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "cast_ids", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:cast_ids: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.I64, len(p.CastIds)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.CastIds {
    if err := oprot.WriteI64(ctx, int64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:cast_ids: ", p), err) }
  return err
}

func (p *CastInfoServiceReadCastInfoArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "carrier", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:carrier: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.Carrier)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Carrier {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:carrier: ", p), err) }
  return err
}

func (p *CastInfoServiceReadCastInfoArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CastInfoServiceReadCastInfoArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Se
type CastInfoServiceReadCastInfoResult struct {
  Success []*CastInfo `thrift:"success,0" db:"success" json:"success,omitempty"`
  Se *ServiceException `thrift:"se,1" db:"se" json:"se,omitempty"`
}

func NewCastInfoServiceReadCastInfoResult() *CastInfoServiceReadCastInfoResult {
  return &CastInfoServiceReadCastInfoResult{}
}

var CastInfoServiceReadCastInfoResult_Success_DEFAULT []*CastInfo

func (p *CastInfoServiceReadCastInfoResult) GetSuccess() []*CastInfo {
  return p.Success
}
var CastInfoServiceReadCastInfoResult_Se_DEFAULT *ServiceException
func (p *CastInfoServiceReadCastInfoResult) GetSe() *ServiceException {
  if !p.IsSetSe() {
    return CastInfoServiceReadCastInfoResult_Se_DEFAULT
  }
return p.Se
}
func (p *CastInfoServiceReadCastInfoResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *CastInfoServiceReadCastInfoResult) IsSetSe() bool {
  return p.Se != nil
}

func (p *CastInfoServiceReadCastInfoResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CastInfoServiceReadCastInfoResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*CastInfo, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem394 := &CastInfo{}
    if err := _elem394.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem394), err)
    }
    p.Success = append(p.Success, _elem394)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *CastInfoServiceReadCastInfoResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Se = &ServiceException{}
  if err := p.Se.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Se), err)
  }
  return nil
}

func (p *CastInfoServiceReadCastInfoResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ReadCastInfo_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CastInfoServiceReadCastInfoResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *CastInfoServiceReadCastInfoResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSe() {
    if err := oprot.WriteFieldBegin(ctx, "se", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:se: ", p), err) }
    if err := p.Se.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Se), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:se: ", p), err) }
  }
  return err
}

func (p *CastInfoServiceReadCastInfoResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CastInfoServiceReadCastInfoResult(%+v)", *p)
}


type PlotService interface {
  // Parameters:
  //  - ReqID
  //  - PlotID
  //  - Plot
  //  - Carrier
  WritePlot(ctx context.Context, req_id int64, plot_id int64, plot string, carrier map[string]string) (_err error)
  // Parameters:
  //  - ReqID
  //  - PlotID
  //  - Carrier
  ReadPlot(ctx context.Context, req_id int64, plot_id int64, carrier map[string]string) (_r string, _err error)
}

type PlotServiceClient struct {
  c thrift.TClient
  meta thrift.ResponseMeta
}

func NewPlotServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *PlotServiceClient {
  return &PlotServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewPlotServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *PlotServiceClient {
  return &PlotServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewPlotServiceClient(c thrift.TClient) *PlotServiceClient {
  return &PlotServiceClient{
    c: c,
  }
}

func (p *PlotServiceClient) Client_() thrift.TClient {
  return p.c
}

func (p *PlotServiceClient) LastResponseMeta_() thrift.ResponseMeta {
  return p.meta
}

func (p *PlotServiceClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
  p.meta = meta
}

// Parameters:
//  - ReqID
//  - PlotID
//  - Plot
//  - Carrier
func (p *PlotServiceClient) WritePlot(ctx context.Context, req_id int64, plot_id int64, plot string, carrier map[string]string) (_err error) {
  var _args419 PlotServiceWritePlotArgs
  _args419.ReqID = req_id
  _args419.PlotID = plot_id
  _args419.Plot = plot
  _args419.Carrier = carrier
  var _result421 PlotServiceWritePlotResult
  var _meta420 thrift.ResponseMeta
  _meta420, _err = p.Client_().Call(ctx, "WritePlot", &_args419, &_result421)
  p.SetLastResponseMeta_(_meta420)
  if _err != nil {
    return
  }
  switch {
  case _result421.Se!= nil:
    return _result421.Se
  }

  return nil
}

// Parameters:
//  - ReqID
//  - PlotID
//  - Carrier
func (p *PlotServiceClient) ReadPlot(ctx context.Context, req_id int64, plot_id int64, carrier map[string]string) (_r string, _err error) {
  var _args422 PlotServiceReadPlotArgs
  _args422.ReqID = req_id
  _args422.PlotID = plot_id
  _args422.Carrier = carrier
  var _result424 PlotServiceReadPlotResult
  var _meta423 thrift.ResponseMeta
  _meta423, _err = p.Client_().Call(ctx, "ReadPlot", &_args422, &_result424)
  p.SetLastResponseMeta_(_meta423)
  if _err != nil {
    return
  }
  switch {
  case _result424.Se!= nil:
    return _r, _result424.Se
  }

  return _result424.GetSuccess(), nil
}

type PlotServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler PlotService
}

func (p *PlotServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *PlotServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *PlotServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewPlotServiceProcessor(handler PlotService) *PlotServiceProcessor {

  self425 := &PlotServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self425.processorMap["WritePlot"] = &plotServiceProcessorWritePlot{handler:handler}
  self425.processorMap["ReadPlot"] = &plotServiceProcessorReadPlot{handler:handler}
return self425
}

func (p *PlotServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
  if err2 != nil { return false, thrift.WrapTException(err2) }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(ctx, thrift.STRUCT)
  iprot.ReadMessageEnd(ctx)
  x426 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
  x426.Write(ctx, oprot)
  oprot.WriteMessageEnd(ctx)
  oprot.Flush(ctx)
  return false, x426

}

type plotServiceProcessorWritePlot struct {
  handler PlotService
}

func (p *plotServiceProcessorWritePlot) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err427 error
  args := PlotServiceWritePlotArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "WritePlot", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := PlotServiceWritePlotResult{}
  if err2 := p.handler.WritePlot(ctx, args.ReqID, args.PlotID, args.Plot, args.Carrier); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    switch v := err2.(type) {
    case *ServiceException:
      result.Se = v
    default:
      if errors.Is(err2, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err2)
      }
      if errors.Is(err2, context.Canceled) {
        if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
          return false, thrift.WrapTException(err)
        }
      }
      _exc428 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing WritePlot: " + err2.Error())
      if err2 := oprot.WriteMessageBegin(ctx, "WritePlot", thrift.EXCEPTION, seqId); err2 != nil {
        _write_err427 = thrift.WrapTException(err2)
      }
      if err2 := _exc428.Write(ctx, oprot); _write_err427 == nil && err2 != nil {
        _write_err427 = thrift.WrapTException(err2)
      }
      if err2 := oprot.WriteMessageEnd(ctx); _write_err427 == nil && err2 != nil {
        _write_err427 = thrift.WrapTException(err2)
      }
      if err2 := oprot.Flush(ctx); _write_err427 == nil && err2 != nil {
        _write_err427 = thrift.WrapTException(err2)
      }
      if _write_err427 != nil {
        return false, thrift.WrapTException(_write_err427)
      }
      return true, err
    }
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "WritePlot", thrift.REPLY, seqId); err2 != nil {
    _write_err427 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err427 == nil && err2 != nil {
    _write_err427 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err427 == nil && err2 != nil {
    _write_err427 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err427 == nil && err2 != nil {
    _write_err427 = thrift.WrapTException(err2)
  }
  if _write_err427 != nil {
    return false, thrift.WrapTException(_write_err427)
  }
  return true, err
}

type plotServiceProcessorReadPlot struct {
  handler PlotService
}

func (p *plotServiceProcessorReadPlot) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err429 error
  args := PlotServiceReadPlotArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "ReadPlot", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := PlotServiceReadPlotResult{}
  if retval, err2 := p.handler.ReadPlot(ctx, args.ReqID, args.PlotID, args.Carrier); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    switch v := err2.(type) {
    case *ServiceException:
      result.Se = v
    default:
      if errors.Is(err2, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err2)
      }
      if errors.Is(err2, context.Canceled) {
        if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
          return false, thrift.WrapTException(err)
        }
      }
      _exc430 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ReadPlot: " + err2.Error())
      if err2 := oprot.WriteMessageBegin(ctx, "ReadPlot", thrift.EXCEPTION, seqId); err2 != nil {
        _write_err429 = thrift.WrapTException(err2)
      }
      if err2 := _exc430.Write(ctx, oprot); _write_err429 == nil && err2 != nil {
        _write_err429 = thrift.WrapTException(err2)
      }
      if err2 := oprot.WriteMessageEnd(ctx); _write_err429 == nil && err2 != nil {
        _write_err429 = thrift.WrapTException(err2)
      }
      if err2 := oprot.Flush(ctx); _write_err429 == nil && err2 != nil {
        _write_err429 = thrift.WrapTException(err2)
      }
      if _write_err429 != nil {
        return false, thrift.WrapTException(_write_err429)
      }
      return true, err
    }
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "ReadPlot", thrift.REPLY, seqId); err2 != nil {
    _write_err429 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err429 == nil && err2 != nil {
    _write_err429 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err429 == nil && err2 != nil {
    _write_err429 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err429 == nil && err2 != nil {
    _write_err429 = thrift.WrapTException(err2)
  }
  if _write_err429 != nil {
    return false, thrift.WrapTException(_write_err429)
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - ReqID
//  - PlotID
//  - Plot
//  - Carrier
type PlotServiceWritePlotArgs struct {
  ReqID int64 `thrift:"req_id,1" db:"req_id" json:"req_id"`
  PlotID int64 `thrift:"plot_id,2" db:"plot_id" json:"plot_id"`
  Plot string `thrift:"plot,3" db:"plot" json:"plot"`
  Carrier map[string]string `thrift:"carrier,4" db:"carrier" json:"carrier"`
}

func NewPlotServiceWritePlotArgs() *PlotServiceWritePlotArgs {
  return &PlotServiceWritePlotArgs{}
}


func (p *PlotServiceWritePlotArgs) GetReqID() int64 {
  return p.ReqID
}

func (p *PlotServiceWritePlotArgs) GetPlotID() int64 {
  return p.PlotID
}

func (p *PlotServiceWritePlotArgs) GetPlot() string {
  return p.Plot
}

func (p *PlotServiceWritePlotArgs) GetCarrier() map[string]string {
  return p.Carrier
}
func (p *PlotServiceWritePlotArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PlotServiceWritePlotArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqID = v
}
  return nil
}

func (p *PlotServiceWritePlotArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.PlotID = v
}
  return nil
}

func (p *PlotServiceWritePlotArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Plot = v
}
  return nil
}

func (p *PlotServiceWritePlotArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Carrier =  tMap
  for i := 0; i < size; i ++ {
var _key431 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key431 = v
}
var _val432 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val432 = v
}
    p.Carrier[_key431] = _val432
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *PlotServiceWritePlotArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "WritePlot_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PlotServiceWritePlotArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ReqID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.req_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req_id: ", p), err) }
  return err
}

func (p *PlotServiceWritePlotArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "plot_id", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:plot_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.PlotID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.plot_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:plot_id: ", p), err) }
  return err
}

func (p *PlotServiceWritePlotArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "plot", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:plot: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Plot)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.plot (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:plot: ", p), err) }
  return err
}

func (p *PlotServiceWritePlotArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "carrier", thrift.MAP, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:carrier: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.Carrier)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Carrier {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:carrier: ", p), err) }
  return err
}

func (p *PlotServiceWritePlotArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PlotServiceWritePlotArgs(%+v)", *p)
}

// Attributes:
//  - Se
type PlotServiceWritePlotResult struct {
  Se *ServiceException `thrift:"se,1" db:"se" json:"se,omitempty"`
}

func NewPlotServiceWritePlotResult() *PlotServiceWritePlotResult {
  return &PlotServiceWritePlotResult{}
}

var PlotServiceWritePlotResult_Se_DEFAULT *ServiceException
func (p *PlotServiceWritePlotResult) GetSe() *ServiceException {
  if !p.IsSetSe() {
    return PlotServiceWritePlotResult_Se_DEFAULT
  }
return p.Se
}
func (p *PlotServiceWritePlotResult) IsSetSe() bool {
  return p.Se != nil
}

func (p *PlotServiceWritePlotResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PlotServiceWritePlotResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Se = &ServiceException{}
  if err := p.Se.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Se), err)
  }
  return nil
}

func (p *PlotServiceWritePlotResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "WritePlot_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PlotServiceWritePlotResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSe() {
    if err := oprot.WriteFieldBegin(ctx, "se", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:se: ", p), err) }
    if err := p.Se.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Se), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:se: ", p), err) }
  }
  return err
}

func (p *PlotServiceWritePlotResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PlotServiceWritePlotResult(%+v)", *p)
}

// Attributes:
//  - ReqID
//  - PlotID
//  - Carrier
type PlotServiceReadPlotArgs struct {
  ReqID int64 `thrift:"req_id,1" db:"req_id" json:"req_id"`
  PlotID int64 `thrift:"plot_id,2" db:"plot_id" json:"plot_id"`
  Carrier map[string]string `thrift:"carrier,3" db:"carrier" json:"carrier"`
}

func NewPlotServiceReadPlotArgs() *PlotServiceReadPlotArgs {
  return &PlotServiceReadPlotArgs{}
}


func (p *PlotServiceReadPlotArgs) GetReqID() int64 {
  return p.ReqID
}

func (p *PlotServiceReadPlotArgs) GetPlotID() int64 {
  return p.PlotID
}

func (p *PlotServiceReadPlotArgs) GetCarrier() map[string]string {
  return p.Carrier
}
func (p *PlotServiceReadPlotArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PlotServiceReadPlotArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqID = v
}
  return nil
}

func (p *PlotServiceReadPlotArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.PlotID = v
}
  return nil
}

func (p *PlotServiceReadPlotArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Carrier =  tMap
  for i := 0; i < size; i ++ {
var _key433 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key433 = v
}
var _val434 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val434 = v
}
    p.Carrier[_key433] = _val434
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *PlotServiceReadPlotArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ReadPlot_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PlotServiceReadPlotArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ReqID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.req_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req_id: ", p), err) }
  return err
}

func (p *PlotServiceReadPlotArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "plot_id", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:plot_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.PlotID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.plot_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:plot_id: ", p), err) }
  return err
}

func (p *PlotServiceReadPlotArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "carrier", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:carrier: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.Carrier)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Carrier {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:carrier: ", p), err) }
  return err
}

func (p *PlotServiceReadPlotArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PlotServiceReadPlotArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Se
type PlotServiceReadPlotResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  Se *ServiceException `thrift:"se,1" db:"se" json:"se,omitempty"`
}

func NewPlotServiceReadPlotResult() *PlotServiceReadPlotResult {
  return &PlotServiceReadPlotResult{}
}

var PlotServiceReadPlotResult_Success_DEFAULT string
func (p *PlotServiceReadPlotResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return PlotServiceReadPlotResult_Success_DEFAULT
  }
return *p.Success
}
var PlotServiceReadPlotResult_Se_DEFAULT *ServiceException
func (p *PlotServiceReadPlotResult) GetSe() *ServiceException {
  if !p.IsSetSe() {
    return PlotServiceReadPlotResult_Se_DEFAULT
  }
return p.Se
}
func (p *PlotServiceReadPlotResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *PlotServiceReadPlotResult) IsSetSe() bool {
  return p.Se != nil
}

func (p *PlotServiceReadPlotResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PlotServiceReadPlotResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *PlotServiceReadPlotResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Se = &ServiceException{}
  if err := p.Se.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Se), err)
  }
  return nil
}

func (p *PlotServiceReadPlotResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ReadPlot_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PlotServiceReadPlotResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *PlotServiceReadPlotResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSe() {
    if err := oprot.WriteFieldBegin(ctx, "se", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:se: ", p), err) }
    if err := p.Se.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Se), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:se: ", p), err) }
  }
  return err
}

func (p *PlotServiceReadPlotResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PlotServiceReadPlotResult(%+v)", *p)
}


type MovieInfoService interface {
  // Parameters:
  //  - ReqID
  //  - MovieID
  //  - Title
  //  - Casts
  //  - PlotID
  //  - ThumbnailIds
  //  - PhotoIds
  //  - VideoIds
  //  - AvgRating
  //  - NumRating
  //  - Carrier
  WriteMovieInfo(ctx context.Context, req_id int64, movie_id string, title string, casts []*Cast, plot_id int64, thumbnail_ids []string, photo_ids []string, video_ids []string, avg_rating string, num_rating int32, carrier map[string]string) (_err error)
  // Parameters:
  //  - ReqID
  //  - MovieID
  //  - Carrier
  ReadMovieInfo(ctx context.Context, req_id int64, movie_id string, carrier map[string]string) (_r *MovieInfo, _err error)
  // Parameters:
  //  - ReqID
  //  - MovieID
  //  - SumUncommittedRating
  //  - NumUncommittedRating
  //  - Carrier
  UpdateRating(ctx context.Context, req_id int64, movie_id string, sum_uncommitted_rating int32, num_uncommitted_rating int32, carrier map[string]string) (_err error)
}

type MovieInfoServiceClient struct {
  c thrift.TClient
  meta thrift.ResponseMeta
}

func NewMovieInfoServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *MovieInfoServiceClient {
  return &MovieInfoServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewMovieInfoServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *MovieInfoServiceClient {
  return &MovieInfoServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewMovieInfoServiceClient(c thrift.TClient) *MovieInfoServiceClient {
  return &MovieInfoServiceClient{
    c: c,
  }
}

func (p *MovieInfoServiceClient) Client_() thrift.TClient {
  return p.c
}

func (p *MovieInfoServiceClient) LastResponseMeta_() thrift.ResponseMeta {
  return p.meta
}

func (p *MovieInfoServiceClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
  p.meta = meta
}

// Parameters:
//  - ReqID
//  - MovieID
//  - Title
//  - Casts
//  - PlotID
//  - ThumbnailIds
//  - PhotoIds
//  - VideoIds
//  - AvgRating
//  - NumRating
//  - Carrier
func (p *MovieInfoServiceClient) WriteMovieInfo(ctx context.Context, req_id int64, movie_id string, title string, casts []*Cast, plot_id int64, thumbnail_ids []string, photo_ids []string, video_ids []string, avg_rating string, num_rating int32, carrier map[string]string) (_err error) {
  var _args452 MovieInfoServiceWriteMovieInfoArgs
  _args452.ReqID = req_id
  _args452.MovieID = movie_id
  _args452.Title = title
  _args452.Casts = casts
  _args452.PlotID = plot_id
  _args452.ThumbnailIds = thumbnail_ids
  _args452.PhotoIds = photo_ids
  _args452.VideoIds = video_ids
  _args452.AvgRating = avg_rating
  _args452.NumRating = num_rating
  _args452.Carrier = carrier
  var _result454 MovieInfoServiceWriteMovieInfoResult
  var _meta453 thrift.ResponseMeta
  _meta453, _err = p.Client_().Call(ctx, "WriteMovieInfo", &_args452, &_result454)
  p.SetLastResponseMeta_(_meta453)
  if _err != nil {
    return
  }
  switch {
  case _result454.Se!= nil:
    return _result454.Se
  }

  return nil
}

// Parameters:
//  - ReqID
//  - MovieID
//  - Carrier
func (p *MovieInfoServiceClient) ReadMovieInfo(ctx context.Context, req_id int64, movie_id string, carrier map[string]string) (_r *MovieInfo, _err error) {
  var _args455 MovieInfoServiceReadMovieInfoArgs
  _args455.ReqID = req_id
  _args455.MovieID = movie_id
  _args455.Carrier = carrier
  var _result457 MovieInfoServiceReadMovieInfoResult
  var _meta456 thrift.ResponseMeta
  _meta456, _err = p.Client_().Call(ctx, "ReadMovieInfo", &_args455, &_result457)
  p.SetLastResponseMeta_(_meta456)
  if _err != nil {
    return
  }
  switch {
  case _result457.Se!= nil:
    return _r, _result457.Se
  }

  if _ret458 := _result457.GetSuccess(); _ret458 != nil {
    return _ret458, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "ReadMovieInfo failed: unknown result")
}

// Parameters:
//  - ReqID
//  - MovieID
//  - SumUncommittedRating
//  - NumUncommittedRating
//  - Carrier
func (p *MovieInfoServiceClient) UpdateRating(ctx context.Context, req_id int64, movie_id string, sum_uncommitted_rating int32, num_uncommitted_rating int32, carrier map[string]string) (_err error) {
  var _args459 MovieInfoServiceUpdateRatingArgs
  _args459.ReqID = req_id
  _args459.MovieID = movie_id
  _args459.SumUncommittedRating = sum_uncommitted_rating
  _args459.NumUncommittedRating = num_uncommitted_rating
  _args459.Carrier = carrier
  var _result461 MovieInfoServiceUpdateRatingResult
  var _meta460 thrift.ResponseMeta
  _meta460, _err = p.Client_().Call(ctx, "UpdateRating", &_args459, &_result461)
  p.SetLastResponseMeta_(_meta460)
  if _err != nil {
    return
  }
  switch {
  case _result461.Se!= nil:
    return _result461.Se
  }

  return nil
}

type MovieInfoServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler MovieInfoService
}

func (p *MovieInfoServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *MovieInfoServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *MovieInfoServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewMovieInfoServiceProcessor(handler MovieInfoService) *MovieInfoServiceProcessor {

  self462 := &MovieInfoServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self462.processorMap["WriteMovieInfo"] = &movieInfoServiceProcessorWriteMovieInfo{handler:handler}
  self462.processorMap["ReadMovieInfo"] = &movieInfoServiceProcessorReadMovieInfo{handler:handler}
  self462.processorMap["UpdateRating"] = &movieInfoServiceProcessorUpdateRating{handler:handler}
return self462
}

func (p *MovieInfoServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
  if err2 != nil { return false, thrift.WrapTException(err2) }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(ctx, thrift.STRUCT)
  iprot.ReadMessageEnd(ctx)
  x463 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
  x463.Write(ctx, oprot)
  oprot.WriteMessageEnd(ctx)
  oprot.Flush(ctx)
  return false, x463

}

type movieInfoServiceProcessorWriteMovieInfo struct {
  handler MovieInfoService
}

func (p *movieInfoServiceProcessorWriteMovieInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err464 error
  args := MovieInfoServiceWriteMovieInfoArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "WriteMovieInfo", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := MovieInfoServiceWriteMovieInfoResult{}
  if err2 := p.handler.WriteMovieInfo(ctx, args.ReqID, args.MovieID, args.Title, args.Casts, args.PlotID, args.ThumbnailIds, args.PhotoIds, args.VideoIds, args.AvgRating, args.NumRating, args.Carrier); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    switch v := err2.(type) {
    case *ServiceException:
      result.Se = v
    default:
      if errors.Is(err2, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err2)
      }
      if errors.Is(err2, context.Canceled) {
        if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
          return false, thrift.WrapTException(err)
        }
      }
      _exc465 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing WriteMovieInfo: " + err2.Error())
      if err2 := oprot.WriteMessageBegin(ctx, "WriteMovieInfo", thrift.EXCEPTION, seqId); err2 != nil {
        _write_err464 = thrift.WrapTException(err2)
      }
      if err2 := _exc465.Write(ctx, oprot); _write_err464 == nil && err2 != nil {
        _write_err464 = thrift.WrapTException(err2)
      }
      if err2 := oprot.WriteMessageEnd(ctx); _write_err464 == nil && err2 != nil {
        _write_err464 = thrift.WrapTException(err2)
      }
      if err2 := oprot.Flush(ctx); _write_err464 == nil && err2 != nil {
        _write_err464 = thrift.WrapTException(err2)
      }
      if _write_err464 != nil {
        return false, thrift.WrapTException(_write_err464)
      }
      return true, err
    }
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "WriteMovieInfo", thrift.REPLY, seqId); err2 != nil {
    _write_err464 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err464 == nil && err2 != nil {
    _write_err464 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err464 == nil && err2 != nil {
    _write_err464 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err464 == nil && err2 != nil {
    _write_err464 = thrift.WrapTException(err2)
  }
  if _write_err464 != nil {
    return false, thrift.WrapTException(_write_err464)
  }
  return true, err
}

type movieInfoServiceProcessorReadMovieInfo struct {
  handler MovieInfoService
}

func (p *movieInfoServiceProcessorReadMovieInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err466 error
  args := MovieInfoServiceReadMovieInfoArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "ReadMovieInfo", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := MovieInfoServiceReadMovieInfoResult{}
  if retval, err2 := p.handler.ReadMovieInfo(ctx, args.ReqID, args.MovieID, args.Carrier); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    switch v := err2.(type) {
    case *ServiceException:
      result.Se = v
    default:
      if errors.Is(err2, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err2)
      }
      if errors.Is(err2, context.Canceled) {
        if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
          return false, thrift.WrapTException(err)
        }
      }
      _exc467 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ReadMovieInfo: " + err2.Error())
      if err2 := oprot.WriteMessageBegin(ctx, "ReadMovieInfo", thrift.EXCEPTION, seqId); err2 != nil {
        _write_err466 = thrift.WrapTException(err2)
      }
      if err2 := _exc467.Write(ctx, oprot); _write_err466 == nil && err2 != nil {
        _write_err466 = thrift.WrapTException(err2)
      }
      if err2 := oprot.WriteMessageEnd(ctx); _write_err466 == nil && err2 != nil {
        _write_err466 = thrift.WrapTException(err2)
      }
      if err2 := oprot.Flush(ctx); _write_err466 == nil && err2 != nil {
        _write_err466 = thrift.WrapTException(err2)
      }
      if _write_err466 != nil {
        return false, thrift.WrapTException(_write_err466)
      }
      return true, err
    }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "ReadMovieInfo", thrift.REPLY, seqId); err2 != nil {
    _write_err466 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err466 == nil && err2 != nil {
    _write_err466 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err466 == nil && err2 != nil {
    _write_err466 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err466 == nil && err2 != nil {
    _write_err466 = thrift.WrapTException(err2)
  }
  if _write_err466 != nil {
    return false, thrift.WrapTException(_write_err466)
  }
  return true, err
}

type movieInfoServiceProcessorUpdateRating struct {
  handler MovieInfoService
}

func (p *movieInfoServiceProcessorUpdateRating) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err468 error
  args := MovieInfoServiceUpdateRatingArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "UpdateRating", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := MovieInfoServiceUpdateRatingResult{}
  if err2 := p.handler.UpdateRating(ctx, args.ReqID, args.MovieID, args.SumUncommittedRating, args.NumUncommittedRating, args.Carrier); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    switch v := err2.(type) {
    case *ServiceException:
      result.Se = v
    default:
      if errors.Is(err2, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err2)
      }
      if errors.Is(err2, context.Canceled) {
        if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
          return false, thrift.WrapTException(err)
        }
      }
      _exc469 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateRating: " + err2.Error())
      if err2 := oprot.WriteMessageBegin(ctx, "UpdateRating", thrift.EXCEPTION, seqId); err2 != nil {
        _write_err468 = thrift.WrapTException(err2)
      }
      if err2 := _exc469.Write(ctx, oprot); _write_err468 == nil && err2 != nil {
        _write_err468 = thrift.WrapTException(err2)
      }
      if err2 := oprot.WriteMessageEnd(ctx); _write_err468 == nil && err2 != nil {
        _write_err468 = thrift.WrapTException(err2)
      }
      if err2 := oprot.Flush(ctx); _write_err468 == nil && err2 != nil {
        _write_err468 = thrift.WrapTException(err2)
      }
      if _write_err468 != nil {
        return false, thrift.WrapTException(_write_err468)
      }
      return true, err
    }
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "UpdateRating", thrift.REPLY, seqId); err2 != nil {
    _write_err468 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err468 == nil && err2 != nil {
    _write_err468 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err468 == nil && err2 != nil {
    _write_err468 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err468 == nil && err2 != nil {
    _write_err468 = thrift.WrapTException(err2)
  }
  if _write_err468 != nil {
    return false, thrift.WrapTException(_write_err468)
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - ReqID
//  - MovieID
//  - Title
//  - Casts
//  - PlotID
//  - ThumbnailIds
//  - PhotoIds
//  - VideoIds
//  - AvgRating
//  - NumRating
//  - Carrier
type MovieInfoServiceWriteMovieInfoArgs struct {
  ReqID int64 `thrift:"req_id,1" db:"req_id" json:"req_id"`
  MovieID string `thrift:"movie_id,2" db:"movie_id" json:"movie_id"`
  Title string `thrift:"title,3" db:"title" json:"title"`
  Casts []*Cast `thrift:"casts,4" db:"casts" json:"casts"`
  PlotID int64 `thrift:"plot_id,5" db:"plot_id" json:"plot_id"`
  ThumbnailIds []string `thrift:"thumbnail_ids,6" db:"thumbnail_ids" json:"thumbnail_ids"`
  PhotoIds []string `thrift:"photo_ids,7" db:"photo_ids" json:"photo_ids"`
  VideoIds []string `thrift:"video_ids,8" db:"video_ids" json:"video_ids"`
  AvgRating string `thrift:"avg_rating,9" db:"avg_rating" json:"avg_rating"`
  NumRating int32 `thrift:"num_rating,10" db:"num_rating" json:"num_rating"`
  Carrier map[string]string `thrift:"carrier,11" db:"carrier" json:"carrier"`
}

func NewMovieInfoServiceWriteMovieInfoArgs() *MovieInfoServiceWriteMovieInfoArgs {
  return &MovieInfoServiceWriteMovieInfoArgs{}
}


func (p *MovieInfoServiceWriteMovieInfoArgs) GetReqID() int64 {
  return p.ReqID
}

func (p *MovieInfoServiceWriteMovieInfoArgs) GetMovieID() string {
  return p.MovieID
}

func (p *MovieInfoServiceWriteMovieInfoArgs) GetTitle() string {
  return p.Title
}

func (p *MovieInfoServiceWriteMovieInfoArgs) GetCasts() []*Cast {
  return p.Casts
}

func (p *MovieInfoServiceWriteMovieInfoArgs) GetPlotID() int64 {
  return p.PlotID
}

func (p *MovieInfoServiceWriteMovieInfoArgs) GetThumbnailIds() []string {
  return p.ThumbnailIds
}

func (p *MovieInfoServiceWriteMovieInfoArgs) GetPhotoIds() []string {
  return p.PhotoIds
}

func (p *MovieInfoServiceWriteMovieInfoArgs) GetVideoIds() []string {
  return p.VideoIds
}

func (p *MovieInfoServiceWriteMovieInfoArgs) GetAvgRating() string {
  return p.AvgRating
}

func (p *MovieInfoServiceWriteMovieInfoArgs) GetNumRating() int32 {
  return p.NumRating
}

func (p *MovieInfoServiceWriteMovieInfoArgs) GetCarrier() map[string]string {
  return p.Carrier
}
func (p *MovieInfoServiceWriteMovieInfoArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField11(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MovieInfoServiceWriteMovieInfoArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqID = v
}
  return nil
}

func (p *MovieInfoServiceWriteMovieInfoArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.MovieID = v
}
  return nil
}

func (p *MovieInfoServiceWriteMovieInfoArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Title = v
}
  return nil
}

func (p *MovieInfoServiceWriteMovieInfoArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Cast, 0, size)
  p.Casts =  tSlice
  for i := 0; i < size; i ++ {
    _elem470 := &Cast{}
    if err := _elem470.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem470), err)
    }
    p.Casts = append(p.Casts, _elem470)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MovieInfoServiceWriteMovieInfoArgs)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.PlotID = v
}
  return nil
}

func (p *MovieInfoServiceWriteMovieInfoArgs)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.ThumbnailIds =  tSlice
  for i := 0; i < size; i ++ {
var _elem471 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem471 = v
}
    p.ThumbnailIds = append(p.ThumbnailIds, _elem471)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MovieInfoServiceWriteMovieInfoArgs)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.PhotoIds =  tSlice
  for i := 0; i < size; i ++ {
var _elem472 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem472 = v
}
    p.PhotoIds = append(p.PhotoIds, _elem472)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MovieInfoServiceWriteMovieInfoArgs)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.VideoIds =  tSlice
  for i := 0; i < size; i ++ {
var _elem473 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem473 = v
}
    p.VideoIds = append(p.VideoIds, _elem473)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MovieInfoServiceWriteMovieInfoArgs)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.AvgRating = v
}
  return nil
}

func (p *MovieInfoServiceWriteMovieInfoArgs)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.NumRating = v
}
  return nil
}

func (p *MovieInfoServiceWriteMovieInfoArgs)  ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Carrier =  tMap
  for i := 0; i < size; i ++ {
var _key474 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key474 = v
}
var _val475 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val475 = v
}
    p.Carrier[_key474] = _val475
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *MovieInfoServiceWriteMovieInfoArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "WriteMovieInfo_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField11(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MovieInfoServiceWriteMovieInfoArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ReqID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.req_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req_id: ", p), err) }
  return err
}

func (p *MovieInfoServiceWriteMovieInfoArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "movie_id", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:movie_id: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.MovieID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.movie_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:movie_id: ", p), err) }
  return err
}

func (p *MovieInfoServiceWriteMovieInfoArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "title", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:title: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Title)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.title (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:title: ", p), err) }
  return err
}

func (p *MovieInfoServiceWriteMovieInfoArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "casts", thrift.LIST, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:casts: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Casts)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Casts {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:casts: ", p), err) }
  return err
}

func (p *MovieInfoServiceWriteMovieInfoArgs) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "plot_id", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:plot_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.PlotID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.plot_id (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:plot_id: ", p), err) }
  return err
}

func (p *MovieInfoServiceWriteMovieInfoArgs) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "thumbnail_ids", thrift.LIST, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:thumbnail_ids: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.ThumbnailIds)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ThumbnailIds {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:thumbnail_ids: ", p), err) }
  return err
}

func (p *MovieInfoServiceWriteMovieInfoArgs) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "photo_ids", thrift.LIST, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:photo_ids: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.PhotoIds)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.PhotoIds {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:photo_ids: ", p), err) }
  return err
}

func (p *MovieInfoServiceWriteMovieInfoArgs) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "video_ids", thrift.LIST, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:video_ids: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.VideoIds)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.VideoIds {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:video_ids: ", p), err) }
  return err
}

func (p *MovieInfoServiceWriteMovieInfoArgs) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "avg_rating", thrift.STRING, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:avg_rating: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AvgRating)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.avg_rating (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:avg_rating: ", p), err) }
  return err
}

func (p *MovieInfoServiceWriteMovieInfoArgs) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "num_rating", thrift.I32, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:num_rating: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.NumRating)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.num_rating (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:num_rating: ", p), err) }
  return err
}

func (p *MovieInfoServiceWriteMovieInfoArgs) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "carrier", thrift.MAP, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:carrier: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.Carrier)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Carrier {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:carrier: ", p), err) }
  return err
}

func (p *MovieInfoServiceWriteMovieInfoArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MovieInfoServiceWriteMovieInfoArgs(%+v)", *p)
}

// Attributes:
//  - Se
type MovieInfoServiceWriteMovieInfoResult struct {
  Se *ServiceException `thrift:"se,1" db:"se" json:"se,omitempty"`
}

func NewMovieInfoServiceWriteMovieInfoResult() *MovieInfoServiceWriteMovieInfoResult {
  return &MovieInfoServiceWriteMovieInfoResult{}
}

var MovieInfoServiceWriteMovieInfoResult_Se_DEFAULT *ServiceException
func (p *MovieInfoServiceWriteMovieInfoResult) GetSe() *ServiceException {
  if !p.IsSetSe() {
    return MovieInfoServiceWriteMovieInfoResult_Se_DEFAULT
  }
return p.Se
}
func (p *MovieInfoServiceWriteMovieInfoResult) IsSetSe() bool {
  return p.Se != nil
}

func (p *MovieInfoServiceWriteMovieInfoResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MovieInfoServiceWriteMovieInfoResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Se = &ServiceException{}
  if err := p.Se.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Se), err)
  }
  return nil
}

func (p *MovieInfoServiceWriteMovieInfoResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "WriteMovieInfo_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MovieInfoServiceWriteMovieInfoResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSe() {
    if err := oprot.WriteFieldBegin(ctx, "se", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:se: ", p), err) }
    if err := p.Se.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Se), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:se: ", p), err) }
  }
  return err
}

func (p *MovieInfoServiceWriteMovieInfoResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MovieInfoServiceWriteMovieInfoResult(%+v)", *p)
}

// Attributes:
//  - ReqID
//  - MovieID
//  - Carrier
type MovieInfoServiceReadMovieInfoArgs struct {
  ReqID int64 `thrift:"req_id,1" db:"req_id" json:"req_id"`
  MovieID string `thrift:"movie_id,2" db:"movie_id" json:"movie_id"`
  Carrier map[string]string `thrift:"carrier,3" db:"carrier" json:"carrier"`
}

func NewMovieInfoServiceReadMovieInfoArgs() *MovieInfoServiceReadMovieInfoArgs {
  return &MovieInfoServiceReadMovieInfoArgs{}
}


func (p *MovieInfoServiceReadMovieInfoArgs) GetReqID() int64 {
  return p.ReqID
}

func (p *MovieInfoServiceReadMovieInfoArgs) GetMovieID() string {
  return p.MovieID
}

func (p *MovieInfoServiceReadMovieInfoArgs) GetCarrier() map[string]string {
  return p.Carrier
}
func (p *MovieInfoServiceReadMovieInfoArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MovieInfoServiceReadMovieInfoArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqID = v
}
  return nil
}

func (p *MovieInfoServiceReadMovieInfoArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.MovieID = v
}
  return nil
}

func (p *MovieInfoServiceReadMovieInfoArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Carrier =  tMap
  for i := 0; i < size; i ++ {
var _key476 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key476 = v
}
var _val477 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val477 = v
}
    p.Carrier[_key476] = _val477
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *MovieInfoServiceReadMovieInfoArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ReadMovieInfo_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MovieInfoServiceReadMovieInfoArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ReqID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.req_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req_id: ", p), err) }
  return err
}

func (p *MovieInfoServiceReadMovieInfoArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "movie_id", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:movie_id: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.MovieID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.movie_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:movie_id: ", p), err) }
  return err
}

func (p *MovieInfoServiceReadMovieInfoArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "carrier", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:carrier: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.Carrier)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Carrier {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:carrier: ", p), err) }
  return err
}

func (p *MovieInfoServiceReadMovieInfoArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MovieInfoServiceReadMovieInfoArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Se
type MovieInfoServiceReadMovieInfoResult struct {
  Success *MovieInfo `thrift:"success,0" db:"success" json:"success,omitempty"`
  Se *ServiceException `thrift:"se,1" db:"se" json:"se,omitempty"`
}

func NewMovieInfoServiceReadMovieInfoResult() *MovieInfoServiceReadMovieInfoResult {
  return &MovieInfoServiceReadMovieInfoResult{}
}

var MovieInfoServiceReadMovieInfoResult_Success_DEFAULT *MovieInfo
func (p *MovieInfoServiceReadMovieInfoResult) GetSuccess() *MovieInfo {
  if !p.IsSetSuccess() {
    return MovieInfoServiceReadMovieInfoResult_Success_DEFAULT
  }
return p.Success
}
var MovieInfoServiceReadMovieInfoResult_Se_DEFAULT *ServiceException
func (p *MovieInfoServiceReadMovieInfoResult) GetSe() *ServiceException {
  if !p.IsSetSe() {
    return MovieInfoServiceReadMovieInfoResult_Se_DEFAULT
  }
return p.Se
}
func (p *MovieInfoServiceReadMovieInfoResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MovieInfoServiceReadMovieInfoResult) IsSetSe() bool {
  return p.Se != nil
}

func (p *MovieInfoServiceReadMovieInfoResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MovieInfoServiceReadMovieInfoResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &MovieInfo{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MovieInfoServiceReadMovieInfoResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Se = &ServiceException{}
  if err := p.Se.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Se), err)
  }
  return nil
}

func (p *MovieInfoServiceReadMovieInfoResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ReadMovieInfo_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MovieInfoServiceReadMovieInfoResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MovieInfoServiceReadMovieInfoResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSe() {
    if err := oprot.WriteFieldBegin(ctx, "se", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:se: ", p), err) }
    if err := p.Se.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Se), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:se: ", p), err) }
  }
  return err
}

func (p *MovieInfoServiceReadMovieInfoResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MovieInfoServiceReadMovieInfoResult(%+v)", *p)
}

// Attributes:
//  - ReqID
//  - MovieID
//  - SumUncommittedRating
//  - NumUncommittedRating
//  - Carrier
type MovieInfoServiceUpdateRatingArgs struct {
  ReqID int64 `thrift:"req_id,1" db:"req_id" json:"req_id"`
  MovieID string `thrift:"movie_id,2" db:"movie_id" json:"movie_id"`
  SumUncommittedRating int32 `thrift:"sum_uncommitted_rating,3" db:"sum_uncommitted_rating" json:"sum_uncommitted_rating"`
  NumUncommittedRating int32 `thrift:"num_uncommitted_rating,4" db:"num_uncommitted_rating" json:"num_uncommitted_rating"`
  Carrier map[string]string `thrift:"carrier,5" db:"carrier" json:"carrier"`
}

func NewMovieInfoServiceUpdateRatingArgs() *MovieInfoServiceUpdateRatingArgs {
  return &MovieInfoServiceUpdateRatingArgs{}
}


func (p *MovieInfoServiceUpdateRatingArgs) GetReqID() int64 {
  return p.ReqID
}

func (p *MovieInfoServiceUpdateRatingArgs) GetMovieID() string {
  return p.MovieID
}

func (p *MovieInfoServiceUpdateRatingArgs) GetSumUncommittedRating() int32 {
  return p.SumUncommittedRating
}

func (p *MovieInfoServiceUpdateRatingArgs) GetNumUncommittedRating() int32 {
  return p.NumUncommittedRating
}

func (p *MovieInfoServiceUpdateRatingArgs) GetCarrier() map[string]string {
  return p.Carrier
}
func (p *MovieInfoServiceUpdateRatingArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MovieInfoServiceUpdateRatingArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqID = v
}
  return nil
}

func (p *MovieInfoServiceUpdateRatingArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.MovieID = v
}
  return nil
}

func (p *MovieInfoServiceUpdateRatingArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.SumUncommittedRating = v
}
  return nil
}

func (p *MovieInfoServiceUpdateRatingArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.NumUncommittedRating = v
}
  return nil
}

func (p *MovieInfoServiceUpdateRatingArgs)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Carrier =  tMap
  for i := 0; i < size; i ++ {
var _key478 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key478 = v
}
var _val479 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val479 = v
}
    p.Carrier[_key478] = _val479
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *MovieInfoServiceUpdateRatingArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "UpdateRating_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MovieInfoServiceUpdateRatingArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ReqID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.req_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req_id: ", p), err) }
  return err
}

func (p *MovieInfoServiceUpdateRatingArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "movie_id", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:movie_id: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.MovieID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.movie_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:movie_id: ", p), err) }
  return err
}

func (p *MovieInfoServiceUpdateRatingArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "sum_uncommitted_rating", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:sum_uncommitted_rating: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SumUncommittedRating)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sum_uncommitted_rating (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:sum_uncommitted_rating: ", p), err) }
  return err
}

func (p *MovieInfoServiceUpdateRatingArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "num_uncommitted_rating", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:num_uncommitted_rating: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.NumUncommittedRating)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.num_uncommitted_rating (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:num_uncommitted_rating: ", p), err) }
  return err
}

func (p *MovieInfoServiceUpdateRatingArgs) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "carrier", thrift.MAP, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:carrier: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.Carrier)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Carrier {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:carrier: ", p), err) }
  return err
}

func (p *MovieInfoServiceUpdateRatingArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MovieInfoServiceUpdateRatingArgs(%+v)", *p)
}

// Attributes:
//  - Se
type MovieInfoServiceUpdateRatingResult struct {
  Se *ServiceException `thrift:"se,1" db:"se" json:"se,omitempty"`
}

func NewMovieInfoServiceUpdateRatingResult() *MovieInfoServiceUpdateRatingResult {
  return &MovieInfoServiceUpdateRatingResult{}
}

var MovieInfoServiceUpdateRatingResult_Se_DEFAULT *ServiceException
func (p *MovieInfoServiceUpdateRatingResult) GetSe() *ServiceException {
  if !p.IsSetSe() {
    return MovieInfoServiceUpdateRatingResult_Se_DEFAULT
  }
return p.Se
}
func (p *MovieInfoServiceUpdateRatingResult) IsSetSe() bool {
  return p.Se != nil
}

func (p *MovieInfoServiceUpdateRatingResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MovieInfoServiceUpdateRatingResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Se = &ServiceException{}
  if err := p.Se.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Se), err)
  }
  return nil
}

func (p *MovieInfoServiceUpdateRatingResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "UpdateRating_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MovieInfoServiceUpdateRatingResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSe() {
    if err := oprot.WriteFieldBegin(ctx, "se", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:se: ", p), err) }
    if err := p.Se.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Se), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:se: ", p), err) }
  }
  return err
}

func (p *MovieInfoServiceUpdateRatingResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MovieInfoServiceUpdateRatingResult(%+v)", *p)
}


type PageService interface {
  // Parameters:
  //  - ReqID
  //  - MovieID
  //  - ReviewStart
  //  - ReviewStop
  //  - Carrier
  ReadPage(ctx context.Context, req_id int64, movie_id string, review_start int32, review_stop int32, carrier map[string]string) (_r *Page, _err error)
}

type PageServiceClient struct {
  c thrift.TClient
  meta thrift.ResponseMeta
}

func NewPageServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *PageServiceClient {
  return &PageServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewPageServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *PageServiceClient {
  return &PageServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewPageServiceClient(c thrift.TClient) *PageServiceClient {
  return &PageServiceClient{
    c: c,
  }
}

func (p *PageServiceClient) Client_() thrift.TClient {
  return p.c
}

func (p *PageServiceClient) LastResponseMeta_() thrift.ResponseMeta {
  return p.meta
}

func (p *PageServiceClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
  p.meta = meta
}

// Parameters:
//  - ReqID
//  - MovieID
//  - ReviewStart
//  - ReviewStop
//  - Carrier
func (p *PageServiceClient) ReadPage(ctx context.Context, req_id int64, movie_id string, review_start int32, review_stop int32, carrier map[string]string) (_r *Page, _err error) {
  var _args534 PageServiceReadPageArgs
  _args534.ReqID = req_id
  _args534.MovieID = movie_id
  _args534.ReviewStart = review_start
  _args534.ReviewStop = review_stop
  _args534.Carrier = carrier
  var _result536 PageServiceReadPageResult
  var _meta535 thrift.ResponseMeta
  _meta535, _err = p.Client_().Call(ctx, "ReadPage", &_args534, &_result536)
  p.SetLastResponseMeta_(_meta535)
  if _err != nil {
    return
  }
  switch {
  case _result536.Se!= nil:
    return _r, _result536.Se
  }

  if _ret537 := _result536.GetSuccess(); _ret537 != nil {
    return _ret537, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "ReadPage failed: unknown result")
}

type PageServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler PageService
}

func (p *PageServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *PageServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *PageServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewPageServiceProcessor(handler PageService) *PageServiceProcessor {

  self538 := &PageServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self538.processorMap["ReadPage"] = &pageServiceProcessorReadPage{handler:handler}
return self538
}

func (p *PageServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
  if err2 != nil { return false, thrift.WrapTException(err2) }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(ctx, thrift.STRUCT)
  iprot.ReadMessageEnd(ctx)
  x539 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
  x539.Write(ctx, oprot)
  oprot.WriteMessageEnd(ctx)
  oprot.Flush(ctx)
  return false, x539

}

type pageServiceProcessorReadPage struct {
  handler PageService
}

func (p *pageServiceProcessorReadPage) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err540 error
  args := PageServiceReadPageArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "ReadPage", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := PageServiceReadPageResult{}
  if retval, err2 := p.handler.ReadPage(ctx, args.ReqID, args.MovieID, args.ReviewStart, args.ReviewStop, args.Carrier); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    switch v := err2.(type) {
    case *ServiceException:
      result.Se = v
    default:
      if errors.Is(err2, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err2)
      }
      if errors.Is(err2, context.Canceled) {
        if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
          return false, thrift.WrapTException(err)
        }
      }
      _exc541 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ReadPage: " + err2.Error())
      if err2 := oprot.WriteMessageBegin(ctx, "ReadPage", thrift.EXCEPTION, seqId); err2 != nil {
        _write_err540 = thrift.WrapTException(err2)
      }
      if err2 := _exc541.Write(ctx, oprot); _write_err540 == nil && err2 != nil {
        _write_err540 = thrift.WrapTException(err2)
      }
      if err2 := oprot.WriteMessageEnd(ctx); _write_err540 == nil && err2 != nil {
        _write_err540 = thrift.WrapTException(err2)
      }
      if err2 := oprot.Flush(ctx); _write_err540 == nil && err2 != nil {
        _write_err540 = thrift.WrapTException(err2)
      }
      if _write_err540 != nil {
        return false, thrift.WrapTException(_write_err540)
      }
      return true, err
    }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "ReadPage", thrift.REPLY, seqId); err2 != nil {
    _write_err540 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err540 == nil && err2 != nil {
    _write_err540 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err540 == nil && err2 != nil {
    _write_err540 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err540 == nil && err2 != nil {
    _write_err540 = thrift.WrapTException(err2)
  }
  if _write_err540 != nil {
    return false, thrift.WrapTException(_write_err540)
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - ReqID
//  - MovieID
//  - ReviewStart
//  - ReviewStop
//  - Carrier
type PageServiceReadPageArgs struct {
  ReqID int64 `thrift:"req_id,1" db:"req_id" json:"req_id"`
  MovieID string `thrift:"movie_id,2" db:"movie_id" json:"movie_id"`
  ReviewStart int32 `thrift:"review_start,3" db:"review_start" json:"review_start"`
  ReviewStop int32 `thrift:"review_stop,4" db:"review_stop" json:"review_stop"`
  Carrier map[string]string `thrift:"carrier,5" db:"carrier" json:"carrier"`
}

func NewPageServiceReadPageArgs() *PageServiceReadPageArgs {
  return &PageServiceReadPageArgs{}
}


func (p *PageServiceReadPageArgs) GetReqID() int64 {
  return p.ReqID
}

func (p *PageServiceReadPageArgs) GetMovieID() string {
  return p.MovieID
}

func (p *PageServiceReadPageArgs) GetReviewStart() int32 {
  return p.ReviewStart
}

func (p *PageServiceReadPageArgs) GetReviewStop() int32 {
  return p.ReviewStop
}

func (p *PageServiceReadPageArgs) GetCarrier() map[string]string {
  return p.Carrier
}
func (p *PageServiceReadPageArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PageServiceReadPageArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqID = v
}
  return nil
}

func (p *PageServiceReadPageArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.MovieID = v
}
  return nil
}

func (p *PageServiceReadPageArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ReviewStart = v
}
  return nil
}

func (p *PageServiceReadPageArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.ReviewStop = v
}
  return nil
}

func (p *PageServiceReadPageArgs)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Carrier =  tMap
  for i := 0; i < size; i ++ {
var _key542 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key542 = v
}
var _val543 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val543 = v
}
    p.Carrier[_key542] = _val543
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *PageServiceReadPageArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ReadPage_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PageServiceReadPageArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ReqID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.req_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req_id: ", p), err) }
  return err
}

func (p *PageServiceReadPageArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "movie_id", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:movie_id: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.MovieID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.movie_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:movie_id: ", p), err) }
  return err
}

func (p *PageServiceReadPageArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "review_start", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:review_start: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ReviewStart)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.review_start (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:review_start: ", p), err) }
  return err
}

func (p *PageServiceReadPageArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "review_stop", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:review_stop: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ReviewStop)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.review_stop (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:review_stop: ", p), err) }
  return err
}

func (p *PageServiceReadPageArgs) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "carrier", thrift.MAP, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:carrier: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.Carrier)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Carrier {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:carrier: ", p), err) }
  return err
}

func (p *PageServiceReadPageArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PageServiceReadPageArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Se
type PageServiceReadPageResult struct {
  Success *Page `thrift:"success,0" db:"success" json:"success,omitempty"`
  Se *ServiceException `thrift:"se,1" db:"se" json:"se,omitempty"`
}

func NewPageServiceReadPageResult() *PageServiceReadPageResult {
  return &PageServiceReadPageResult{}
}

var PageServiceReadPageResult_Success_DEFAULT *Page
func (p *PageServiceReadPageResult) GetSuccess() *Page {
  if !p.IsSetSuccess() {
    return PageServiceReadPageResult_Success_DEFAULT
  }
return p.Success
}
var PageServiceReadPageResult_Se_DEFAULT *ServiceException
func (p *PageServiceReadPageResult) GetSe() *ServiceException {
  if !p.IsSetSe() {
    return PageServiceReadPageResult_Se_DEFAULT
  }
return p.Se
}
func (p *PageServiceReadPageResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *PageServiceReadPageResult) IsSetSe() bool {
  return p.Se != nil
}

func (p *PageServiceReadPageResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PageServiceReadPageResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &Page{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *PageServiceReadPageResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Se = &ServiceException{}
  if err := p.Se.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Se), err)
  }
  return nil
}

func (p *PageServiceReadPageResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ReadPage_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PageServiceReadPageResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *PageServiceReadPageResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSe() {
    if err := oprot.WriteFieldBegin(ctx, "se", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:se: ", p), err) }
    if err := p.Se.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Se), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:se: ", p), err) }
  }
  return err
}

func (p *PageServiceReadPageResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PageServiceReadPageResult(%+v)", *p)
}


