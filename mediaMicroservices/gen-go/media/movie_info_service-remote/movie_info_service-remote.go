// Code generated by Thrift Compiler (0.19.0). DO NOT EDIT.

package main

import (
	"context"
	"flag"
	"fmt"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
	thrift "github.com/apache/thrift/lib/go/thrift"
	"media"
)

var _ = media.GoUnusedProtection__

func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "  void WriteMovieInfo(i64 req_id, string movie_id, string title,  casts, i64 plot_id,  thumbnail_ids,  photo_ids,  video_ids, string avg_rating, i32 num_rating,  carrier)")
  fmt.Fprintln(os.Stderr, "  MovieInfo ReadMovieInfo(i64 req_id, string movie_id,  carrier)")
  fmt.Fprintln(os.Stderr, "  void UpdateRating(i64 req_id, string movie_id, i32 sum_uncommitted_rating, i32 num_uncommitted_rating,  carrier)")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

type httpHeaders map[string]string

func (h httpHeaders) String() string {
  var m map[string]string = h
  return fmt.Sprintf("%s", m)
}

func (h httpHeaders) Set(value string) error {
  parts := strings.Split(value, ": ")
  if len(parts) != 2 {
    return fmt.Errorf("header should be of format 'Key: Value'")
  }
  h[parts[0]] = parts[1]
  return nil
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  headers := make(httpHeaders)
  var parsedUrl *url.URL
  var trans thrift.TTransport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Var(headers, "H", "Headers to set on the http(s) request (e.g. -H \"Key: Value\")")
  flag.Parse()
  
  if len(urlString) > 0 {
    var err error
    parsedUrl, err = url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http" || parsedUrl.Scheme == "https"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  var cfg *thrift.TConfiguration = nil
  if useHttp {
    trans, err = thrift.NewTHttpClient(parsedUrl.String())
    if len(headers) > 0 {
      httptrans := trans.(*thrift.THttpClient)
      for key, value := range headers {
        httptrans.SetHeader(key, value)
      }
    }
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans = thrift.NewTSocketConf(net.JoinHostPort(host, portStr), cfg)
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewTFramedTransportConf(trans, cfg)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactoryConf(cfg)
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactoryConf(cfg)
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryConf(cfg)
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  iprot := protocolFactory.GetProtocol(trans)
  oprot := protocolFactory.GetProtocol(trans)
  client := media.NewMovieInfoServiceClient(thrift.NewTStandardClient(iprot, oprot))
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "WriteMovieInfo":
    if flag.NArg() - 1 != 11 {
      fmt.Fprintln(os.Stderr, "WriteMovieInfo requires 11 args")
      flag.Usage()
    }
    argvalue0, err480 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err480 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    arg483 := flag.Arg(4)
    mbTrans484 := thrift.NewTMemoryBufferLen(len(arg483))
    defer mbTrans484.Close()
    _, err485 := mbTrans484.WriteString(arg483)
    if err485 != nil { 
      Usage()
      return
    }
    factory486 := thrift.NewTJSONProtocolFactory()
    jsProt487 := factory486.GetProtocol(mbTrans484)
    containerStruct3 := media.NewMovieInfoServiceWriteMovieInfoArgs()
    err488 := containerStruct3.ReadField4(context.Background(), jsProt487)
    if err488 != nil {
      Usage()
      return
    }
    argvalue3 := containerStruct3.Casts
    value3 := argvalue3
    argvalue4, err489 := (strconv.ParseInt(flag.Arg(5), 10, 64))
    if err489 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    arg490 := flag.Arg(6)
    mbTrans491 := thrift.NewTMemoryBufferLen(len(arg490))
    defer mbTrans491.Close()
    _, err492 := mbTrans491.WriteString(arg490)
    if err492 != nil { 
      Usage()
      return
    }
    factory493 := thrift.NewTJSONProtocolFactory()
    jsProt494 := factory493.GetProtocol(mbTrans491)
    containerStruct5 := media.NewMovieInfoServiceWriteMovieInfoArgs()
    err495 := containerStruct5.ReadField6(context.Background(), jsProt494)
    if err495 != nil {
      Usage()
      return
    }
    argvalue5 := containerStruct5.ThumbnailIds
    value5 := argvalue5
    arg496 := flag.Arg(7)
    mbTrans497 := thrift.NewTMemoryBufferLen(len(arg496))
    defer mbTrans497.Close()
    _, err498 := mbTrans497.WriteString(arg496)
    if err498 != nil { 
      Usage()
      return
    }
    factory499 := thrift.NewTJSONProtocolFactory()
    jsProt500 := factory499.GetProtocol(mbTrans497)
    containerStruct6 := media.NewMovieInfoServiceWriteMovieInfoArgs()
    err501 := containerStruct6.ReadField7(context.Background(), jsProt500)
    if err501 != nil {
      Usage()
      return
    }
    argvalue6 := containerStruct6.PhotoIds
    value6 := argvalue6
    arg502 := flag.Arg(8)
    mbTrans503 := thrift.NewTMemoryBufferLen(len(arg502))
    defer mbTrans503.Close()
    _, err504 := mbTrans503.WriteString(arg502)
    if err504 != nil { 
      Usage()
      return
    }
    factory505 := thrift.NewTJSONProtocolFactory()
    jsProt506 := factory505.GetProtocol(mbTrans503)
    containerStruct7 := media.NewMovieInfoServiceWriteMovieInfoArgs()
    err507 := containerStruct7.ReadField8(context.Background(), jsProt506)
    if err507 != nil {
      Usage()
      return
    }
    argvalue7 := containerStruct7.VideoIds
    value7 := argvalue7
    argvalue8 := flag.Arg(9)
    value8 := argvalue8
    tmp9, err509 := (strconv.Atoi(flag.Arg(10)))
    if err509 != nil {
      Usage()
      return
    }
    argvalue9 := int32(tmp9)
    value9 := argvalue9
    arg510 := flag.Arg(11)
    mbTrans511 := thrift.NewTMemoryBufferLen(len(arg510))
    defer mbTrans511.Close()
    _, err512 := mbTrans511.WriteString(arg510)
    if err512 != nil { 
      Usage()
      return
    }
    factory513 := thrift.NewTJSONProtocolFactory()
    jsProt514 := factory513.GetProtocol(mbTrans511)
    containerStruct10 := media.NewMovieInfoServiceWriteMovieInfoArgs()
    err515 := containerStruct10.ReadField11(context.Background(), jsProt514)
    if err515 != nil {
      Usage()
      return
    }
    argvalue10 := containerStruct10.Carrier
    value10 := argvalue10
    fmt.Print(client.WriteMovieInfo(context.Background(), value0, value1, value2, value3, value4, value5, value6, value7, value8, value9, value10))
    fmt.Print("\n")
    break
  case "ReadMovieInfo":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "ReadMovieInfo requires 3 args")
      flag.Usage()
    }
    argvalue0, err516 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err516 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg518 := flag.Arg(3)
    mbTrans519 := thrift.NewTMemoryBufferLen(len(arg518))
    defer mbTrans519.Close()
    _, err520 := mbTrans519.WriteString(arg518)
    if err520 != nil { 
      Usage()
      return
    }
    factory521 := thrift.NewTJSONProtocolFactory()
    jsProt522 := factory521.GetProtocol(mbTrans519)
    containerStruct2 := media.NewMovieInfoServiceReadMovieInfoArgs()
    err523 := containerStruct2.ReadField3(context.Background(), jsProt522)
    if err523 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.Carrier
    value2 := argvalue2
    fmt.Print(client.ReadMovieInfo(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "UpdateRating":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "UpdateRating requires 5 args")
      flag.Usage()
    }
    argvalue0, err524 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err524 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err526 := (strconv.Atoi(flag.Arg(3)))
    if err526 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    tmp3, err527 := (strconv.Atoi(flag.Arg(4)))
    if err527 != nil {
      Usage()
      return
    }
    argvalue3 := int32(tmp3)
    value3 := argvalue3
    arg528 := flag.Arg(5)
    mbTrans529 := thrift.NewTMemoryBufferLen(len(arg528))
    defer mbTrans529.Close()
    _, err530 := mbTrans529.WriteString(arg528)
    if err530 != nil { 
      Usage()
      return
    }
    factory531 := thrift.NewTJSONProtocolFactory()
    jsProt532 := factory531.GetProtocol(mbTrans529)
    containerStruct4 := media.NewMovieInfoServiceUpdateRatingArgs()
    err533 := containerStruct4.ReadField5(context.Background(), jsProt532)
    if err533 != nil {
      Usage()
      return
    }
    argvalue4 := containerStruct4.Carrier
    value4 := argvalue4
    fmt.Print(client.UpdateRating(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
