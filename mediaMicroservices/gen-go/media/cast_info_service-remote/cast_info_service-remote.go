// Code generated by Thrift Compiler (0.19.0). DO NOT EDIT.

package main

import (
	"context"
	"flag"
	"fmt"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
	thrift "github.com/apache/thrift/lib/go/thrift"
	"media"
)

var _ = media.GoUnusedProtection__

func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "  void WriteCastInfo(i64 req_id, i64 cast_info_id, string name, bool gender, string intro,  carrier)")
  fmt.Fprintln(os.Stderr, "   ReadCastInfo(i64 req_id,  cast_ids,  carrier)")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

type httpHeaders map[string]string

func (h httpHeaders) String() string {
  var m map[string]string = h
  return fmt.Sprintf("%s", m)
}

func (h httpHeaders) Set(value string) error {
  parts := strings.Split(value, ": ")
  if len(parts) != 2 {
    return fmt.Errorf("header should be of format 'Key: Value'")
  }
  h[parts[0]] = parts[1]
  return nil
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  headers := make(httpHeaders)
  var parsedUrl *url.URL
  var trans thrift.TTransport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Var(headers, "H", "Headers to set on the http(s) request (e.g. -H \"Key: Value\")")
  flag.Parse()
  
  if len(urlString) > 0 {
    var err error
    parsedUrl, err = url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http" || parsedUrl.Scheme == "https"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  var cfg *thrift.TConfiguration = nil
  if useHttp {
    trans, err = thrift.NewTHttpClient(parsedUrl.String())
    if len(headers) > 0 {
      httptrans := trans.(*thrift.THttpClient)
      for key, value := range headers {
        httptrans.SetHeader(key, value)
      }
    }
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans = thrift.NewTSocketConf(net.JoinHostPort(host, portStr), cfg)
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewTFramedTransportConf(trans, cfg)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactoryConf(cfg)
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactoryConf(cfg)
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryConf(cfg)
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  iprot := protocolFactory.GetProtocol(trans)
  oprot := protocolFactory.GetProtocol(trans)
  client := media.NewCastInfoServiceClient(thrift.NewTStandardClient(iprot, oprot))
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "WriteCastInfo":
    if flag.NArg() - 1 != 6 {
      fmt.Fprintln(os.Stderr, "WriteCastInfo requires 6 args")
      flag.Usage()
    }
    argvalue0, err395 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err395 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1, err396 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err396 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4) == "true"
    value3 := argvalue3
    argvalue4 := flag.Arg(5)
    value4 := argvalue4
    arg400 := flag.Arg(6)
    mbTrans401 := thrift.NewTMemoryBufferLen(len(arg400))
    defer mbTrans401.Close()
    _, err402 := mbTrans401.WriteString(arg400)
    if err402 != nil { 
      Usage()
      return
    }
    factory403 := thrift.NewTJSONProtocolFactory()
    jsProt404 := factory403.GetProtocol(mbTrans401)
    containerStruct5 := media.NewCastInfoServiceWriteCastInfoArgs()
    err405 := containerStruct5.ReadField6(context.Background(), jsProt404)
    if err405 != nil {
      Usage()
      return
    }
    argvalue5 := containerStruct5.Carrier
    value5 := argvalue5
    fmt.Print(client.WriteCastInfo(context.Background(), value0, value1, value2, value3, value4, value5))
    fmt.Print("\n")
    break
  case "ReadCastInfo":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "ReadCastInfo requires 3 args")
      flag.Usage()
    }
    argvalue0, err406 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err406 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg407 := flag.Arg(2)
    mbTrans408 := thrift.NewTMemoryBufferLen(len(arg407))
    defer mbTrans408.Close()
    _, err409 := mbTrans408.WriteString(arg407)
    if err409 != nil { 
      Usage()
      return
    }
    factory410 := thrift.NewTJSONProtocolFactory()
    jsProt411 := factory410.GetProtocol(mbTrans408)
    containerStruct1 := media.NewCastInfoServiceReadCastInfoArgs()
    err412 := containerStruct1.ReadField2(context.Background(), jsProt411)
    if err412 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.CastIds
    value1 := argvalue1
    arg413 := flag.Arg(3)
    mbTrans414 := thrift.NewTMemoryBufferLen(len(arg413))
    defer mbTrans414.Close()
    _, err415 := mbTrans414.WriteString(arg413)
    if err415 != nil { 
      Usage()
      return
    }
    factory416 := thrift.NewTJSONProtocolFactory()
    jsProt417 := factory416.GetProtocol(mbTrans414)
    containerStruct2 := media.NewCastInfoServiceReadCastInfoArgs()
    err418 := containerStruct2.ReadField3(context.Background(), jsProt417)
    if err418 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.Carrier
    value2 := argvalue2
    fmt.Print(client.ReadCastInfo(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
